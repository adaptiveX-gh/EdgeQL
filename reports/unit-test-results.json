{"numTotalTestSuites":593,"numPassedTestSuites":582,"numFailedTestSuites":11,"numPendingTestSuites":0,"numTotalTests":4458,"numPassedTests":4420,"numFailedTests":38,"numPendingTests":0,"numTodoTests":0,"startTime":1756058582291,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["","Datasets API","GET /api/datasets"],"fullName":" Datasets API GET /api/datasets should return list of datasets including sample data","status":"passed","title":"should return list of datasets including sample data","duration":24,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets"],"fullName":" Datasets API GET /api/datasets should return datasets with correct structure","status":"passed","title":"should return datasets with correct structure","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets"],"fullName":" Datasets API GET /api/datasets should return sample dataset with expected properties","status":"passed","title":"should return sample dataset with expected properties","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id"],"fullName":" Datasets API GET /api/datasets/:id should return specific dataset details","status":"passed","title":"should return specific dataset details","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id"],"fullName":" Datasets API GET /api/datasets/:id should return 404 for non-existent dataset","status":"passed","title":"should return 404 for non-existent dataset","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id"],"fullName":" Datasets API GET /api/datasets/:id should handle invalid dataset ID format","status":"passed","title":"should handle invalid dataset ID format","duration":3,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id"],"fullName":" Datasets API GET /api/datasets/:id should handle empty dataset ID","status":"passed","title":"should handle empty dataset ID","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id/preview"],"fullName":" Datasets API GET /api/datasets/:id/preview should return preview data for existing dataset","status":"passed","title":"should return preview data for existing dataset","duration":3,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id/preview"],"fullName":" Datasets API GET /api/datasets/:id/preview should return consistent preview data structure","status":"passed","title":"should return consistent preview data structure","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","GET /api/datasets/:id/preview"],"fullName":" Datasets API GET /api/datasets/:id/preview should return 404 for preview of non-existent dataset","status":"passed","title":"should return 404 for preview of non-existent dataset","duration":3,"failureMessages":[]},{"ancestorTitles":["","Datasets API","POST /api/datasets/upload"],"fullName":" Datasets API POST /api/datasets/upload should return 501 for unimplemented upload feature","status":"passed","title":"should return 501 for unimplemented upload feature","duration":5,"failureMessages":[]},{"ancestorTitles":["","Datasets API","POST /api/datasets/upload"],"fullName":" Datasets API POST /api/datasets/upload should handle empty upload request","status":"passed","title":"should handle empty upload request","duration":9,"failureMessages":[]},{"ancestorTitles":["","Datasets API","DELETE /api/datasets/:id"],"fullName":" Datasets API DELETE /api/datasets/:id should return 501 for unimplemented delete feature","status":"passed","title":"should return 501 for unimplemented delete feature","duration":4,"failureMessages":[]},{"ancestorTitles":["","Datasets API","Edge Cases"],"fullName":" Datasets API Edge Cases should handle concurrent requests for same dataset","status":"passed","title":"should handle concurrent requests for same dataset","duration":13,"failureMessages":[]},{"ancestorTitles":["","Datasets API","Edge Cases"],"fullName":" Datasets API Edge Cases should handle malformed dataset IDs","status":"failed","title":"should handle malformed dataset IDs","duration":4,"failureMessages":["expected 404 \"Not Found\", got 200 \"OK\""],"location":{"line":217,"column":12}},{"ancestorTitles":["","Datasets API","Edge Cases"],"fullName":" Datasets API Edge Cases should handle very long dataset IDs","status":"passed","title":"should handle very long dataset IDs","duration":3,"failureMessages":[]},{"ancestorTitles":["","Datasets API","Edge Cases"],"fullName":" Datasets API Edge Cases should handle special characters in dataset IDs","status":"passed","title":"should handle special characters in dataset IDs","duration":6,"failureMessages":[]},{"ancestorTitles":["","Datasets API","Edge Cases"],"fullName":" Datasets API Edge Cases should handle concurrent preview requests","status":"passed","title":"should handle concurrent preview requests","duration":12,"failureMessages":[]}],"startTime":1756058588583,"endTime":1756058588697,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/src/tests/datasets.test.ts"},{"assertionResults":[{"ancestorTitles":["","Nodes API","GET /api/nodes"],"fullName":" Nodes API GET /api/nodes should return list of all nodes including built-ins","status":"passed","title":"should return list of all nodes including built-ins","duration":19,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes"],"fullName":" Nodes API GET /api/nodes should return nodes with correct structure","status":"passed","title":"should return nodes with correct structure","duration":4,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/builtin"],"fullName":" Nodes API GET /api/nodes/builtin should return only built-in nodes","status":"passed","title":"should return only built-in nodes","duration":3,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/builtin"],"fullName":" Nodes API GET /api/nodes/builtin should include all expected built-in nodes","status":"passed","title":"should include all expected built-in nodes","duration":3,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/custom"],"fullName":" Nodes API GET /api/nodes/custom should return empty list when no custom nodes exist","status":"passed","title":"should return empty list when no custom nodes exist","duration":4,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/:id"],"fullName":" Nodes API GET /api/nodes/:id should return specific built-in node","status":"passed","title":"should return specific built-in node","duration":3,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/:id"],"fullName":" Nodes API GET /api/nodes/:id should return indicator node with correct schema","status":"passed","title":"should return indicator node with correct schema","duration":3,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/:id"],"fullName":" Nodes API GET /api/nodes/:id should return crossover signal node with correct schema","status":"passed","title":"should return crossover signal node with correct schema","duration":3,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/:id"],"fullName":" Nodes API GET /api/nodes/:id should return backtest node with correct schema","status":"passed","title":"should return backtest node with correct schema","duration":4,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/:id"],"fullName":" Nodes API GET /api/nodes/:id should return 404 for non-existent node","status":"passed","title":"should return 404 for non-existent node","duration":6,"failureMessages":[]},{"ancestorTitles":["","Nodes API","GET /api/nodes/:id"],"fullName":" Nodes API GET /api/nodes/:id should handle invalid node ID format","status":"passed","title":"should handle invalid node ID format","duration":3,"failureMessages":[]},{"ancestorTitles":["","Nodes API","POST /api/nodes"],"fullName":" Nodes API POST /api/nodes should return 501 for unimplemented custom node creation","status":"passed","title":"should return 501 for unimplemented custom node creation","duration":8,"failureMessages":[]},{"ancestorTitles":["","Nodes API","POST /api/nodes"],"fullName":" Nodes API POST /api/nodes should handle empty request body","status":"passed","title":"should handle empty request body","duration":2,"failureMessages":[]},{"ancestorTitles":["","Nodes API","PUT /api/nodes/:id"],"fullName":" Nodes API PUT /api/nodes/:id should return 501 for unimplemented custom node editing","status":"passed","title":"should return 501 for unimplemented custom node editing","duration":2,"failureMessages":[]},{"ancestorTitles":["","Nodes API","DELETE /api/nodes/:id"],"fullName":" Nodes API DELETE /api/nodes/:id should return 501 for unimplemented custom node deletion","status":"passed","title":"should return 501 for unimplemented custom node deletion","duration":2,"failureMessages":[]},{"ancestorTitles":["","Nodes API","Edge Cases"],"fullName":" Nodes API Edge Cases should handle concurrent requests for same node","status":"passed","title":"should handle concurrent requests for same node","duration":13,"failureMessages":[]},{"ancestorTitles":["","Nodes API","Edge Cases"],"fullName":" Nodes API Edge Cases should handle malformed node IDs","status":"failed","title":"should handle malformed node IDs","duration":4,"failureMessages":["expected 404 \"Not Found\", got 200 \"OK\""],"location":{"line":234,"column":12}},{"ancestorTitles":["","Nodes API","Edge Cases"],"fullName":" Nodes API Edge Cases should handle very long node IDs","status":"passed","title":"should handle very long node IDs","duration":4,"failureMessages":[]}],"startTime":1756058588917,"endTime":1756058589008,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/src/tests/nodes.test.ts"},{"assertionResults":[{"ancestorTitles":["","Pipelines API","GET /api/pipelines"],"fullName":" Pipelines API GET /api/pipelines should return list of pipelines","status":"passed","title":"should return list of pipelines","duration":15,"failureMessages":[]},{"ancestorTitles":["","Pipelines API","GET /api/pipelines/:id"],"fullName":" Pipelines API GET /api/pipelines/:id should return specific pipeline","status":"passed","title":"should return specific pipeline","duration":4,"failureMessages":[]},{"ancestorTitles":["","Pipelines API","GET /api/pipelines/:id"],"fullName":" Pipelines API GET /api/pipelines/:id should return 404 for non-existent pipeline","status":"passed","title":"should return 404 for non-existent pipeline","duration":4,"failureMessages":[]},{"ancestorTitles":["","Pipelines API","POST /api/pipelines/:id/run"],"fullName":" Pipelines API POST /api/pipelines/:id/run should start pipeline execution","status":"passed","title":"should start pipeline execution","duration":8,"failureMessages":[]},{"ancestorTitles":["","Pipelines API","POST /api/pipelines/:id/run"],"fullName":" Pipelines API POST /api/pipelines/:id/run should return 404 for non-existent pipeline","status":"passed","title":"should return 404 for non-existent pipeline","duration":3,"failureMessages":[]},{"ancestorTitles":["","Pipelines API","GET /api/pipelines/:id/runs"],"fullName":" Pipelines API GET /api/pipelines/:id/runs should return empty runs list for pipeline with no runs","status":"passed","title":"should return empty runs list for pipeline with no runs","duration":3,"failureMessages":[]}],"startTime":1756058611510,"endTime":1756058611547,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/src/tests/pipelines.test.ts"},{"assertionResults":[{"ancestorTitles":["","Runs API","GET /api/runs"],"fullName":" Runs API GET /api/runs should return empty list when no runs exist","status":"passed","title":"should return empty list when no runs exist","duration":21,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs"],"fullName":" Runs API GET /api/runs should respect limit parameter","status":"passed","title":"should respect limit parameter","duration":5,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs"],"fullName":" Runs API GET /api/runs should respect offset parameter","status":"passed","title":"should respect offset parameter","duration":5,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs"],"fullName":" Runs API GET /api/runs should cap limit at 100","status":"passed","title":"should cap limit at 100","duration":3,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs"],"fullName":" Runs API GET /api/runs should handle invalid limit parameter","status":"passed","title":"should handle invalid limit parameter","duration":4,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs/:id"],"fullName":" Runs API GET /api/runs/:id should return 404 for non-existent run","status":"passed","title":"should return 404 for non-existent run","duration":4,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs/:id"],"fullName":" Runs API GET /api/runs/:id should handle invalid run ID format","status":"passed","title":"should handle invalid run ID format","duration":6,"failureMessages":[]},{"ancestorTitles":["","Runs API","GET /api/runs/:id/logs"],"fullName":" Runs API GET /api/runs/:id/logs should return 404 for non-existent run logs","status":"passed","title":"should return 404 for non-existent run logs","duration":3,"failureMessages":[]},{"ancestorTitles":["","Runs API","POST /api/runs/:id/cancel"],"fullName":" Runs API POST /api/runs/:id/cancel should return 404 for non-existent run","status":"passed","title":"should return 404 for non-existent run","duration":6,"failureMessages":[]},{"ancestorTitles":["","Runs API","Edge Cases"],"fullName":" Runs API Edge Cases should handle malformed URLs gracefully","status":"passed","title":"should handle malformed URLs gracefully","duration":3,"failureMessages":[]},{"ancestorTitles":["","Runs API","Edge Cases"],"fullName":" Runs API Edge Cases should handle empty request body for cancel operation","status":"passed","title":"should handle empty request body for cancel operation","duration":3,"failureMessages":[]},{"ancestorTitles":["","Runs API","Edge Cases"],"fullName":" Runs API Edge Cases should handle concurrent requests to same run","status":"passed","title":"should handle concurrent requests to same run","duration":18,"failureMessages":[]}],"startTime":1756058604243,"endTime":1756058604324,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/src/tests/runs.test.ts"},{"assertionResults":[{"ancestorTitles":["","PipelineCompiler Integration Tests","Valid Pipeline Compilation"],"fullName":" PipelineCompiler Integration Tests Valid Pipeline Compilation should successfully compile Moving Average Crossover strategy","status":"failed","title":"should successfully compile Moving Average Crossover strategy","duration":16,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":23,"column":30}},{"ancestorTitles":["","PipelineCompiler Integration Tests","Valid Pipeline Compilation"],"fullName":" PipelineCompiler Integration Tests Valid Pipeline Compilation should successfully compile RSI strategy","status":"failed","title":"should successfully compile RSI strategy","duration":3,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":61,"column":30}},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect missing required parameters","status":"passed","title":"should detect missing required parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect circular dependencies","status":"passed","title":"should detect circular dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect duplicate node IDs","status":"passed","title":"should detect duplicate node IDs","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect invalid parameter values","status":"passed","title":"should detect invalid parameter values","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect missing dependencies","status":"passed","title":"should detect missing dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect unknown node types","status":"passed","title":"should detect unknown node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should handle invalid YAML syntax","status":"passed","title":"should handle invalid YAML syntax","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Execution Order Validation"],"fullName":" PipelineCompiler Integration Tests Execution Order Validation should correctly order nodes with complex dependencies","status":"failed","title":"should correctly order nodes with complex dependencies","duration":2,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":296,"column":30}},{"ancestorTitles":["","PipelineCompiler Integration Tests","Schema Validation"],"fullName":" PipelineCompiler Integration Tests Schema Validation should validate node ID format","status":"passed","title":"should validate node ID format","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Schema Validation"],"fullName":" PipelineCompiler Integration Tests Schema Validation should require at least one node in pipeline","status":"passed","title":"should require at least one node in pipeline","duration":0,"failureMessages":[]}],"startTime":1756058588439,"endTime":1756058588466,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/src/tests/integration.test.ts"},{"assertionResults":[{"ancestorTitles":["","PipelineValidator","valid pipeline validation"],"fullName":" PipelineValidator valid pipeline validation should validate a correct pipeline","status":"failed","title":"should validate a correct pipeline","duration":7,"failureMessages":["expected [ { type: 'semantic', …(1) } ] to have a length of +0 but got 1"],"location":{"line":38,"column":22}},{"ancestorTitles":["","PipelineValidator","dependency validation"],"fullName":" PipelineValidator dependency validation should detect missing dependencies","status":"passed","title":"should detect missing dependencies","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator","dependency validation"],"fullName":" PipelineValidator dependency validation should detect duplicate node IDs","status":"passed","title":"should detect duplicate node IDs","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator","node type validation"],"fullName":" PipelineValidator node type validation should detect unknown node types","status":"passed","title":"should detect unknown node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator","parameter validation"],"fullName":" PipelineValidator parameter validation should detect missing required parameters","status":"failed","title":"should detect missing required parameters","duration":2,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":119,"column":82}},{"ancestorTitles":["","PipelineValidator","parameter validation"],"fullName":" PipelineValidator parameter validation should validate indicator parameters","status":"failed","title":"should validate indicator parameters","duration":0,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":137,"column":73}}],"startTime":1756058605653,"endTime":1756058605663,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/src/tests/pipelineValidator.test.ts"},{"assertionResults":[{"ancestorTitles":["","PipelineValidator Unit Tests","Constructor and Initialization"],"fullName":" PipelineValidator Unit Tests Constructor and Initialization should initialize with built-in node definitions","status":"failed","title":"should initialize with built-in node definitions","duration":10,"failureMessages":["expected [ { type: 'semantic', …(1) } ] to have a length of +0 but got 1"],"location":{"line":33,"column":22}},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should validate a simple valid pipeline","status":"failed","title":"should validate a simple valid pipeline","duration":1,"failureMessages":["expected [ { type: 'semantic', …(1) } ] to have a length of +0 but got 1"],"location":{"line":63,"column":22}},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should reject pipeline with empty node list","status":"passed","title":"should reject pipeline with empty node list","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should detect duplicate node IDs","status":"passed","title":"should detect duplicate node IDs","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should validate node ID format","status":"passed","title":"should validate node ID format","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Node Type Validation"],"fullName":" PipelineValidator Unit Tests Node Type Validation should detect unknown node types","status":"passed","title":"should detect unknown node types","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Node Type Validation"],"fullName":" PipelineValidator Unit Tests Node Type Validation should validate all built-in node types","status":"passed","title":"should validate all built-in node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should detect missing required parameters for DataLoaderNode","status":"failed","title":"should detect missing required parameters for DataLoaderNode","duration":1,"failureMessages":["expected 0 to be greater than or equal to 2"],"location":{"line":220,"column":34}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should detect missing required parameters for IndicatorNode","status":"passed","title":"should detect missing required parameters for IndicatorNode","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate timeframe parameter values","status":"failed","title":"should validate timeframe parameter values","duration":2,"failureMessages":["expected undefined not to be undefined"],"location":{"line":289,"column":30}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate indicator types","status":"failed","title":"should validate indicator types","duration":0,"failureMessages":["expected undefined not to be undefined"],"location":{"line":333,"column":30}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate period parameter as positive number","status":"failed","title":"should validate period parameter as positive number","duration":1,"failureMessages":["expected undefined not to be undefined"],"location":{"line":357,"column":29}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate initial_capital as positive number","status":"failed","title":"should validate initial_capital as positive number","duration":0,"failureMessages":["expected undefined not to be undefined"],"location":{"line":381,"column":30}},{"ancestorTitles":["","PipelineValidator Unit Tests","Dependency Validation"],"fullName":" PipelineValidator Unit Tests Dependency Validation should detect missing dependencies","status":"passed","title":"should detect missing dependencies","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Dependency Validation"],"fullName":" PipelineValidator Unit Tests Dependency Validation should allow valid dependencies","status":"passed","title":"should allow valid dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Dependency Validation"],"fullName":" PipelineValidator Unit Tests Dependency Validation should handle multiple dependencies","status":"passed","title":"should handle multiple dependencies","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Circular Dependency Detection"],"fullName":" PipelineValidator Unit Tests Circular Dependency Detection should detect simple circular dependency","status":"passed","title":"should detect simple circular dependency","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Circular Dependency Detection"],"fullName":" PipelineValidator Unit Tests Circular Dependency Detection should detect complex circular dependency","status":"passed","title":"should detect complex circular dependency","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Circular Dependency Detection"],"fullName":" PipelineValidator Unit Tests Circular Dependency Detection should not flag valid complex dependency graph","status":"passed","title":"should not flag valid complex dependency graph","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should handle empty parameters object","status":"failed","title":"should handle empty parameters object","duration":1,"failureMessages":["expected undefined not to be undefined"],"location":{"line":619,"column":28}},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should handle null/undefined parameter values","status":"passed","title":"should handle null/undefined parameter values","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should handle very large dependency chains","status":"passed","title":"should handle very large dependency chains","duration":2,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should validate self-dependency as circular","status":"passed","title":"should validate self-dependency as circular","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Integration with Real DSL Examples"],"fullName":" PipelineValidator Unit Tests Integration with Real DSL Examples should validate moving average crossover DSL from fixtures","status":"failed","title":"should validate moving average crossover DSL from fixtures","duration":1,"failureMessages":["expected [ { type: 'semantic', …(1) }, …(2) ] to have a length of +0 but got 3"],"location":{"line":771,"column":22}},{"ancestorTitles":["","PipelineValidator Unit Tests","Integration with Real DSL Examples"],"fullName":" PipelineValidator Unit Tests Integration with Real DSL Examples should provide detailed error information","status":"passed","title":"should provide detailed error information","duration":0,"failureMessages":[]}],"startTime":1756058584566,"endTime":1756058584591,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/src/tests/pipelineValidator.unit.test.ts"},{"assertionResults":[{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should validate DataLoaderNode parameters","status":"passed","title":"should validate DataLoaderNode parameters","duration":2,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should reject invalid DataLoaderNode parameters","status":"passed","title":"should reject invalid DataLoaderNode parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should validate IndicatorNode parameters","status":"passed","title":"should validate IndicatorNode parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should reject negative periods for IndicatorNode","status":"failed","title":"should reject negative periods for IndicatorNode","duration":5,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":58,"column":63}},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should validate BacktestNode parameters","status":"passed","title":"should validate BacktestNode parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should reject invalid BacktestNode parameters","status":"passed","title":"should reject invalid BacktestNode parameters","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline DSL Schema Validation"],"fullName":" Schema Validation Tests Pipeline DSL Schema Validation should validate correct pipeline structure","status":"passed","title":"should validate correct pipeline structure","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline DSL Schema Validation"],"fullName":" Schema Validation Tests Pipeline DSL Schema Validation should reject invalid node IDs","status":"passed","title":"should reject invalid node IDs","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline DSL Schema Validation"],"fullName":" Schema Validation Tests Pipeline DSL Schema Validation should reject empty pipeline","status":"passed","title":"should reject empty pipeline","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for DataLoaderNode","status":"passed","title":"should generate correct output schema for DataLoaderNode","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for IndicatorNode","status":"passed","title":"should generate correct output schema for IndicatorNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for CrossoverSignalNode","status":"passed","title":"should generate correct output schema for CrossoverSignalNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for BacktestNode","status":"passed","title":"should generate correct output schema for BacktestNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline Data Flow Validation"],"fullName":" Schema Validation Tests Pipeline Data Flow Validation should validate correct data flow","status":"failed","title":"should validate correct data flow","duration":1,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":194,"column":28}},{"ancestorTitles":["","Schema Validation Tests","Pipeline Data Flow Validation"],"fullName":" Schema Validation Tests Pipeline Data Flow Validation should detect incompatible data flow","status":"passed","title":"should detect incompatible data flow","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline Data Flow Validation"],"fullName":" Schema Validation Tests Pipeline Data Flow Validation should detect nodes with inappropriate dependencies","status":"failed","title":"should detect nodes with inappropriate dependencies","duration":2,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":235,"column":83}},{"ancestorTitles":["","Schema Validation Tests","Node I/O Compatibility"],"fullName":" Schema Validation Tests Node I/O Compatibility should validate compatible inputs","status":"passed","title":"should validate compatible inputs","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Compatibility"],"fullName":" Schema Validation Tests Node I/O Compatibility should detect incompatible inputs","status":"passed","title":"should detect incompatible inputs","duration":0,"failureMessages":[]}],"startTime":1756058588956,"endTime":1756058588971,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/src/tests/schemaValidation.test.ts"},{"assertionResults":[{"ancestorTitles":["","YAMLParser","valid DSL parsing"],"fullName":" YAMLParser valid DSL parsing should parse a simple valid pipeline","status":"passed","title":"should parse a simple valid pipeline","duration":6,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","valid DSL parsing"],"fullName":" YAMLParser valid DSL parsing should parse pipeline with dependencies","status":"passed","title":"should parse pipeline with dependencies","duration":2,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return syntax error for invalid YAML","status":"passed","title":"should return syntax error for invalid YAML","duration":1,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return error for missing pipeline array","status":"passed","title":"should return error for missing pipeline array","duration":0,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return error for missing node id","status":"passed","title":"should return error for missing node id","duration":1,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return error for invalid depends_on format","status":"passed","title":"should return error for invalid depends_on format","duration":0,"failureMessages":[]}],"startTime":1756058611476,"endTime":1756058611486,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/src/tests/yamlParser.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to resolve entry for package \"@edgeql/compiler\". The package may have incorrect main/module/exports specified in its package.json.","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/src/tests/executor.test.ts"},{"assertionResults":[{"ancestorTitles":["","NodejsSandboxRunner","canHandle"],"fullName":" NodejsSandboxRunner canHandle should handle Node.js node types","status":"passed","title":"should handle Node.js node types","duration":1,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","canHandle"],"fullName":" NodejsSandboxRunner canHandle should not handle non-Node.js node types","status":"passed","title":"should not handle non-Node.js node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should execute Node.js node successfully","status":"passed","title":"should execute Node.js node successfully","duration":15,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should handle Docker execution failure","status":"passed","title":"should handle Docker execution failure","duration":29,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should handle timeout with shorter duration than Python","status":"passed","title":"should handle timeout with shorter duration than Python","duration":30002,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should apply correct resource constraints","status":"passed","title":"should apply correct resource constraints","duration":18,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should pass inputs correctly to Node.js node","status":"passed","title":"should pass inputs correctly to Node.js node","duration":13,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should handle missing output file","status":"passed","title":"should handle missing output file","duration":22,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","execute"],"fullName":" NodejsSandboxRunner execute should handle Node.js runtime errors in output","status":"passed","title":"should handle Node.js runtime errors in output","duration":15,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","Security"],"fullName":" NodejsSandboxRunner Security should use secure Docker settings with Node.js optimizations","status":"passed","title":"should use secure Docker settings with Node.js optimizations","duration":18,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","Security"],"fullName":" NodejsSandboxRunner Security should mount datasets as read-only","status":"passed","title":"should mount datasets as read-only","duration":15,"failureMessages":[]},{"ancestorTitles":["","NodejsSandboxRunner","Performance"],"fullName":" NodejsSandboxRunner Performance should have faster timeout than Python sandbox","status":"passed","title":"should have faster timeout than Python sandbox","duration":30006,"failureMessages":[]}],"startTime":1756058588407,"endTime":1756058648561,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/src/tests/nodejsSandboxRunner.test.ts"},{"assertionResults":[{"ancestorTitles":["","PythonSandboxRunner","canHandle"],"fullName":" PythonSandboxRunner canHandle should handle Python node types","status":"passed","title":"should handle Python node types","duration":1,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","canHandle"],"fullName":" PythonSandboxRunner canHandle should not handle non-Python node types","status":"passed","title":"should not handle non-Python node types","duration":1,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should execute Python node successfully","status":"passed","title":"should execute Python node successfully","duration":16,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should handle Docker execution failure","status":"passed","title":"should handle Docker execution failure","duration":17,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should handle timeout","status":"passed","title":"should handle timeout","duration":60014,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should pass inputs correctly to Python node","status":"passed","title":"should pass inputs correctly to Python node","duration":23,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should apply resource constraints to Docker container","status":"passed","title":"should apply resource constraints to Docker container","duration":12,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should handle missing output file","status":"passed","title":"should handle missing output file","duration":13,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","execute"],"fullName":" PythonSandboxRunner execute should handle Python node errors in output","status":"passed","title":"should handle Python node errors in output","duration":17,"failureMessages":[]},{"ancestorTitles":["","PythonSandboxRunner","Security"],"fullName":" PythonSandboxRunner Security should use secure Docker settings","status":"passed","title":"should use secure Docker settings","duration":13,"failureMessages":[]}],"startTime":1756058588768,"endTime":1756058648895,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/src/tests/pythonSandboxRunner.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" default flattened errors type inference","status":"passed","title":"default flattened errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom flattened errors type inference","status":"passed","title":"custom flattened errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" form errors type inference","status":"passed","title":"form errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .flatten() type assertion","status":"passed","title":".flatten() type assertion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .formErrors type assertion","status":"passed","title":".formErrors type assertion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" all errors","status":"passed","title":"all errors","duration":1,"failureMessages":[]}],"startTime":1756058602549,"endTime":1756058602552,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/all-errors.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" check any inference","status":"passed","title":"check any inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check unknown inference","status":"passed","title":"check unknown inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check never inference","status":"passed","title":"check never inference","duration":3,"failureMessages":[]}],"startTime":1756058629612,"endTime":1756058629616,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/anyunknown.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse empty array in nonempty","status":"passed","title":"parse empty array in nonempty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get element","status":"passed","title":"get element","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue parsing despite array size error","status":"passed","title":"continue parsing despite array size error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array","status":"passed","title":"parse should fail given sparse array","duration":0,"failureMessages":[]}],"startTime":1756058617615,"endTime":1756058617623,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/array.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string async parse","status":"passed","title":"string async parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number async parse","status":"passed","title":"number async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigInt async parse","status":"passed","title":"bigInt async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean async parse","status":"passed","title":"boolean async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date async parse","status":"passed","title":"date async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined async parse","status":"passed","title":"undefined async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null async parse","status":"passed","title":"null async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" any async parse","status":"passed","title":"any async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown async parse","status":"passed","title":"unknown async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" void async parse","status":"passed","title":"void async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array async parse","status":"passed","title":"array async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object async parse","status":"passed","title":"object async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union async parse","status":"passed","title":"union async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" record async parse","status":"passed","title":"record async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function async parse","status":"passed","title":"function async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal async parse","status":"passed","title":"literal async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum async parse","status":"passed","title":"enum async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum async parse","status":"passed","title":"nativeEnum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse good","status":"passed","title":"promise async parse good","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse bad","status":"passed","title":"promise async parse bad","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation non-empty strings","status":"passed","title":"async validation non-empty strings","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 1","status":"passed","title":"async validation multiple errors 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 2","status":"passed","title":"async validation multiple errors 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ensure early async failure prevents follow-up refinement checks","status":"passed","title":"ensure early async failure prevents follow-up refinement checks","duration":0,"failureMessages":[]}],"startTime":1756058586136,"endTime":1756058586145,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/async-parsing.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse async test","status":"passed","title":"parse async test","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async test","status":"passed","title":"parseAsync async test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async test","status":"passed","title":"parseAsync async test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async with value","status":"passed","title":"parseAsync async with value","duration":0,"failureMessages":[]}],"startTime":1756058619755,"endTime":1756058619759,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/async-refinements.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type guard","status":"passed","title":"type guard","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test this binding","status":"passed","title":"test this binding","duration":1,"failureMessages":[]}],"startTime":1756058628718,"endTime":1756058628723,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/base.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]}],"startTime":1756058616872,"endTime":1756058616877,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/bigint.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":2,"failureMessages":[]}],"startTime":1756058619550,"endTime":1756058619552,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/branded.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic catch","status":"passed","title":"basic catch","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch fn does not run when parsing succeeds","status":"passed","title":"catch fn does not run when parsing succeeds","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic catch async","status":"passed","title":"basic catch async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch replace wrong types","status":"passed","title":"catch replace wrong types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch with transform","status":"passed","title":"catch with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch on existing optional","status":"passed","title":"catch on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on catch","status":"passed","title":"optional on catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeCatch","status":"passed","title":"removeCatch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained catch","status":"passed","title":"chained catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" factory","status":"passed","title":"factory","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" reported issues with nested usage","status":"passed","title":"reported issues with nested usage","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch error","status":"passed","title":"catch error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.input","status":"passed","title":"ctx.input","duration":0,"failureMessages":[]}],"startTime":1756058596862,"endTime":1756058596871,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/catch.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string coercion","status":"passed","title":"string coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number coercion","status":"passed","title":"number coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean coercion","status":"passed","title":"boolean coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint coercion","status":"passed","title":"bigint coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date coercion","status":"passed","title":"date coercion","duration":1,"failureMessages":[]}],"startTime":1756058596103,"endTime":1756058596110,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/coerce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse","status":"passed","title":"parse","duration":3,"failureMessages":[]}],"startTime":1756058618054,"endTime":1756058618057,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/complex.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string params","status":"passed","title":"string params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validations","status":"passed","title":"async validations","duration":0,"failureMessages":[]}],"startTime":1756058626626,"endTime":1756058626630,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/custom.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]}],"startTime":1756058625874,"endTime":1756058625876,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/date.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test","status":"passed","title":"test","duration":0,"failureMessages":[]}],"startTime":1756058599992,"endTime":1756058599992,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/deepmasking.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic defaults","status":"passed","title":"basic defaults","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with transform","status":"passed","title":"default with transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default on existing optional","status":"passed","title":"default on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on default","status":"passed","title":"optional on default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeDefault","status":"passed","title":"removeDefault","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained defaults","status":"passed","title":"chained defaults","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" factory","status":"passed","title":"factory","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":0,"failureMessages":[]}],"startTime":1756058608709,"endTime":1756058608714,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/default.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing `description` to schema should add a description","status":"passed","title":"passing `description` to schema should add a description","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" `.describe` should add a description","status":"passed","title":"`.describe` should add a description","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" description should carry over to chained schemas","status":"passed","title":"description should carry over to chained schemas","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" description should not carry over to chained array schema","status":"passed","title":"description should not carry over to chained array schema","duration":1,"failureMessages":[]}],"startTime":1756058621127,"endTime":1756058621130,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/description.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" valid","status":"passed","title":"valid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - discriminator value of various primitive types","status":"passed","title":"valid - discriminator value of various primitive types","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid - null","status":"passed","title":"invalid - null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value","status":"passed","title":"invalid discriminator value","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid discriminator value, invalid data","status":"passed","title":"valid discriminator value, invalid data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - missing discriminator","status":"passed","title":"wrong schema - missing discriminator","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - duplicate discriminator values","status":"passed","title":"wrong schema - duplicate discriminator values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - valid","status":"passed","title":"async - valid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - invalid","status":"passed","title":"async - invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - literals with .default or .preprocess","status":"passed","title":"valid - literals with .default or .preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum and nativeEnum","status":"passed","title":"enum and nativeEnum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded","status":"passed","title":"branded","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional and nullable","status":"passed","title":"optional and nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly array of options","status":"passed","title":"readonly array of options","duration":0,"failureMessages":[]}],"startTime":1756058589266,"endTime":1756058589275,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/discriminated-unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" create enum","status":"passed","title":"create enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" infer enum","status":"passed","title":"infer enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get options","status":"passed","title":"get options","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly enum","status":"passed","title":"readonly enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error params","status":"passed","title":"error params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract/exclude","status":"passed","title":"extract/exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map in extract/exclude","status":"passed","title":"error map in extract/exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly in ZodEnumDef","status":"passed","title":"readonly in ZodEnumDef","duration":0,"failureMessages":[]}],"startTime":1756058611746,"endTime":1756058611749,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/enum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" error creation","status":"passed","title":"error creation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type error with custom error map","status":"passed","title":"type error with custom error map","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement fail with params","status":"passed","title":"refinement fail with params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom error with custom errormap","status":"passed","title":"custom error with custom errormap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default error message","status":"passed","title":"default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refine","status":"passed","title":"override error in refine","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refinement","status":"passed","title":"override error in refinement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array minimum","status":"passed","title":"array minimum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path in custom error map","status":"passed","title":"custom path in custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error metadata from value","status":"passed","title":"error metadata from value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" root level formatting","status":"passed","title":"root level formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" no abort early on refinements","status":"passed","title":"no abort early on refinements","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting","status":"passed","title":"formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting with nullable and optional fields","status":"passed","title":"formatting with nullable and optional fields","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema-bound error map","status":"passed","title":"schema-bound error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overrideErrorMap","status":"passed","title":"overrideErrorMap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid and required","status":"passed","title":"invalid and required","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" Fallback to default required error","status":"passed","title":"Fallback to default required error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid and required and errorMap","status":"passed","title":"invalid and required and errorMap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict error message","status":"passed","title":"strict error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid enum elementstring","status":"passed","title":"enum error message, invalid enum elementstring","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid type","status":"passed","title":"enum error message, invalid type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum default error message","status":"passed","title":"nativeEnum default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal default error message","status":"passed","title":"literal default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with message returns the custom error message","status":"passed","title":"enum with message returns the custom error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" when the message is falsy, it is used as is provided","status":"passed","title":"when the message is falsy, it is used as is provided","duration":1,"failureMessages":[]}],"startTime":1756058585194,"endTime":1756058585205,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/error.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" first party switch","status":"passed","title":"first party switch","duration":1,"failureMessages":[]}],"startTime":1756058614564,"endTime":1756058614565,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/firstparty.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Identify missing [ZodFirstPartySchemaTypes]","status":"passed","title":"Identify missing [ZodFirstPartySchemaTypes]","duration":2,"failureMessages":[]}],"startTime":1756058628273,"endTime":1756058628275,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/firstpartyschematypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 1","status":"passed","title":"parsed function fail 1","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 2","status":"passed","title":"parsed function fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 1","status":"passed","title":"function inference 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" method parsing","status":"passed","title":"method parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async method parsing","status":"passed","title":"async method parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" args method","status":"passed","title":"args method","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 2","status":"passed","title":"function inference 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid function run","status":"passed","title":"valid function run","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input validation error","status":"passed","title":"input validation error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output validation error","status":"passed","title":"output validation error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" special function error codes","status":"passed","title":"special function error codes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function with async refinements","status":"passed","title":"function with async refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non async function with async refinements should fail","status":"passed","title":"non async function with async refinements should fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" allow extra parameters","status":"passed","title":"allow extra parameters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" params and returnType getters","status":"passed","title":"params and returnType getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inference with transforms","status":"passed","title":"inference with transforms","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" fallback to OuterTypeOfFunction","status":"passed","title":"fallback to OuterTypeOfFunction","duration":0,"failureMessages":[]}],"startTime":1756058596552,"endTime":1756058596560,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/function.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" generics","status":"passed","title":"generics","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested no undefined","status":"passed","title":"nested no undefined","duration":1,"failureMessages":[]}],"startTime":1756058620483,"endTime":1756058620486,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/generics.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof fatal","status":"passed","title":"instanceof fatal","duration":1,"failureMessages":[]}],"startTime":1756058623981,"endTime":1756058623985,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/instanceof.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object intersection","status":"passed","title":"object intersection","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection","status":"passed","title":"deep intersection","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection of arrays","status":"passed","title":"deep intersection of arrays","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid intersection types","status":"passed","title":"invalid intersection types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge","status":"passed","title":"invalid array merge","duration":0,"failureMessages":[]}],"startTime":1756058610114,"endTime":1756058610120,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/intersection.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" ","status":"passed","title":"","duration":1,"failureMessages":[]}],"startTime":1756058589925,"endTime":1756058589926,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/language-server.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should have `received` field with data","status":"passed","title":"invalid_literal should have `received` field with data","duration":1,"failureMessages":[]}],"startTime":1756058624616,"endTime":1756058624619,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/literal.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Set is given","status":"passed","title":"throws when a Set is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has invalid key and invalid input","status":"passed","title":"throws when the given map has invalid key and invalid input","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has multiple invalid entries","status":"passed","title":"throws when the given map has multiple invalid entries","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dirty","status":"passed","title":"dirty","duration":0,"failureMessages":[]}],"startTime":1756058608292,"endTime":1756058608296,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/map.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" masking test","status":"passed","title":"masking test","duration":1,"failureMessages":[]}],"startTime":1756058634553,"endTime":1756058634554,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/masking.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" mocker","status":"passed","title":"mocker","duration":1,"failureMessages":[]}],"startTime":1756058633081,"endTime":1756058633082,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/mocker.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]}],"startTime":1756058631843,"endTime":1756058631846,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/nan.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nativeEnum test with consts","status":"passed","title":"nativeEnum test with consts","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum test with real enum","status":"passed","title":"nativeEnum test with real enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum test with const with numeric keys","status":"passed","title":"nativeEnum test with const with numeric keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" from enum","status":"passed","title":"from enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" from const","status":"passed","title":"from const","duration":1,"failureMessages":[]}],"startTime":1756058615031,"endTime":1756058615035,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/nativeEnum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Should have error messages appropriate for the underlying type","status":"passed","title":"Should have error messages appropriate for the underlying type","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":1,"failureMessages":[]}],"startTime":1756058623251,"endTime":1756058623256,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/nullable.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse NaN","status":"passed","title":"parse NaN","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int getter","status":"passed","title":"int getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" finite getter","status":"passed","title":"finite getter","duration":0,"failureMessages":[]}],"startTime":1756058597270,"endTime":1756058597275,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object augmentation","status":"passed","title":"object augmentation","duration":3,"failureMessages":[]}],"startTime":1756058632239,"endTime":1756058632242,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/object-augmentation.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" doesn’t throw when Date is undefined","status":"passed","title":"doesn’t throw when Date is undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when Set is undefined","status":"passed","title":"doesn’t throw when Set is undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when Map is undefined","status":"passed","title":"doesn’t throw when Map is undefined","duration":0,"failureMessages":[]}],"startTime":1756058628929,"endTime":1756058628931,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/object-in-es5-env.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object type inference","status":"passed","title":"object type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown throw","status":"passed","title":"unknown throw","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shape() should return schema of particular key","status":"passed","title":"shape() should return schema of particular key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" correct parsing","status":"passed","title":"correct parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" incorrect #1","status":"passed","title":"incorrect #1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict by default","status":"passed","title":"nonstrict by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip by default","status":"passed","title":"strip by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys override","status":"passed","title":"unknownkeys override","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough unknown","status":"passed","title":"passthrough unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip unknown","status":"passed","title":"strip unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict","status":"passed","title":"strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall inference","status":"passed","title":"catchall inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test that optional keys are unset","status":"passed","title":"test that optional keys are unset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test catchall parsing","status":"passed","title":"test catchall parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test nonexistent keys","status":"passed","title":"test nonexistent keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test async union","status":"passed","title":"test async union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test inferred merged type","status":"passed","title":"test inferred merged type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred merged object type with optional properties","status":"passed","title":"inferred merged object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred unioned object type with optional properties","status":"passed","title":"inferred unioned object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred enum type","status":"passed","title":"inferred enum type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred partial object type with optional properties","status":"passed","title":"inferred partial object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred picked object type with optional properties","status":"passed","title":"inferred picked object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type for unknown/any keys","status":"passed","title":"inferred type for unknown/any keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" setKey","status":"passed","title":"setKey","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strictcreate","status":"passed","title":"strictcreate","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object with refine","status":"passed","title":"object with refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with date","status":"passed","title":"intersection of object with date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with refine with date","status":"passed","title":"intersection of object with refine with date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys merging","status":"passed","title":"unknownkeys merging","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should return schema with new key","status":"passed","title":"extend() should return schema with new key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should have power to override existing key","status":"passed","title":"extend() should have power to override existing key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough index signature","status":"passed","title":"passthrough index signature","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" xor","status":"passed","title":"xor","duration":0,"failureMessages":[]}],"startTime":1756058587595,"endTime":1756058587609,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Should have error messages appropriate for the underlying type","status":"passed","title":"Should have error messages appropriate for the underlying type","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":0,"failureMessages":[]}],"startTime":1756058621868,"endTime":1756058621873,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/optional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse strict object with unknown keys","status":"passed","title":"parse strict object with unknown keys","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nonstrict object with unknown keys","status":"passed","title":"parse nonstrict object with unknown keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid left side of intersection","status":"passed","title":"invalid left side of intersection","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid right side of intersection","status":"passed","title":"invalid right side of intersection","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsing non-array in tuple schema","status":"passed","title":"parsing non-array in tuple schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" incorrect num elements in tuple","status":"passed","title":"incorrect num elements in tuple","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid enum value","status":"passed","title":"invalid enum value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsing unknown","status":"passed","title":"parsing unknown","duration":0,"failureMessages":[]}],"startTime":1756058624392,"endTime":1756058624396,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/parser.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parseUtil isInvalid should use structural typing","status":"passed","title":"parseUtil isInvalid should use structural typing","duration":1,"failureMessages":[]}],"startTime":1756058627330,"endTime":1756058627331,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/parseUtil.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" shallow inference","status":"passed","title":"shallow inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shallow partial parse","status":"passed","title":"shallow partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial inference","status":"passed","title":"deep partial inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial parse","status":"passed","title":"deep partial parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial runtime tests","status":"passed","title":"deep partial runtime tests","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial optional/nullable","status":"passed","title":"deep partial optional/nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial tuple","status":"passed","title":"deep partial tuple","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial inference","status":"passed","title":"deep partial inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required","status":"passed","title":"required","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required inference","status":"passed","title":"required inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask","status":"passed","title":"required with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask -- ignore falsy values","status":"passed","title":"required with mask -- ignore falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask","status":"passed","title":"partial with mask","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask -- ignore falsy values","status":"passed","title":"partial with mask -- ignore falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deeppartial array","status":"passed","title":"deeppartial array","duration":1,"failureMessages":[]}],"startTime":1756058594603,"endTime":1756058594609,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/partials.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" pick type inference","status":"passed","title":"pick type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - success","status":"passed","title":"pick parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - fail","status":"passed","title":"pick parse - fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit type inference","status":"passed","title":"omit type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - success","status":"passed","title":"omit parse - success","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - fail","status":"passed","title":"omit parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict inference","status":"passed","title":"nonstrict inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - pass","status":"passed","title":"nonstrict parsing - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - fail","status":"passed","title":"nonstrict parsing - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick/omit/required/partial - do not allow unknown keys","status":"passed","title":"pick/omit/required/partial - do not allow unknown keys","duration":1,"failureMessages":[]}],"startTime":1756058608064,"endTime":1756058608070,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/pickomit.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string to number pipeline","status":"passed","title":"string to number pipeline","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string to number pipeline async","status":"passed","title":"string to number pipeline async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" break if dirty","status":"passed","title":"break if dirty","duration":1,"failureMessages":[]}],"startTime":1756058627976,"endTime":1756058627980,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/pipeline.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" preprocess","status":"passed","title":"preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess","status":"passed","title":"async preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parse","status":"passed","title":"preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue non-fatal by default","status":"passed","title":"preprocess ctx.addIssue non-fatal by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue fatal true","status":"passed","title":"preprocess ctx.addIssue fatal true","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess ctx.addIssue with parse","status":"passed","title":"async preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parseAsync","status":"passed","title":"preprocess ctx.addIssue with parseAsync","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in preprocess","status":"passed","title":"z.NEVER in preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess as the second property of object","status":"passed","title":"preprocess as the second property of object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess validates with sibling errors","status":"passed","title":"preprocess validates with sibling errors","duration":1,"failureMessages":[]}],"startTime":1756058603349,"endTime":1756058603357,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/preprocess.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" literal string correct","status":"passed","title":"literal string correct","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string incorrect","status":"passed","title":"literal string incorrect","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string number","status":"passed","title":"literal string number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string boolean","status":"passed","title":"literal string boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string boolean","status":"passed","title":"literal string boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string object","status":"passed","title":"literal string object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number correct","status":"passed","title":"literal number correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number incorrect","status":"passed","title":"literal number incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number number","status":"passed","title":"literal number number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number boolean","status":"passed","title":"literal number boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number object","status":"passed","title":"literal number object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean correct","status":"passed","title":"literal boolean correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean incorrect","status":"passed","title":"literal boolean incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean number","status":"passed","title":"literal boolean number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean boolean","status":"passed","title":"literal boolean boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean object","status":"passed","title":"literal boolean object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint correct","status":"passed","title":"literal bigint correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint incorrect","status":"passed","title":"literal bigint incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint number","status":"passed","title":"literal bigint number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint boolean","status":"passed","title":"literal bigint boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint object","status":"passed","title":"literal bigint object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal symbol","status":"passed","title":"literal symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema string","status":"passed","title":"parse stringSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema number","status":"passed","title":"parse stringSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema boolean","status":"passed","title":"parse stringSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema undefined","status":"passed","title":"parse stringSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema null","status":"passed","title":"parse stringSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema string","status":"passed","title":"parse numberSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema number","status":"passed","title":"parse numberSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema bigint","status":"passed","title":"parse numberSchema bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema boolean","status":"passed","title":"parse numberSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema undefined","status":"passed","title":"parse numberSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema null","status":"passed","title":"parse numberSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema string","status":"passed","title":"parse bigintSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema number","status":"passed","title":"parse bigintSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema bigint","status":"passed","title":"parse bigintSchema bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema boolean","status":"passed","title":"parse bigintSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema undefined","status":"passed","title":"parse bigintSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema null","status":"passed","title":"parse bigintSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema string","status":"passed","title":"parse booleanSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema number","status":"passed","title":"parse booleanSchema number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema boolean","status":"passed","title":"parse booleanSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema undefined","status":"passed","title":"parse booleanSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema null","status":"passed","title":"parse booleanSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema string","status":"passed","title":"parse dateSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema number","status":"passed","title":"parse dateSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema boolean","status":"passed","title":"parse dateSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema date","status":"passed","title":"parse dateSchema date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema undefined","status":"passed","title":"parse dateSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema null","status":"passed","title":"parse dateSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema invalid date","status":"passed","title":"parse dateSchema invalid date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema string","status":"passed","title":"parse symbolSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema number","status":"passed","title":"parse symbolSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema boolean","status":"passed","title":"parse symbolSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema date","status":"passed","title":"parse symbolSchema date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema symbol","status":"passed","title":"parse symbolSchema symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema undefined","status":"passed","title":"parse symbolSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema null","status":"passed","title":"parse symbolSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema string","status":"passed","title":"parse undefinedSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema number","status":"passed","title":"parse undefinedSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema boolean","status":"passed","title":"parse undefinedSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema undefined","status":"passed","title":"parse undefinedSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema null","status":"passed","title":"parse undefinedSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema string","status":"passed","title":"parse nullSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema number","status":"passed","title":"parse nullSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema boolean","status":"passed","title":"parse nullSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema undefined","status":"passed","title":"parse nullSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema null","status":"passed","title":"parse nullSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" primitive inference","status":"passed","title":"primitive inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get literal value","status":"passed","title":"get literal value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional convenience method","status":"passed","title":"optional convenience method","duration":0,"failureMessages":[]}],"startTime":1756058586790,"endTime":1756058586802,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/primitive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" promise inference","status":"passed","title":"promise inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success","status":"passed","title":"promise parsing success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success 2","status":"passed","title":"promise parsing success 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail 2","status":"passed","title":"promise parsing fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function pass","status":"passed","title":"async function pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function fail","status":"passed","title":"async function fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async promise parsing","status":"passed","title":"async promise parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" resolves","status":"passed","title":"resolves","duration":0,"failureMessages":[]}],"startTime":1756058613207,"endTime":1756058613212,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/promise.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" flat inference","status":"passed","title":"flat inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object freezing","status":"passed","title":"object freezing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async object freezing","status":"passed","title":"async object freezing","duration":1,"failureMessages":[]}],"startTime":1756058593031,"endTime":1756058593036,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/readonly.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" methods","status":"passed","title":"methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - pass","status":"passed","title":"string record parse - pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key schema","status":"passed","title":"key schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key and value getters","status":"passed","title":"key and value getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" is not vulnerable to prototype pollution","status":"passed","title":"is not vulnerable to prototype pollution","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont parse undefined values","status":"passed","title":"dont parse undefined values","duration":0,"failureMessages":[]}],"startTime":1756058606862,"endTime":1756058606868,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/record.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.late.object","status":"passed","title":"recursion with z.late.object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema getter","status":"passed","title":"schema getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]}],"startTime":1756058605236,"endTime":1756058605239,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/recursive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" refinement","status":"passed","title":"refinement","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement 2","status":"passed","title":"refinement 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement type guard","status":"passed","title":"refinement type guard","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement Promise","status":"passed","title":"refinement Promise","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" use path in refinement context","status":"passed","title":"use path in refinement context","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine","status":"passed","title":"superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine async","status":"passed","title":"superRefine async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine - type narrowing","status":"passed","title":"superRefine - type narrowing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained mixed refining types","status":"passed","title":"chained mixed refining types","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get inner type","status":"passed","title":"get inner type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained refinements","status":"passed","title":"chained refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" fatal superRefine","status":"passed","title":"fatal superRefine","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine after skipped transform","status":"passed","title":"superRefine after skipped transform","duration":0,"failureMessages":[]}],"startTime":1756058590379,"endTime":1756058590391,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" safeparse fail","status":"passed","title":"safeparse fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" safeparse pass","status":"passed","title":"safeparse pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" safeparse unexpected error","status":"passed","title":"safeparse unexpected error","duration":1,"failureMessages":[]}],"startTime":1756058631110,"endTime":1756058631113,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/safeparse.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse: size-related methods","status":"passed","title":"valid parse: size-related methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when parsing empty set in nonempty ","status":"passed","title":"failing when parsing empty set in nonempty ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is smaller than min() ","status":"passed","title":"failing when set is smaller than min() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is bigger than max() ","status":"passed","title":"failing when set is bigger than max() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when an empty set is given","status":"passed","title":"doesn’t throw when an empty set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Map is given","status":"passed","title":"throws when a Map is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has invalid input","status":"passed","title":"throws when the given set has invalid input","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has multiple invalid entries","status":"passed","title":"throws when the given set has multiple invalid entries","duration":0,"failureMessages":[]}],"startTime":1756058601386,"endTime":1756058601391,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/set.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid parse","status":"passed","title":"invalid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid parse async","status":"passed","title":"invalid parse async","duration":0,"failureMessages":[]}],"startTime":1756058612428,"endTime":1756058612433,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/standard-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" email validations","status":"passed","title":"email validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept SGVsbG8gV29ybGQ=","status":"passed","title":"base64 should accept SGVsbG8gV29ybGQ=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","status":"passed","title":"base64 should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","status":"passed","title":"base64 should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64 should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64 should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept MTIzNDU2Nzg5MA==","status":"passed","title":"base64 should accept MTIzNDU2Nzg5MA==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","status":"passed","title":"base64 should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","status":"passed","title":"base64 should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept ISIkJSMmJyonKCk=","status":"passed","title":"base64 should accept ISIkJSMmJyonKCk=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept ","status":"passed","title":"base64 should accept ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept w7/Dv8O+w74K","status":"passed","title":"base64 should accept w7/Dv8O+w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject 12345","status":"passed","title":"base64 should reject 12345","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject 12345===","status":"passed","title":"base64 should reject 12345===","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject SGVsbG8gV29ybGQ","status":"passed","title":"base64 should reject SGVsbG8gV29ybGQ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","status":"passed","title":"base64 should reject VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64 should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64 should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject .MTIzND2Nzg5MC4=","status":"passed","title":"base64 should reject .MTIzND2Nzg5MC4=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","status":"passed","title":"base64 should reject QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject w7_Dv8O-w74K","status":"passed","title":"base64 should reject w7_Dv8O-w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept SGVsbG8gV29ybGQ","status":"passed","title":"base64url should accept SGVsbG8gV29ybGQ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept SGVsbG8gV29ybGQ=","status":"passed","title":"base64url should accept SGVsbG8gV29ybGQ=","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","status":"passed","title":"base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","status":"passed","title":"base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms","status":"passed","title":"base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","status":"passed","title":"base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64url should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg","status":"passed","title":"base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept MTIzNDU2Nzg5MA","status":"passed","title":"base64url should accept MTIzNDU2Nzg5MA","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept MTIzNDU2Nzg5MA==","status":"passed","title":"base64url should accept MTIzNDU2Nzg5MA==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo","status":"passed","title":"base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","status":"passed","title":"base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","status":"passed","title":"base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","status":"passed","title":"base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ISIkJSMmJyonKCk","status":"passed","title":"base64url should accept ISIkJSMmJyonKCk","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ISIkJSMmJyonKCk=","status":"passed","title":"base64url should accept ISIkJSMmJyonKCk=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ","status":"passed","title":"base64url should accept ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept w7_Dv8O-w74K","status":"passed","title":"base64url should accept w7_Dv8O-w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept 123456","status":"passed","title":"base64url should accept 123456","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject w7/Dv8O+w74K","status":"passed","title":"base64url should reject w7/Dv8O+w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject 12345","status":"passed","title":"base64url should reject 12345","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject 12345===","status":"passed","title":"base64url should reject 12345===","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64url should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64url should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject .MTIzND2Nzg5MC4=","status":"passed","title":"base64url should reject .MTIzND2Nzg5MC4=","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" jwt validations","status":"passed","title":"jwt validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url validations","status":"passed","title":"url validations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url error overrides","status":"passed","title":"url error overrides","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" emoji validations","status":"passed","title":"emoji validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" uuid","status":"passed","title":"uuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad uuid","status":"passed","title":"bad uuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nanoid","status":"passed","title":"nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad nanoid","status":"passed","title":"bad nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid","status":"passed","title":"cuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid2","status":"passed","title":"cuid2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ulid","status":"passed","title":"ulid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex","status":"passed","title":"regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error message","status":"passed","title":"regexp error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex lastIndex reset","status":"passed","title":"regex lastIndex reset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" checks getters","status":"passed","title":"checks getters","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" trim","status":"passed","title":"trim","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lowerCase","status":"passed","title":"lowerCase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" datetime","status":"passed","title":"datetime","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" datetime parsing","status":"passed","title":"datetime parsing","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date","status":"passed","title":"date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date parsing","status":"passed","title":"date parsing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" time","status":"passed","title":"time","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" time parsing","status":"passed","title":"time parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" duration","status":"passed","title":"duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IP validation","status":"passed","title":"IP validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR validation","status":"passed","title":"CIDR validation","duration":2,"failureMessages":[]}],"startTime":1756058582894,"endTime":1756058582929,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parse","status":"passed","title":"transform ctx.addIssue with parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parseAsync","status":"passed","title":"transform ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in transform","status":"passed","title":"z.NEVER in transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic transformations","status":"passed","title":"basic transformations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" coercion","status":"passed","title":"coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async coercion","status":"passed","title":"async coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync coercion async error","status":"passed","title":"sync coercion async error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default","status":"passed","title":"default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dynamic default","status":"passed","title":"dynamic default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default when property is null or undefined","status":"passed","title":"default when property is null or undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with falsy values","status":"passed","title":"default with falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object typing","status":"passed","title":"object typing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform method overloads","status":"passed","title":"transform method overloads","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple transformers","status":"passed","title":"multiple transformers","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" short circuit on dirty","status":"passed","title":"short circuit on dirty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async short circuit on dirty","status":"passed","title":"async short circuit on dirty","duration":0,"failureMessages":[]}],"startTime":1756058598887,"endTime":1756058598894,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/transformer.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" tuple inference","status":"passed","title":"tuple inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" successful validation","status":"passed","title":"successful validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" successful async validation","status":"passed","title":"successful async validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failed validation","status":"passed","title":"failed validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failed async validation","status":"passed","title":"failed async validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with transformers","status":"passed","title":"tuple with transformers","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with rest schema","status":"passed","title":"tuple with rest schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array as tuple","status":"passed","title":"parse should fail given sparse array as tuple","duration":0,"failureMessages":[]}],"startTime":1756058612134,"endTime":1756058612140,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/tuple.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union 2","status":"passed","title":"union 2","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return valid over invalid","status":"passed","title":"return valid over invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return dirty result over aborted","status":"passed","title":"return dirty result over aborted","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" options getter","status":"passed","title":"options getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly union","status":"passed","title":"readonly union","duration":0,"failureMessages":[]}],"startTime":1756058620222,"endTime":1756058620230,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" array min","status":"passed","title":"array min","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array max","status":"passed","title":"array max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array length","status":"passed","title":"array length","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string length","status":"passed","title":"string length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string min","status":"passed","title":"string min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string max","status":"passed","title":"string max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number min","status":"passed","title":"number min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number max","status":"passed","title":"number max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonnegative","status":"passed","title":"number nonnegative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonpositive","status":"passed","title":"number nonpositive","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number negative","status":"passed","title":"number negative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number positive","status":"passed","title":"number positive","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instantiation","status":"passed","title":"instantiation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int","status":"passed","title":"int","duration":0,"failureMessages":[]}],"startTime":1756058605860,"endTime":1756058605866,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/validations.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" void","status":"passed","title":"void","duration":1,"failureMessages":[]}],"startTime":1756058633333,"endTime":1756058633334,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v3/tests/void.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" default flattened errors type inference","status":"passed","title":"default flattened errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom flattened errors type inference","status":"passed","title":"custom flattened errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" form errors type inference","status":"passed","title":"form errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .flatten() type assertion","status":"passed","title":".flatten() type assertion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .formErrors type assertion","status":"passed","title":".formErrors type assertion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" all errors","status":"passed","title":"all errors","duration":1,"failureMessages":[]}],"startTime":1756058602565,"endTime":1756058602568,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/all-errors.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" check any inference","status":"passed","title":"check any inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check unknown inference","status":"passed","title":"check unknown inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check never inference","status":"passed","title":"check never inference","duration":2,"failureMessages":[]}],"startTime":1756058629846,"endTime":1756058629849,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/anyunknown.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse empty array in nonempty","status":"passed","title":"parse empty array in nonempty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get element","status":"passed","title":"get element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue parsing despite array size error","status":"passed","title":"continue parsing despite array size error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array","status":"passed","title":"parse should fail given sparse array","duration":0,"failureMessages":[]}],"startTime":1756058617833,"endTime":1756058617838,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/array.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string async parse","status":"passed","title":"string async parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number async parse","status":"passed","title":"number async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigInt async parse","status":"passed","title":"bigInt async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean async parse","status":"passed","title":"boolean async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date async parse","status":"passed","title":"date async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined async parse","status":"passed","title":"undefined async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null async parse","status":"passed","title":"null async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" any async parse","status":"passed","title":"any async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown async parse","status":"passed","title":"unknown async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" void async parse","status":"passed","title":"void async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array async parse","status":"passed","title":"array async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object async parse","status":"passed","title":"object async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union async parse","status":"passed","title":"union async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" record async parse","status":"passed","title":"record async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function async parse","status":"passed","title":"function async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal async parse","status":"passed","title":"literal async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum async parse","status":"passed","title":"enum async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum async parse","status":"passed","title":"nativeEnum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse good","status":"passed","title":"promise async parse good","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse bad","status":"passed","title":"promise async parse bad","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation non-empty strings","status":"passed","title":"async validation non-empty strings","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 1","status":"passed","title":"async validation multiple errors 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 2","status":"passed","title":"async validation multiple errors 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ensure early async failure prevents follow-up refinement checks","status":"passed","title":"ensure early async failure prevents follow-up refinement checks","duration":0,"failureMessages":[]}],"startTime":1756058586226,"endTime":1756058586237,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/async-parsing.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse async test","status":"passed","title":"parse async test","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async test","status":"passed","title":"parseAsync async test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async test","status":"passed","title":"parseAsync async test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async with value","status":"passed","title":"parseAsync async with value","duration":0,"failureMessages":[]}],"startTime":1756058619960,"endTime":1756058619965,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/async-refinements.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type guard","status":"passed","title":"type guard","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test this binding","status":"passed","title":"test this binding","duration":1,"failureMessages":[]}],"startTime":1756058628731,"endTime":1756058628733,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/base.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]}],"startTime":1756058617133,"endTime":1756058617137,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/bigint.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":2,"failureMessages":[]}],"startTime":1756058619549,"endTime":1756058619551,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/branded.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic catch","status":"passed","title":"basic catch","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch fn does not run when parsing succeeds","status":"passed","title":"catch fn does not run when parsing succeeds","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic catch async","status":"passed","title":"basic catch async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch replace wrong types","status":"passed","title":"catch replace wrong types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch with transform","status":"passed","title":"catch with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch on existing optional","status":"passed","title":"catch on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on catch","status":"passed","title":"optional on catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeCatch","status":"passed","title":"removeCatch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained catch","status":"passed","title":"chained catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" factory","status":"passed","title":"factory","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" reported issues with nested usage","status":"passed","title":"reported issues with nested usage","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch error","status":"passed","title":"catch error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.input","status":"passed","title":"ctx.input","duration":0,"failureMessages":[]}],"startTime":1756058597052,"endTime":1756058597060,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/catch.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string coercion","status":"passed","title":"string coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number coercion","status":"passed","title":"number coercion","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean coercion","status":"passed","title":"boolean coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint coercion","status":"passed","title":"bigint coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date coercion","status":"passed","title":"date coercion","duration":1,"failureMessages":[]}],"startTime":1756058596290,"endTime":1756058596299,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/coerce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse","status":"passed","title":"parse","duration":3,"failureMessages":[]}],"startTime":1756058618058,"endTime":1756058618061,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/complex.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string params","status":"passed","title":"string params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validations","status":"passed","title":"async validations","duration":1,"failureMessages":[]}],"startTime":1756058626679,"endTime":1756058626683,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/custom.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]}],"startTime":1756058625882,"endTime":1756058625885,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/date.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test","status":"passed","title":"test","duration":1,"failureMessages":[]}],"startTime":1756058600102,"endTime":1756058600103,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/deepmasking.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic defaults","status":"passed","title":"basic defaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with transform","status":"passed","title":"default with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default on existing optional","status":"passed","title":"default on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on default","status":"passed","title":"optional on default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeDefault","status":"passed","title":"removeDefault","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained defaults","status":"passed","title":"chained defaults","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" factory","status":"passed","title":"factory","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":1,"failureMessages":[]}],"startTime":1756058608713,"endTime":1756058608718,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/default.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing `description` to schema should add a description","status":"passed","title":"passing `description` to schema should add a description","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" `.describe` should add a description","status":"passed","title":"`.describe` should add a description","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" description should carry over to chained schemas","status":"passed","title":"description should carry over to chained schemas","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" description should not carry over to chained array schema","status":"passed","title":"description should not carry over to chained array schema","duration":1,"failureMessages":[]}],"startTime":1756058621339,"endTime":1756058621342,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/description.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" valid","status":"passed","title":"valid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - discriminator value of various primitive types","status":"passed","title":"valid - discriminator value of various primitive types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid - null","status":"passed","title":"invalid - null","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value","status":"passed","title":"invalid discriminator value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid discriminator value, invalid data","status":"passed","title":"valid discriminator value, invalid data","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - missing discriminator","status":"passed","title":"wrong schema - missing discriminator","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - duplicate discriminator values","status":"passed","title":"wrong schema - duplicate discriminator values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - valid","status":"passed","title":"async - valid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - invalid","status":"passed","title":"async - invalid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - literals with .default or .preprocess","status":"passed","title":"valid - literals with .default or .preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum and nativeEnum","status":"passed","title":"enum and nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded","status":"passed","title":"branded","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional and nullable","status":"passed","title":"optional and nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly array of options","status":"passed","title":"readonly array of options","duration":0,"failureMessages":[]}],"startTime":1756058589443,"endTime":1756058589451,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/discriminated-unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" create enum","status":"passed","title":"create enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" infer enum","status":"passed","title":"infer enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get options","status":"passed","title":"get options","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly enum","status":"passed","title":"readonly enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error params","status":"passed","title":"error params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract/exclude","status":"passed","title":"extract/exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map in extract/exclude","status":"passed","title":"error map in extract/exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly in ZodEnumDef","status":"passed","title":"readonly in ZodEnumDef","duration":0,"failureMessages":[]}],"startTime":1756058611923,"endTime":1756058611926,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/enum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" error creation","status":"passed","title":"error creation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type error with custom error map","status":"passed","title":"type error with custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement fail with params","status":"passed","title":"refinement fail with params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom error with custom errormap","status":"passed","title":"custom error with custom errormap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default error message","status":"passed","title":"default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refine","status":"passed","title":"override error in refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refinement","status":"passed","title":"override error in refinement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array minimum","status":"passed","title":"array minimum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path in custom error map","status":"passed","title":"custom path in custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error metadata from value","status":"passed","title":"error metadata from value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" root level formatting","status":"passed","title":"root level formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" no abort early on refinements","status":"passed","title":"no abort early on refinements","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting","status":"passed","title":"formatting","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting with nullable and optional fields","status":"passed","title":"formatting with nullable and optional fields","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema-bound error map","status":"passed","title":"schema-bound error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overrideErrorMap","status":"passed","title":"overrideErrorMap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid and required","status":"passed","title":"invalid and required","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" Fallback to default required error","status":"passed","title":"Fallback to default required error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid and required and errorMap","status":"passed","title":"invalid and required and errorMap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict error message","status":"passed","title":"strict error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid enum elementstring","status":"passed","title":"enum error message, invalid enum elementstring","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid type","status":"passed","title":"enum error message, invalid type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum default error message","status":"passed","title":"nativeEnum default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal default error message","status":"passed","title":"literal default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with message returns the custom error message","status":"passed","title":"enum with message returns the custom error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" when the message is falsy, it is used as is provided","status":"passed","title":"when the message is falsy, it is used as is provided","duration":1,"failureMessages":[]}],"startTime":1756058585195,"endTime":1756058585207,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/error.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" first party switch","status":"passed","title":"first party switch","duration":1,"failureMessages":[]}],"startTime":1756058614807,"endTime":1756058614808,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/firstparty.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Identify missing [ZodFirstPartySchemaTypes]","status":"passed","title":"Identify missing [ZodFirstPartySchemaTypes]","duration":1,"failureMessages":[]}],"startTime":1756058628501,"endTime":1756058628502,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/firstpartyschematypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 1","status":"passed","title":"parsed function fail 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 2","status":"passed","title":"parsed function fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 1","status":"passed","title":"function inference 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" method parsing","status":"passed","title":"method parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async method parsing","status":"passed","title":"async method parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" args method","status":"passed","title":"args method","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 2","status":"passed","title":"function inference 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid function run","status":"passed","title":"valid function run","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input validation error","status":"passed","title":"input validation error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output validation error","status":"passed","title":"output validation error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" special function error codes","status":"passed","title":"special function error codes","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function with async refinements","status":"passed","title":"function with async refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non async function with async refinements should fail","status":"passed","title":"non async function with async refinements should fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" allow extra parameters","status":"passed","title":"allow extra parameters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" params and returnType getters","status":"passed","title":"params and returnType getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inference with transforms","status":"passed","title":"inference with transforms","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" fallback to OuterTypeOfFunction","status":"passed","title":"fallback to OuterTypeOfFunction","duration":0,"failureMessages":[]}],"startTime":1756058596591,"endTime":1756058596600,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/function.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" generics","status":"passed","title":"generics","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested no undefined","status":"passed","title":"nested no undefined","duration":1,"failureMessages":[]}],"startTime":1756058620705,"endTime":1756058620708,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/generics.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof fatal","status":"passed","title":"instanceof fatal","duration":0,"failureMessages":[]}],"startTime":1756058624190,"endTime":1756058624193,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/instanceof.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object intersection","status":"passed","title":"object intersection","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection","status":"passed","title":"deep intersection","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection of arrays","status":"passed","title":"deep intersection of arrays","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid intersection types","status":"passed","title":"invalid intersection types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge","status":"passed","title":"invalid array merge","duration":1,"failureMessages":[]}],"startTime":1756058610198,"endTime":1756058610205,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/intersection.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" ","status":"passed","title":"","duration":1,"failureMessages":[]}],"startTime":1756058590134,"endTime":1756058590135,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/language-server.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should have `received` field with data","status":"passed","title":"invalid_literal should have `received` field with data","duration":0,"failureMessages":[]}],"startTime":1756058624877,"endTime":1756058624879,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/literal.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Set is given","status":"passed","title":"throws when a Set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has invalid key and invalid input","status":"passed","title":"throws when the given map has invalid key and invalid input","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has multiple invalid entries","status":"passed","title":"throws when the given map has multiple invalid entries","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dirty","status":"passed","title":"dirty","duration":1,"failureMessages":[]}],"startTime":1756058608491,"endTime":1756058608495,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/map.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" masking test","status":"passed","title":"masking test","duration":1,"failureMessages":[]}],"startTime":1756058648773,"endTime":1756058648774,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/masking.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" mocker","status":"passed","title":"mocker","duration":2,"failureMessages":[]}],"startTime":1756058633091,"endTime":1756058633093,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/mocker.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]}],"startTime":1756058632043,"endTime":1756058632047,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/nan.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nativeEnum test with consts","status":"passed","title":"nativeEnum test with consts","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum test with real enum","status":"passed","title":"nativeEnum test with real enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum test with const with numeric keys","status":"passed","title":"nativeEnum test with const with numeric keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" from enum","status":"passed","title":"from enum","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" from const","status":"passed","title":"from const","duration":0,"failureMessages":[]}],"startTime":1756058615054,"endTime":1756058615057,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/nativeEnum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Should have error messages appropriate for the underlying type","status":"passed","title":"Should have error messages appropriate for the underlying type","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":0,"failureMessages":[]}],"startTime":1756058623509,"endTime":1756058623514,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/nullable.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse NaN","status":"passed","title":"parse NaN","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int getter","status":"passed","title":"int getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" finite getter","status":"passed","title":"finite getter","duration":0,"failureMessages":[]}],"startTime":1756058597336,"endTime":1756058597341,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object augmentation","status":"passed","title":"object augmentation","duration":2,"failureMessages":[]}],"startTime":1756058632263,"endTime":1756058632265,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/object-augmentation.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" doesn’t throw when Date is undefined","status":"passed","title":"doesn’t throw when Date is undefined","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when Set is undefined","status":"passed","title":"doesn’t throw when Set is undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when Map is undefined","status":"passed","title":"doesn’t throw when Map is undefined","duration":0,"failureMessages":[]}],"startTime":1756058629129,"endTime":1756058629131,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/object-in-es5-env.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object type inference","status":"passed","title":"object type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown throw","status":"passed","title":"unknown throw","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shape() should return schema of particular key","status":"passed","title":"shape() should return schema of particular key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" correct parsing","status":"passed","title":"correct parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" incorrect #1","status":"passed","title":"incorrect #1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict by default","status":"passed","title":"nonstrict by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip by default","status":"passed","title":"strip by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys override","status":"passed","title":"unknownkeys override","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough unknown","status":"passed","title":"passthrough unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip unknown","status":"passed","title":"strip unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict","status":"passed","title":"strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall inference","status":"passed","title":"catchall inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test that optional keys are unset","status":"passed","title":"test that optional keys are unset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test catchall parsing","status":"passed","title":"test catchall parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test nonexistent keys","status":"passed","title":"test nonexistent keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test async union","status":"passed","title":"test async union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test inferred merged type","status":"passed","title":"test inferred merged type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred merged object type with optional properties","status":"passed","title":"inferred merged object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred unioned object type with optional properties","status":"passed","title":"inferred unioned object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred enum type","status":"passed","title":"inferred enum type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred partial object type with optional properties","status":"passed","title":"inferred partial object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred picked object type with optional properties","status":"passed","title":"inferred picked object type with optional properties","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type for unknown/any keys","status":"passed","title":"inferred type for unknown/any keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" setKey","status":"passed","title":"setKey","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strictcreate","status":"passed","title":"strictcreate","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object with refine","status":"passed","title":"object with refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with date","status":"passed","title":"intersection of object with date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with refine with date","status":"passed","title":"intersection of object with refine with date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys merging","status":"passed","title":"unknownkeys merging","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should return schema with new key","status":"passed","title":"extend() should return schema with new key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should have power to override existing key","status":"passed","title":"extend() should have power to override existing key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough index signature","status":"passed","title":"passthrough index signature","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" xor","status":"passed","title":"xor","duration":0,"failureMessages":[]}],"startTime":1756058587677,"endTime":1756058587688,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Should have error messages appropriate for the underlying type","status":"passed","title":"Should have error messages appropriate for the underlying type","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":1,"failureMessages":[]}],"startTime":1756058622092,"endTime":1756058622098,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/optional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse strict object with unknown keys","status":"passed","title":"parse strict object with unknown keys","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nonstrict object with unknown keys","status":"passed","title":"parse nonstrict object with unknown keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid left side of intersection","status":"passed","title":"invalid left side of intersection","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid right side of intersection","status":"passed","title":"invalid right side of intersection","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsing non-array in tuple schema","status":"passed","title":"parsing non-array in tuple schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" incorrect num elements in tuple","status":"passed","title":"incorrect num elements in tuple","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid enum value","status":"passed","title":"invalid enum value","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsing unknown","status":"passed","title":"parsing unknown","duration":0,"failureMessages":[]}],"startTime":1756058624391,"endTime":1756058624395,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/parser.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parseUtil isInvalid should use structural typing","status":"passed","title":"parseUtil isInvalid should use structural typing","duration":1,"failureMessages":[]}],"startTime":1756058627389,"endTime":1756058627390,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/parseUtil.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" shallow inference","status":"passed","title":"shallow inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shallow partial parse","status":"passed","title":"shallow partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial inference","status":"passed","title":"deep partial inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial parse","status":"passed","title":"deep partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial runtime tests","status":"passed","title":"deep partial runtime tests","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial optional/nullable","status":"passed","title":"deep partial optional/nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial tuple","status":"passed","title":"deep partial tuple","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial inference","status":"passed","title":"deep partial inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required","status":"passed","title":"required","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required inference","status":"passed","title":"required inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask","status":"passed","title":"required with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask -- ignore falsy values","status":"passed","title":"required with mask -- ignore falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask","status":"passed","title":"partial with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask -- ignore falsy values","status":"passed","title":"partial with mask -- ignore falsy values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deeppartial array","status":"passed","title":"deeppartial array","duration":0,"failureMessages":[]}],"startTime":1756058594804,"endTime":1756058594810,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/partials.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" pick type inference","status":"passed","title":"pick type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - success","status":"passed","title":"pick parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - fail","status":"passed","title":"pick parse - fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit type inference","status":"passed","title":"omit type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - success","status":"passed","title":"omit parse - success","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - fail","status":"passed","title":"omit parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict inference","status":"passed","title":"nonstrict inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - pass","status":"passed","title":"nonstrict parsing - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - fail","status":"passed","title":"nonstrict parsing - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick/omit/required/partial - do not allow unknown keys","status":"passed","title":"pick/omit/required/partial - do not allow unknown keys","duration":1,"failureMessages":[]}],"startTime":1756058608081,"endTime":1756058608087,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/pickomit.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string to number pipeline","status":"passed","title":"string to number pipeline","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string to number pipeline async","status":"passed","title":"string to number pipeline async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" break if dirty","status":"passed","title":"break if dirty","duration":1,"failureMessages":[]}],"startTime":1756058628012,"endTime":1756058628016,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/pipeline.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" preprocess","status":"passed","title":"preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess","status":"passed","title":"async preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parse","status":"passed","title":"preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue non-fatal by default","status":"passed","title":"preprocess ctx.addIssue non-fatal by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue fatal true","status":"passed","title":"preprocess ctx.addIssue fatal true","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess ctx.addIssue with parse","status":"passed","title":"async preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parseAsync","status":"passed","title":"preprocess ctx.addIssue with parseAsync","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in preprocess","status":"passed","title":"z.NEVER in preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess as the second property of object","status":"passed","title":"preprocess as the second property of object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess validates with sibling errors","status":"passed","title":"preprocess validates with sibling errors","duration":1,"failureMessages":[]}],"startTime":1756058603386,"endTime":1756058603394,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/preprocess.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" literal string correct","status":"passed","title":"literal string correct","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string incorrect","status":"passed","title":"literal string incorrect","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string number","status":"passed","title":"literal string number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string boolean","status":"passed","title":"literal string boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string boolean","status":"passed","title":"literal string boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string object","status":"passed","title":"literal string object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number correct","status":"passed","title":"literal number correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number incorrect","status":"passed","title":"literal number incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number number","status":"passed","title":"literal number number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number boolean","status":"passed","title":"literal number boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number object","status":"passed","title":"literal number object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean correct","status":"passed","title":"literal boolean correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean incorrect","status":"passed","title":"literal boolean incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean number","status":"passed","title":"literal boolean number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean boolean","status":"passed","title":"literal boolean boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean object","status":"passed","title":"literal boolean object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint correct","status":"passed","title":"literal bigint correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint incorrect","status":"passed","title":"literal bigint incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint number","status":"passed","title":"literal bigint number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint boolean","status":"passed","title":"literal bigint boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint object","status":"passed","title":"literal bigint object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal symbol","status":"passed","title":"literal symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema string","status":"passed","title":"parse stringSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema number","status":"passed","title":"parse stringSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema boolean","status":"passed","title":"parse stringSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema undefined","status":"passed","title":"parse stringSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema null","status":"passed","title":"parse stringSchema null","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema string","status":"passed","title":"parse numberSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema number","status":"passed","title":"parse numberSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema bigint","status":"passed","title":"parse numberSchema bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema boolean","status":"passed","title":"parse numberSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema undefined","status":"passed","title":"parse numberSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema null","status":"passed","title":"parse numberSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema string","status":"passed","title":"parse bigintSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema number","status":"passed","title":"parse bigintSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema bigint","status":"passed","title":"parse bigintSchema bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema boolean","status":"passed","title":"parse bigintSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema undefined","status":"passed","title":"parse bigintSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema null","status":"passed","title":"parse bigintSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema string","status":"passed","title":"parse booleanSchema string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema number","status":"passed","title":"parse booleanSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema boolean","status":"passed","title":"parse booleanSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema undefined","status":"passed","title":"parse booleanSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema null","status":"passed","title":"parse booleanSchema null","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema string","status":"passed","title":"parse dateSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema number","status":"passed","title":"parse dateSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema boolean","status":"passed","title":"parse dateSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema date","status":"passed","title":"parse dateSchema date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema undefined","status":"passed","title":"parse dateSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema null","status":"passed","title":"parse dateSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema invalid date","status":"passed","title":"parse dateSchema invalid date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema string","status":"passed","title":"parse symbolSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema number","status":"passed","title":"parse symbolSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema boolean","status":"passed","title":"parse symbolSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema date","status":"passed","title":"parse symbolSchema date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema symbol","status":"passed","title":"parse symbolSchema symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema undefined","status":"passed","title":"parse symbolSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema null","status":"passed","title":"parse symbolSchema null","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema string","status":"passed","title":"parse undefinedSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema number","status":"passed","title":"parse undefinedSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema boolean","status":"passed","title":"parse undefinedSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema undefined","status":"passed","title":"parse undefinedSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema null","status":"passed","title":"parse undefinedSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema string","status":"passed","title":"parse nullSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema number","status":"passed","title":"parse nullSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema boolean","status":"passed","title":"parse nullSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema undefined","status":"passed","title":"parse nullSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema null","status":"passed","title":"parse nullSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" primitive inference","status":"passed","title":"primitive inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get literal value","status":"passed","title":"get literal value","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional convenience method","status":"passed","title":"optional convenience method","duration":0,"failureMessages":[]}],"startTime":1756058587024,"endTime":1756058587037,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/primitive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" promise inference","status":"passed","title":"promise inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success","status":"passed","title":"promise parsing success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success 2","status":"passed","title":"promise parsing success 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail 2","status":"passed","title":"promise parsing fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function pass","status":"passed","title":"async function pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function fail","status":"passed","title":"async function fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async promise parsing","status":"passed","title":"async promise parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" resolves","status":"passed","title":"resolves","duration":0,"failureMessages":[]}],"startTime":1756058613375,"endTime":1756058613380,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/promise.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" flat inference","status":"passed","title":"flat inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object freezing","status":"passed","title":"object freezing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async object freezing","status":"passed","title":"async object freezing","duration":1,"failureMessages":[]}],"startTime":1756058593248,"endTime":1756058593252,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/readonly.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" methods","status":"passed","title":"methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - pass","status":"passed","title":"string record parse - pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key schema","status":"passed","title":"key schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key and value getters","status":"passed","title":"key and value getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" is not vulnerable to prototype pollution","status":"passed","title":"is not vulnerable to prototype pollution","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont parse undefined values","status":"passed","title":"dont parse undefined values","duration":0,"failureMessages":[]}],"startTime":1756058607056,"endTime":1756058607062,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/record.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.late.object","status":"passed","title":"recursion with z.late.object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema getter","status":"passed","title":"schema getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]}],"startTime":1756058605436,"endTime":1756058605439,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/recursive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" refinement","status":"passed","title":"refinement","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement 2","status":"passed","title":"refinement 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement type guard","status":"passed","title":"refinement type guard","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement Promise","status":"passed","title":"refinement Promise","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" use path in refinement context","status":"passed","title":"use path in refinement context","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine","status":"passed","title":"superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine async","status":"passed","title":"superRefine async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine - type narrowing","status":"passed","title":"superRefine - type narrowing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained mixed refining types","status":"passed","title":"chained mixed refining types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get inner type","status":"passed","title":"get inner type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained refinements","status":"passed","title":"chained refinements","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" fatal superRefine","status":"passed","title":"fatal superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine after skipped transform","status":"passed","title":"superRefine after skipped transform","duration":0,"failureMessages":[]}],"startTime":1756058590381,"endTime":1756058590393,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" safeparse fail","status":"passed","title":"safeparse fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" safeparse pass","status":"passed","title":"safeparse pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" safeparse unexpected error","status":"passed","title":"safeparse unexpected error","duration":1,"failureMessages":[]}],"startTime":1756058631350,"endTime":1756058631354,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/safeparse.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse: size-related methods","status":"passed","title":"valid parse: size-related methods","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when parsing empty set in nonempty ","status":"passed","title":"failing when parsing empty set in nonempty ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is smaller than min() ","status":"passed","title":"failing when set is smaller than min() ","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is bigger than max() ","status":"passed","title":"failing when set is bigger than max() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when an empty set is given","status":"passed","title":"doesn’t throw when an empty set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Map is given","status":"passed","title":"throws when a Map is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has invalid input","status":"passed","title":"throws when the given set has invalid input","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has multiple invalid entries","status":"passed","title":"throws when the given set has multiple invalid entries","duration":0,"failureMessages":[]}],"startTime":1756058601566,"endTime":1756058601573,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/set.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid parse","status":"passed","title":"invalid parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid parse async","status":"passed","title":"invalid parse async","duration":0,"failureMessages":[]}],"startTime":1756058612634,"endTime":1756058612637,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/standard-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" email validations","status":"passed","title":"email validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept SGVsbG8gV29ybGQ=","status":"passed","title":"base64 should accept SGVsbG8gV29ybGQ=","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","status":"passed","title":"base64 should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","status":"passed","title":"base64 should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64 should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64 should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept MTIzNDU2Nzg5MA==","status":"passed","title":"base64 should accept MTIzNDU2Nzg5MA==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","status":"passed","title":"base64 should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","status":"passed","title":"base64 should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept ISIkJSMmJyonKCk=","status":"passed","title":"base64 should accept ISIkJSMmJyonKCk=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept ","status":"passed","title":"base64 should accept ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept w7/Dv8O+w74K","status":"passed","title":"base64 should accept w7/Dv8O+w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject 12345","status":"passed","title":"base64 should reject 12345","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject 12345===","status":"passed","title":"base64 should reject 12345===","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject SGVsbG8gV29ybGQ","status":"passed","title":"base64 should reject SGVsbG8gV29ybGQ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","status":"passed","title":"base64 should reject VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64 should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64 should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject .MTIzND2Nzg5MC4=","status":"passed","title":"base64 should reject .MTIzND2Nzg5MC4=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","status":"passed","title":"base64 should reject QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject w7_Dv8O-w74K","status":"passed","title":"base64 should reject w7_Dv8O-w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept SGVsbG8gV29ybGQ","status":"passed","title":"base64url should accept SGVsbG8gV29ybGQ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept SGVsbG8gV29ybGQ=","status":"passed","title":"base64url should accept SGVsbG8gV29ybGQ=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","status":"passed","title":"base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","status":"passed","title":"base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms","status":"passed","title":"base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","status":"passed","title":"base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64url should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg","status":"passed","title":"base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept MTIzNDU2Nzg5MA","status":"passed","title":"base64url should accept MTIzNDU2Nzg5MA","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept MTIzNDU2Nzg5MA==","status":"passed","title":"base64url should accept MTIzNDU2Nzg5MA==","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo","status":"passed","title":"base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","status":"passed","title":"base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","status":"passed","title":"base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","status":"passed","title":"base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ISIkJSMmJyonKCk","status":"passed","title":"base64url should accept ISIkJSMmJyonKCk","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ISIkJSMmJyonKCk=","status":"passed","title":"base64url should accept ISIkJSMmJyonKCk=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ","status":"passed","title":"base64url should accept ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept w7_Dv8O-w74K","status":"passed","title":"base64url should accept w7_Dv8O-w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept 123456","status":"passed","title":"base64url should accept 123456","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject w7/Dv8O+w74K","status":"passed","title":"base64url should reject w7/Dv8O+w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject 12345","status":"passed","title":"base64url should reject 12345","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject 12345===","status":"passed","title":"base64url should reject 12345===","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64url should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64url should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject .MTIzND2Nzg5MC4=","status":"passed","title":"base64url should reject .MTIzND2Nzg5MC4=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" jwt validations","status":"passed","title":"jwt validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url validations","status":"passed","title":"url validations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url error overrides","status":"passed","title":"url error overrides","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" emoji validations","status":"passed","title":"emoji validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" uuid","status":"passed","title":"uuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad uuid","status":"passed","title":"bad uuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nanoid","status":"passed","title":"nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad nanoid","status":"passed","title":"bad nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid","status":"passed","title":"cuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid2","status":"passed","title":"cuid2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ulid","status":"passed","title":"ulid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex","status":"passed","title":"regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error message","status":"passed","title":"regexp error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex lastIndex reset","status":"passed","title":"regex lastIndex reset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" checks getters","status":"passed","title":"checks getters","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" trim","status":"passed","title":"trim","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lowerCase","status":"passed","title":"lowerCase","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" datetime","status":"passed","title":"datetime","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" datetime parsing","status":"passed","title":"datetime parsing","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date","status":"passed","title":"date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date parsing","status":"passed","title":"date parsing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" time","status":"passed","title":"time","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" time parsing","status":"passed","title":"time parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" duration","status":"passed","title":"duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IP validation","status":"passed","title":"IP validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR validation","status":"passed","title":"CIDR validation","duration":2,"failureMessages":[]}],"startTime":1756058582897,"endTime":1756058582930,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parse","status":"passed","title":"transform ctx.addIssue with parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parseAsync","status":"passed","title":"transform ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in transform","status":"passed","title":"z.NEVER in transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic transformations","status":"passed","title":"basic transformations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" coercion","status":"passed","title":"coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async coercion","status":"passed","title":"async coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync coercion async error","status":"passed","title":"sync coercion async error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default","status":"passed","title":"default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dynamic default","status":"passed","title":"dynamic default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default when property is null or undefined","status":"passed","title":"default when property is null or undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with falsy values","status":"passed","title":"default with falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object typing","status":"passed","title":"object typing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform method overloads","status":"passed","title":"transform method overloads","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple transformers","status":"passed","title":"multiple transformers","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" short circuit on dirty","status":"passed","title":"short circuit on dirty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async short circuit on dirty","status":"passed","title":"async short circuit on dirty","duration":0,"failureMessages":[]}],"startTime":1756058599014,"endTime":1756058599021,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/transformer.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" tuple inference","status":"passed","title":"tuple inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" successful validation","status":"passed","title":"successful validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" successful async validation","status":"passed","title":"successful async validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failed validation","status":"passed","title":"failed validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failed async validation","status":"passed","title":"failed async validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with transformers","status":"passed","title":"tuple with transformers","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with rest schema","status":"passed","title":"tuple with rest schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array as tuple","status":"passed","title":"parse should fail given sparse array as tuple","duration":1,"failureMessages":[]}],"startTime":1756058612167,"endTime":1756058612173,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/tuple.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union 2","status":"passed","title":"union 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return valid over invalid","status":"passed","title":"return valid over invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return dirty result over aborted","status":"passed","title":"return dirty result over aborted","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" options getter","status":"passed","title":"options getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly union","status":"passed","title":"readonly union","duration":0,"failureMessages":[]}],"startTime":1756058620235,"endTime":1756058620240,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" array min","status":"passed","title":"array min","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array max","status":"passed","title":"array max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array length","status":"passed","title":"array length","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string length","status":"passed","title":"string length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string min","status":"passed","title":"string min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string max","status":"passed","title":"string max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number min","status":"passed","title":"number min","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number max","status":"passed","title":"number max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonnegative","status":"passed","title":"number nonnegative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonpositive","status":"passed","title":"number nonpositive","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number negative","status":"passed","title":"number negative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number positive","status":"passed","title":"number positive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instantiation","status":"passed","title":"instantiation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int","status":"passed","title":"int","duration":0,"failureMessages":[]}],"startTime":1756058605909,"endTime":1756058605915,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/validations.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" void","status":"passed","title":"void","duration":2,"failureMessages":[]}],"startTime":1756058633548,"endTime":1756058633550,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v3/tests/void.test.ts"},{"assertionResults":[{"ancestorTitles":["","PipelineCompiler Integration Tests","Valid Pipeline Compilation"],"fullName":" PipelineCompiler Integration Tests Valid Pipeline Compilation should successfully compile Moving Average Crossover strategy","status":"failed","title":"should successfully compile Moving Average Crossover strategy","duration":16,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":23,"column":30}},{"ancestorTitles":["","PipelineCompiler Integration Tests","Valid Pipeline Compilation"],"fullName":" PipelineCompiler Integration Tests Valid Pipeline Compilation should successfully compile RSI strategy","status":"failed","title":"should successfully compile RSI strategy","duration":2,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":61,"column":30}},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect missing required parameters","status":"passed","title":"should detect missing required parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect circular dependencies","status":"passed","title":"should detect circular dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect duplicate node IDs","status":"passed","title":"should detect duplicate node IDs","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect invalid parameter values","status":"passed","title":"should detect invalid parameter values","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect missing dependencies","status":"passed","title":"should detect missing dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should detect unknown node types","status":"passed","title":"should detect unknown node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Invalid Pipeline Handling"],"fullName":" PipelineCompiler Integration Tests Invalid Pipeline Handling should handle invalid YAML syntax","status":"passed","title":"should handle invalid YAML syntax","duration":2,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Execution Order Validation"],"fullName":" PipelineCompiler Integration Tests Execution Order Validation should correctly order nodes with complex dependencies","status":"failed","title":"should correctly order nodes with complex dependencies","duration":4,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":296,"column":30}},{"ancestorTitles":["","PipelineCompiler Integration Tests","Schema Validation"],"fullName":" PipelineCompiler Integration Tests Schema Validation should validate node ID format","status":"passed","title":"should validate node ID format","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineCompiler Integration Tests","Schema Validation"],"fullName":" PipelineCompiler Integration Tests Schema Validation should require at least one node in pipeline","status":"passed","title":"should require at least one node in pipeline","duration":1,"failureMessages":[]}],"startTime":1756058588451,"endTime":1756058588483,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/src/tests/integration.test.ts"},{"assertionResults":[{"ancestorTitles":["","PipelineValidator","valid pipeline validation"],"fullName":" PipelineValidator valid pipeline validation should validate a correct pipeline","status":"failed","title":"should validate a correct pipeline","duration":7,"failureMessages":["expected [ { type: 'semantic', …(1) } ] to have a length of +0 but got 1"],"location":{"line":38,"column":22}},{"ancestorTitles":["","PipelineValidator","dependency validation"],"fullName":" PipelineValidator dependency validation should detect missing dependencies","status":"passed","title":"should detect missing dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator","dependency validation"],"fullName":" PipelineValidator dependency validation should detect duplicate node IDs","status":"passed","title":"should detect duplicate node IDs","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator","node type validation"],"fullName":" PipelineValidator node type validation should detect unknown node types","status":"passed","title":"should detect unknown node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator","parameter validation"],"fullName":" PipelineValidator parameter validation should detect missing required parameters","status":"failed","title":"should detect missing required parameters","duration":1,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":119,"column":82}},{"ancestorTitles":["","PipelineValidator","parameter validation"],"fullName":" PipelineValidator parameter validation should validate indicator parameters","status":"failed","title":"should validate indicator parameters","duration":1,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":137,"column":73}}],"startTime":1756058605686,"endTime":1756058605697,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/src/tests/pipelineValidator.test.ts"},{"assertionResults":[{"ancestorTitles":["","PipelineValidator Unit Tests","Constructor and Initialization"],"fullName":" PipelineValidator Unit Tests Constructor and Initialization should initialize with built-in node definitions","status":"failed","title":"should initialize with built-in node definitions","duration":11,"failureMessages":["expected [ { type: 'semantic', …(1) } ] to have a length of +0 but got 1"],"location":{"line":33,"column":22}},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should validate a simple valid pipeline","status":"failed","title":"should validate a simple valid pipeline","duration":1,"failureMessages":["expected [ { type: 'semantic', …(1) } ] to have a length of +0 but got 1"],"location":{"line":63,"column":22}},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should reject pipeline with empty node list","status":"passed","title":"should reject pipeline with empty node list","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should detect duplicate node IDs","status":"passed","title":"should detect duplicate node IDs","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Basic Validation Rules"],"fullName":" PipelineValidator Unit Tests Basic Validation Rules should validate node ID format","status":"passed","title":"should validate node ID format","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Node Type Validation"],"fullName":" PipelineValidator Unit Tests Node Type Validation should detect unknown node types","status":"passed","title":"should detect unknown node types","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Node Type Validation"],"fullName":" PipelineValidator Unit Tests Node Type Validation should validate all built-in node types","status":"passed","title":"should validate all built-in node types","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should detect missing required parameters for DataLoaderNode","status":"failed","title":"should detect missing required parameters for DataLoaderNode","duration":1,"failureMessages":["expected 0 to be greater than or equal to 2"],"location":{"line":220,"column":34}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should detect missing required parameters for IndicatorNode","status":"passed","title":"should detect missing required parameters for IndicatorNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate timeframe parameter values","status":"failed","title":"should validate timeframe parameter values","duration":2,"failureMessages":["expected undefined not to be undefined"],"location":{"line":289,"column":30}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate indicator types","status":"failed","title":"should validate indicator types","duration":1,"failureMessages":["expected undefined not to be undefined"],"location":{"line":333,"column":30}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate period parameter as positive number","status":"failed","title":"should validate period parameter as positive number","duration":0,"failureMessages":["expected undefined not to be undefined"],"location":{"line":357,"column":29}},{"ancestorTitles":["","PipelineValidator Unit Tests","Parameter Validation"],"fullName":" PipelineValidator Unit Tests Parameter Validation should validate initial_capital as positive number","status":"failed","title":"should validate initial_capital as positive number","duration":1,"failureMessages":["expected undefined not to be undefined"],"location":{"line":381,"column":30}},{"ancestorTitles":["","PipelineValidator Unit Tests","Dependency Validation"],"fullName":" PipelineValidator Unit Tests Dependency Validation should detect missing dependencies","status":"passed","title":"should detect missing dependencies","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Dependency Validation"],"fullName":" PipelineValidator Unit Tests Dependency Validation should allow valid dependencies","status":"passed","title":"should allow valid dependencies","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Dependency Validation"],"fullName":" PipelineValidator Unit Tests Dependency Validation should handle multiple dependencies","status":"passed","title":"should handle multiple dependencies","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Circular Dependency Detection"],"fullName":" PipelineValidator Unit Tests Circular Dependency Detection should detect simple circular dependency","status":"passed","title":"should detect simple circular dependency","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Circular Dependency Detection"],"fullName":" PipelineValidator Unit Tests Circular Dependency Detection should detect complex circular dependency","status":"passed","title":"should detect complex circular dependency","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Circular Dependency Detection"],"fullName":" PipelineValidator Unit Tests Circular Dependency Detection should not flag valid complex dependency graph","status":"passed","title":"should not flag valid complex dependency graph","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should handle empty parameters object","status":"failed","title":"should handle empty parameters object","duration":0,"failureMessages":["expected undefined not to be undefined"],"location":{"line":619,"column":28}},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should handle null/undefined parameter values","status":"passed","title":"should handle null/undefined parameter values","duration":1,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should handle very large dependency chains","status":"passed","title":"should handle very large dependency chains","duration":2,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Edge Cases and Error Handling"],"fullName":" PipelineValidator Unit Tests Edge Cases and Error Handling should validate self-dependency as circular","status":"passed","title":"should validate self-dependency as circular","duration":0,"failureMessages":[]},{"ancestorTitles":["","PipelineValidator Unit Tests","Integration with Real DSL Examples"],"fullName":" PipelineValidator Unit Tests Integration with Real DSL Examples should validate moving average crossover DSL from fixtures","status":"failed","title":"should validate moving average crossover DSL from fixtures","duration":1,"failureMessages":["expected [ { type: 'semantic', …(1) }, …(2) ] to have a length of +0 but got 3"],"location":{"line":771,"column":22}},{"ancestorTitles":["","PipelineValidator Unit Tests","Integration with Real DSL Examples"],"fullName":" PipelineValidator Unit Tests Integration with Real DSL Examples should provide detailed error information","status":"passed","title":"should provide detailed error information","duration":0,"failureMessages":[]}],"startTime":1756058584592,"endTime":1756058584618,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/src/tests/pipelineValidator.unit.test.ts"},{"assertionResults":[{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should validate DataLoaderNode parameters","status":"passed","title":"should validate DataLoaderNode parameters","duration":2,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should reject invalid DataLoaderNode parameters","status":"passed","title":"should reject invalid DataLoaderNode parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should validate IndicatorNode parameters","status":"passed","title":"should validate IndicatorNode parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should reject negative periods for IndicatorNode","status":"failed","title":"should reject negative periods for IndicatorNode","duration":5,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":58,"column":63}},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should validate BacktestNode parameters","status":"passed","title":"should validate BacktestNode parameters","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Parameter Schema Validation"],"fullName":" Schema Validation Tests Parameter Schema Validation should reject invalid BacktestNode parameters","status":"passed","title":"should reject invalid BacktestNode parameters","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline DSL Schema Validation"],"fullName":" Schema Validation Tests Pipeline DSL Schema Validation should validate correct pipeline structure","status":"passed","title":"should validate correct pipeline structure","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline DSL Schema Validation"],"fullName":" Schema Validation Tests Pipeline DSL Schema Validation should reject invalid node IDs","status":"passed","title":"should reject invalid node IDs","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline DSL Schema Validation"],"fullName":" Schema Validation Tests Pipeline DSL Schema Validation should reject empty pipeline","status":"passed","title":"should reject empty pipeline","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for DataLoaderNode","status":"passed","title":"should generate correct output schema for DataLoaderNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for IndicatorNode","status":"passed","title":"should generate correct output schema for IndicatorNode","duration":1,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for CrossoverSignalNode","status":"passed","title":"should generate correct output schema for CrossoverSignalNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Schema Validation"],"fullName":" Schema Validation Tests Node I/O Schema Validation should generate correct output schema for BacktestNode","status":"passed","title":"should generate correct output schema for BacktestNode","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline Data Flow Validation"],"fullName":" Schema Validation Tests Pipeline Data Flow Validation should validate correct data flow","status":"failed","title":"should validate correct data flow","duration":1,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":194,"column":28}},{"ancestorTitles":["","Schema Validation Tests","Pipeline Data Flow Validation"],"fullName":" Schema Validation Tests Pipeline Data Flow Validation should detect incompatible data flow","status":"passed","title":"should detect incompatible data flow","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Pipeline Data Flow Validation"],"fullName":" Schema Validation Tests Pipeline Data Flow Validation should detect nodes with inappropriate dependencies","status":"failed","title":"should detect nodes with inappropriate dependencies","duration":1,"failureMessages":["expected false to be true // Object.is equality"],"location":{"line":235,"column":83}},{"ancestorTitles":["","Schema Validation Tests","Node I/O Compatibility"],"fullName":" Schema Validation Tests Node I/O Compatibility should validate compatible inputs","status":"passed","title":"should validate compatible inputs","duration":0,"failureMessages":[]},{"ancestorTitles":["","Schema Validation Tests","Node I/O Compatibility"],"fullName":" Schema Validation Tests Node I/O Compatibility should detect incompatible inputs","status":"passed","title":"should detect incompatible inputs","duration":1,"failureMessages":[]}],"startTime":1756058589217,"endTime":1756058589232,"status":"failed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/src/tests/schemaValidation.test.ts"},{"assertionResults":[{"ancestorTitles":["","YAMLParser","valid DSL parsing"],"fullName":" YAMLParser valid DSL parsing should parse a simple valid pipeline","status":"passed","title":"should parse a simple valid pipeline","duration":6,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","valid DSL parsing"],"fullName":" YAMLParser valid DSL parsing should parse pipeline with dependencies","status":"passed","title":"should parse pipeline with dependencies","duration":2,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return syntax error for invalid YAML","status":"passed","title":"should return syntax error for invalid YAML","duration":1,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return error for missing pipeline array","status":"passed","title":"should return error for missing pipeline array","duration":1,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return error for missing node id","status":"passed","title":"should return error for missing node id","duration":0,"failureMessages":[]},{"ancestorTitles":["","YAMLParser","invalid DSL handling"],"fullName":" YAMLParser invalid DSL handling should return error for invalid depends_on format","status":"passed","title":"should return error for invalid depends_on format","duration":1,"failureMessages":[]}],"startTime":1756058611710,"endTime":1756058611721,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/src/tests/yamlParser.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" check any inference","status":"passed","title":"check any inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check unknown inference","status":"passed","title":"check unknown inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check never inference","status":"passed","title":"check never inference","duration":1,"failureMessages":[]}],"startTime":1756058630856,"endTime":1756058630858,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/anyunknown.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array min/max","status":"passed","title":"array min/max","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array length","status":"passed","title":"array length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array.nonempty()","status":"passed","title":"array.nonempty()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array.nonempty().max()","status":"passed","title":"array.nonempty().max()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse empty array in nonempty","status":"passed","title":"parse empty array in nonempty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get element","status":"passed","title":"get element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue parsing despite array size error","status":"passed","title":"continue parsing despite array size error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array","status":"passed","title":"parse should fail given sparse array","duration":0,"failureMessages":[]}],"startTime":1756058593874,"endTime":1756058593885,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/array.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":11,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" checks","status":"passed","title":"checks","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability to $ZodType","status":"passed","title":"assignability to $ZodType","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability with narrowing","status":"passed","title":"assignability with narrowing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generic assignability in objects","status":"passed","title":"generic assignability in objects","duration":0,"failureMessages":[]}],"startTime":1756058595393,"endTime":1756058595406,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/assignability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string async parse","status":"passed","title":"string async parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number async parse","status":"passed","title":"number async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigInt async parse","status":"passed","title":"bigInt async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean async parse","status":"passed","title":"boolean async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date async parse","status":"passed","title":"date async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined async parse","status":"passed","title":"undefined async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null async parse","status":"passed","title":"null async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" any async parse","status":"passed","title":"any async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown async parse","status":"passed","title":"unknown async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" void async parse","status":"passed","title":"void async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array async parse","status":"passed","title":"array async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object async parse","status":"passed","title":"object async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union async parse","status":"passed","title":"union async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" record async parse","status":"passed","title":"record async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal async parse","status":"passed","title":"literal async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum async parse","status":"passed","title":"enum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum async parse","status":"passed","title":"nativeEnum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse good","status":"passed","title":"promise async parse good","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse bad","status":"passed","title":"promise async parse bad","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation non-empty strings","status":"passed","title":"async validation non-empty strings","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 1","status":"passed","title":"async validation multiple errors 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 2","status":"passed","title":"async validation multiple errors 2","duration":506,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ensure early async failure prevents follow-up refinement checks","status":"passed","title":"ensure early async failure prevents follow-up refinement checks","duration":1,"failureMessages":[]}],"startTime":1756058586569,"endTime":1756058587084,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/async-parsing.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" async refine .parse()","status":"passed","title":"async refine .parse()","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine","status":"passed","title":"async refine","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine with Promises","status":"passed","title":"async refine with Promises","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine that uses value","status":"passed","title":"async refine that uses value","duration":0,"failureMessages":[]}],"startTime":1756058618293,"endTime":1756058618298,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/async-refinements.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test this binding","status":"passed","title":"test this binding","duration":1,"failureMessages":[]}],"startTime":1756058634055,"endTime":1756058634056,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/base.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]}],"startTime":1756058617397,"endTime":1756058617400,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/bigint.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" $branded","status":"passed","title":"$branded","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded record","status":"passed","title":"branded record","duration":0,"failureMessages":[]}],"startTime":1756058616147,"endTime":1756058616151,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/brand.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic catch","status":"passed","title":"basic catch","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch fn does not run when parsing succeeds","status":"passed","title":"catch fn does not run when parsing succeeds","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic catch async","status":"passed","title":"basic catch async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch replace wrong types","status":"passed","title":"catch replace wrong types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch with transform","status":"passed","title":"catch with transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch on existing optional","status":"passed","title":"catch on existing optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on catch","status":"passed","title":"optional on catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeCatch","status":"passed","title":"removeCatch","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained catch","status":"passed","title":"chained catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" reported issues with nested usage","status":"passed","title":"reported issues with nested usage","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch error","status":"passed","title":"catch error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.input","status":"passed","title":"ctx.input","duration":0,"failureMessages":[]}],"startTime":1756058594333,"endTime":1756058594348,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/catch.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" coalesce","status":"passed","title":"coalesce","duration":1,"failureMessages":[]}],"startTime":1756058629344,"endTime":1756058629345,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/coalesce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string coercion","status":"passed","title":"string coercion","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number coercion","status":"passed","title":"number coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean coercion","status":"passed","title":"boolean coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint coercion","status":"passed","title":"bigint coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date coercion","status":"passed","title":"date coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override input type","status":"passed","title":"override input type","duration":0,"failureMessages":[]}],"startTime":1756058591401,"endTime":1756058591409,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/coerce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" continuability","status":"passed","title":"continuability","duration":9,"failureMessages":[]}],"startTime":1756058592691,"endTime":1756058592700,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/continuability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string params","status":"passed","title":"string params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non-continuable by default","status":"passed","title":"non-continuable by default","duration":2,"failureMessages":[]}],"startTime":1756058622309,"endTime":1756058622314,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/custom.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]}],"startTime":1756058626119,"endTime":1756058626121,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/date.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url recheck (resolved id: recheck) in C:/Users/scale/Code/edgeql/EdgeQL/node_modules/.pnpm/zod@3.25.76/node_modules/zod/src/v4/classic/tests/datetime.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/datetime.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic defaults","status":"passed","title":"basic defaults","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with optional","status":"passed","title":"default with optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with transform","status":"passed","title":"default with transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default on existing optional","status":"passed","title":"default on existing optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on default","status":"passed","title":"optional on default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeDefault","status":"passed","title":"removeDefault","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" apply default at output","status":"passed","title":"apply default at output","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained defaults","status":"passed","title":"chained defaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object optionality","status":"passed","title":"object optionality","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested prefault/default","status":"passed","title":"nested prefault/default","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing default","status":"passed","title":"failing default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial should not clobber defaults","status":"passed","title":"partial should not clobber defaults","duration":1,"failureMessages":[]}],"startTime":1756058591881,"endTime":1756058591893,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/default.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .describe","status":"passed","title":".describe","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" adding description with z.globalRegistry","status":"passed","title":"adding description with z.globalRegistry","duration":0,"failureMessages":[]}],"startTime":1756058621596,"endTime":1756058621598,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/description.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" _values","status":"passed","title":"_values","duration":6,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse - object","status":"passed","title":"valid parse - object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - include discriminator key (deprecated)","status":"passed","title":"valid - include discriminator key (deprecated)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - optional discriminator (object)","status":"passed","title":"valid - optional discriminator (object)","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - discriminator value of various primitive types","status":"passed","title":"valid - discriminator value of various primitive types","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid - null","status":"passed","title":"invalid - null","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value","status":"passed","title":"invalid discriminator value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value - unionFallback","status":"passed","title":"invalid discriminator value - unionFallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid discriminator value, invalid data","status":"passed","title":"valid discriminator value, invalid data","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - missing discriminator","status":"passed","title":"wrong schema - missing discriminator","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - valid","status":"passed","title":"async - valid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - invalid","status":"passed","title":"async - invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - literals with .default or .pipe","status":"passed","title":"valid - literals with .default or .pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum and nativeEnum","status":"passed","title":"enum and nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded","status":"passed","title":"branded","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional and nullable","status":"passed","title":"optional and nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple discriminators","status":"passed","title":"multiple discriminators","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" single element union","status":"passed","title":"single element union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested discriminated unions","status":"passed","title":"nested discriminated unions","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly literal discriminator","status":"passed","title":"readonly literal discriminator","duration":1,"failureMessages":[]}],"startTime":1756058585299,"endTime":1756058585323,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" enum from string array","status":"passed","title":"enum from string array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from const object","status":"passed","title":"enum from const object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from native enum","status":"passed","title":"enum from native enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from native enum with numeric keys","status":"passed","title":"enum from native enum with numeric keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" issue metadata","status":"passed","title":"issue metadata","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from non-const inputs","status":"passed","title":"enum from non-const inputs","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get options","status":"passed","title":"get options","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly enum","status":"passed","title":"readonly enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map","status":"passed","title":"error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type signatures","status":"passed","title":"type signatures","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract","status":"passed","title":"extract","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" exclude","status":"passed","title":"exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map inheritance","status":"passed","title":"error map inheritance","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly in ZodEnumDef","status":"passed","title":"readonly in ZodEnumDef","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid enum elementstring","status":"passed","title":"enum error message, invalid enum elementstring","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid type","status":"passed","title":"enum error message, invalid type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum default error message","status":"passed","title":"nativeEnum default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with message returns the custom error message","status":"passed","title":"enum with message returns the custom error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with diagonal keys","status":"passed","title":"enum with diagonal keys","duration":0,"failureMessages":[]}],"startTime":1756058589673,"endTime":1756058589681,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/enum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" regular error","status":"passed","title":"regular error","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .flatten()","status":"passed","title":".flatten()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom .flatten()","status":"passed","title":"custom .flatten()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .format()","status":"passed","title":".format()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom .format()","status":"passed","title":"custom .format()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" all errors","status":"passed","title":"all errors","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.treeifyError","status":"passed","title":"z.treeifyError","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.treeifyError 2","status":"passed","title":"z.treeifyError 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.prettifyError","status":"passed","title":"z.prettifyError","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.toDotPath","status":"passed","title":"z.toDotPath","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inheritance","status":"passed","title":"inheritance","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" disc union treeify/format","status":"passed","title":"disc union treeify/format","duration":0,"failureMessages":[]}],"startTime":1756058586457,"endTime":1756058586466,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/error-utils.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" error creation","status":"passed","title":"error creation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" do not allow error and message together","status":"passed","title":"do not allow error and message together","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type error with custom error map","status":"passed","title":"type error with custom error map","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement fail with params","status":"passed","title":"refinement fail with params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" hard coded error  with custom errormap","status":"passed","title":"hard coded error  with custom errormap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default error message","status":"passed","title":"default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refine","status":"passed","title":"override error in refine","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refinement","status":"passed","title":"override error in refinement","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array minimum","status":"passed","title":"array minimum","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path in custom error map","status":"passed","title":"custom path in custom error map","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" root level formatting","status":"passed","title":"root level formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" no abort early on refinements","status":"passed","title":"no abort early on refinements","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" detect issue with input fallback","status":"passed","title":"detect issue with input fallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting","status":"passed","title":"formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting with nullable and optional fields","status":"passed","title":"formatting with nullable and optional fields","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferFlattenedErrors","status":"passed","title":"inferFlattenedErrors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema-bound error map","status":"passed","title":"schema-bound error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bound error map overrides contextual","status":"passed","title":"bound error map overrides contextual","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.config customError ","status":"passed","title":"z.config customError ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty string error message","status":"passed","title":"empty string error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont short circuit on continuable errors","status":"passed","title":"dont short circuit on continuable errors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string error params","status":"passed","title":"string error params","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error inheritance","status":"passed","title":"error inheritance","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error serialization","status":"passed","title":"error serialization","duration":2,"failureMessages":[]}],"startTime":1756058584877,"endTime":1756058584908,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/error.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url @web-std/file (resolved id: @web-std/file) in C:/Users/scale/Code/edgeql/EdgeQL/node_modules/.pnpm/zod@3.25.76/node_modules/zod/src/v4/classic/tests/file.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/file.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" first party switch","status":"passed","title":"first party switch","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" $ZodSchemaTypes","status":"passed","title":"$ZodSchemaTypes","duration":0,"failureMessages":[]}],"startTime":1756058610985,"endTime":1756058610988,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/firstparty.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 1","status":"passed","title":"parsed function fail 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 2","status":"passed","title":"parsed function fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 1","status":"passed","title":"function inference 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" args method","status":"passed","title":"args method","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 2","status":"passed","title":"function inference 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid function run","status":"passed","title":"valid function run","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input validation error","status":"passed","title":"input validation error","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array inputs","status":"passed","title":"array inputs","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output validation error","status":"passed","title":"output validation error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function with async refinements","status":"passed","title":"function with async refinements","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non async function with async refinements should fail","status":"passed","title":"non async function with async refinements should fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extra parameters with rest","status":"passed","title":"extra parameters with rest","duration":0,"failureMessages":[]}],"startTime":1756058597589,"endTime":1756058597598,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/function.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" generics","status":"passed","title":"generics","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generics with optional","status":"passed","title":"generics with optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested no undefined","status":"passed","title":"nested no undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generic on output type","status":"passed","title":"generic on output type","duration":1,"failureMessages":[]}],"startTime":1756058616636,"endTime":1756058616641,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/generics.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.boolean","status":"passed","title":"z.boolean","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.bigint","status":"passed","title":"z.bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.symbol","status":"passed","title":"z.symbol","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.date","status":"passed","title":"z.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.string","status":"passed","title":"z.coerce.string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.number","status":"passed","title":"z.coerce.number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.boolean","status":"passed","title":"z.coerce.boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.bigint","status":"passed","title":"z.coerce.bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.date","status":"passed","title":"z.coerce.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.datetime","status":"passed","title":"z.iso.datetime","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.date","status":"passed","title":"z.iso.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.time","status":"passed","title":"z.iso.time","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.duration","status":"passed","title":"z.iso.duration","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.undefined","status":"passed","title":"z.undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.any","status":"passed","title":"z.any","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.unknown","status":"passed","title":"z.unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.never","status":"passed","title":"z.never","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.void","status":"passed","title":"z.void","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.array","status":"passed","title":"z.array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.union","status":"passed","title":"z.union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.intersection","status":"passed","title":"z.intersection","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.tuple","status":"passed","title":"z.tuple","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.record","status":"passed","title":"z.record","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map","status":"passed","title":"z.map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map invalid_element","status":"passed","title":"z.map invalid_element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map async","status":"passed","title":"z.map async","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.set","status":"passed","title":"z.set","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum","status":"passed","title":"z.enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum - native","status":"passed","title":"z.enum - native","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nativeEnum","status":"passed","title":"z.nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.literal","status":"passed","title":"z.literal","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file","status":"passed","title":"z.file","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform async","status":"passed","title":"z.transform async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.preprocess","status":"passed","title":"z.preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.optional","status":"passed","title":"z.optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nullable","status":"passed","title":"z.nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.default","status":"passed","title":"z.default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catch","status":"passed","title":"z.catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nan","status":"passed","title":"z.nan","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe","status":"passed","title":"z.pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.readonly","status":"passed","title":"z.readonly","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.templateLiteral","status":"passed","title":"z.templateLiteral","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom schema","status":"passed","title":"z.custom schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom check","status":"passed","title":"z.custom check","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.check","status":"passed","title":"z.check","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.instanceof","status":"passed","title":"z.instanceof","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.refine","status":"passed","title":"z.refine","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.$brand()","status":"passed","title":"z.$brand()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lazy","status":"passed","title":"z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.json","status":"passed","title":"z.json","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.promise","status":"passed","title":"z.promise","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" isPlainObject","status":"passed","title":"isPlainObject","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" def typing","status":"passed","title":"def typing","duration":1,"failureMessages":[]}],"startTime":1756058584290,"endTime":1756058584328,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof fatal","status":"passed","title":"instanceof fatal","duration":0,"failureMessages":[]}],"startTime":1756058625146,"endTime":1756058625149,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/instanceof.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object intersection","status":"passed","title":"object intersection","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object intersection: loose","status":"passed","title":"object intersection: loose","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object intersection: strict","status":"passed","title":"object intersection: strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection","status":"passed","title":"deep intersection","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection of arrays","status":"passed","title":"deep intersection of arrays","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid intersection types","status":"passed","title":"invalid intersection types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge (incompatible lengths)","status":"passed","title":"invalid array merge (incompatible lengths)","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge (incompatible elements)","status":"passed","title":"invalid array merge (incompatible elements)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid object merge","status":"passed","title":"invalid object merge","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid deep merge of object and array combination","status":"passed","title":"invalid deep merge of object and array combination","duration":0,"failureMessages":[]}],"startTime":1756058601833,"endTime":1756058601843,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/intersection.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" <anonymous>","status":"passed","title":"<anonymous>","duration":0,"failureMessages":[]}],"startTime":1756058609420,"endTime":1756058609420,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/json.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" opt passthrough","status":"passed","title":"opt passthrough","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema getter","status":"passed","title":"schema getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lazy proxy","status":"passed","title":"lazy proxy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursive union wit z.lazy","status":"passed","title":"recursive union wit z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with lazy","status":"passed","title":"mutual recursion with lazy","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with cyclical data","status":"passed","title":"mutual recursion with cyclical data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complicated self-recursion","status":"passed","title":"complicated self-recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lazy initialization","status":"passed","title":"lazy initialization","duration":1,"failureMessages":[]}],"startTime":1756058602119,"endTime":1756058602128,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/lazy.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should have `input` field with data","status":"passed","title":"invalid_literal should have `input` field with data","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should return default message","status":"passed","title":"invalid_literal should return default message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should return custom message","status":"passed","title":"invalid_literal should return custom message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal default error message","status":"passed","title":"literal default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .value getter","status":"passed","title":".value getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly","status":"passed","title":"readonly","duration":0,"failureMessages":[]}],"startTime":1756058613607,"endTime":1756058613612,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/literal.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Set is given","status":"passed","title":"throws when a Set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has invalid key and invalid input","status":"passed","title":"throws when the given map has invalid key and invalid input","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has multiple invalid entries","status":"passed","title":"throws when the given map has multiple invalid entries","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dirty","status":"passed","title":"dirty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" map with object keys","status":"passed","title":"map with object keys","duration":1,"failureMessages":[]}],"startTime":1756058601055,"endTime":1756058601062,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/map.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]}],"startTime":1756058630133,"endTime":1756058630135,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/nan.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nested refinements","status":"passed","title":"nested refinements","duration":8,"failureMessages":[]}],"startTime":1756058607547,"endTime":1756058607555,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/nested-refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nonoptional","status":"passed","title":"nonoptional","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonoptional with default","status":"passed","title":"nonoptional with default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonoptional in object","status":"passed","title":"nonoptional in object","duration":1,"failureMessages":[]}],"startTime":1756058614349,"endTime":1756058614354,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/nonoptional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .nullable()","status":"passed","title":".nullable()","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nullable unwrap","status":"passed","title":".nullable unwrap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":1,"failureMessages":[]}],"startTime":1756058631620,"endTime":1756058631625,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/nullable.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.number() basic validation","status":"passed","title":"z.number() basic validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" NaN validation","status":"passed","title":"NaN validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" Infinity validation","status":"passed","title":"Infinity validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .gt() validation","status":"passed","title":".gt() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .gte() validation","status":"passed","title":".gte() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .min() validation","status":"passed","title":".min() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .lt() validation","status":"passed","title":".lt() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .lte() validation","status":"passed","title":".lte() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .max() validation","status":"passed","title":".max() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .int() validation","status":"passed","title":".int() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .positive() validation","status":"passed","title":".positive() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .negative() validation","status":"passed","title":".negative() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nonpositive() validation","status":"passed","title":".nonpositive() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nonnegative() validation","status":"passed","title":".nonnegative() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .multipleOf() with positive divisor","status":"passed","title":".multipleOf() with positive divisor","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .multipleOf() with negative divisor","status":"passed","title":".multipleOf() with negative divisor","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .step() validation","status":"passed","title":".step() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .finite() validation","status":"passed","title":".finite() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .safe() validation","status":"passed","title":".safe() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min value getters","status":"passed","title":"min value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" max value getters","status":"passed","title":"max value getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int getter","status":"passed","title":"int getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" finite getter","status":"passed","title":"finite getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string format methods","status":"passed","title":"string format methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error customization","status":"passed","title":"error customization","duration":0,"failureMessages":[]}],"startTime":1756058591116,"endTime":1756058591128,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object type inference","status":"passed","title":"object type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown throw","status":"passed","title":"unknown throw","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shape() should return schema of particular key","status":"passed","title":"shape() should return schema of particular key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" correct parsing","status":"passed","title":"correct parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict by default","status":"passed","title":"nonstrict by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse optional keys ","status":"passed","title":"parse optional keys ","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty object","status":"passed","title":"empty object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip by default","status":"passed","title":"strip by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys override","status":"passed","title":"unknownkeys override","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough unknown","status":"passed","title":"passthrough unknown","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip unknown","status":"passed","title":"strip unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict","status":"passed","title":"strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall inference","status":"passed","title":"catchall inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional keys are unset","status":"passed","title":"optional keys are unset","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall parsing","status":"passed","title":"catchall parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonexistent keys","status":"passed","title":"nonexistent keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test async union","status":"passed","title":"test async union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test inferred merged type","status":"passed","title":"test inferred merged type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type with Record shape","status":"passed","title":"inferred type with Record shape","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred merged object type with optional properties","status":"passed","title":"inferred merged object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred unioned object type with optional properties","status":"passed","title":"inferred unioned object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred enum type","status":"passed","title":"inferred enum type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred partial object type with optional properties","status":"passed","title":"inferred partial object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred picked object type with optional properties","status":"passed","title":"inferred picked object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type for unknown/any keys","status":"passed","title":"inferred type for unknown/any keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strictObject","status":"passed","title":"strictObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object with refine","status":"passed","title":"object with refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with date","status":"passed","title":"intersection of object with date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with refine with date","status":"passed","title":"intersection of object with refine with date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall","status":"passed","title":"catchall","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys merging","status":"passed","title":"unknownkeys merging","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should return schema with new key","status":"passed","title":"extend() should return schema with new key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should have power to override existing key","status":"passed","title":"extend() should have power to override existing key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough index signature","status":"passed","title":"passthrough index signature","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null prototype","status":"passed","title":"null prototype","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty objects","status":"passed","title":"empty objects","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preserve key order","status":"passed","title":"preserve key order","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty shape","status":"passed","title":"empty shape","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" zodtype assignability","status":"passed","title":"zodtype assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" index signature in shape","status":"passed","title":"index signature in shape","duration":2,"failureMessages":[]}],"startTime":1756058585653,"endTime":1756058585682,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .optional()","status":"passed","title":".optional()","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optionality","status":"passed","title":"optionality","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe optionality","status":"passed","title":"pipe optionality","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe optionality inside objects","status":"passed","title":"pipe optionality inside objects","duration":1,"failureMessages":[]}],"startTime":1756058604131,"endTime":1756058604138,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/optional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" shallow inference","status":"passed","title":"shallow inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shallow partial parse","status":"passed","title":"shallow partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required","status":"passed","title":"required","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required inference","status":"passed","title":"required inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask","status":"passed","title":"required with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask -- ignore falsy values","status":"passed","title":"required with mask -- ignore falsy values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask","status":"passed","title":"partial with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask -- ignore falsy values","status":"passed","title":"partial with mask -- ignore falsy values","duration":1,"failureMessages":[]}],"startTime":1756058600666,"endTime":1756058600671,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/partial.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" pick type inference","status":"passed","title":"pick type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - success","status":"passed","title":"pick parse - success","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - fail","status":"passed","title":"pick parse - fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick - remove optional","status":"passed","title":"pick - remove optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit type inference","status":"passed","title":"omit type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - success","status":"passed","title":"omit parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - fail","status":"passed","title":"omit parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit - remove optional","status":"passed","title":"omit - remove optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict inference","status":"passed","title":"nonstrict inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - pass","status":"passed","title":"nonstrict parsing - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - fail","status":"passed","title":"nonstrict parsing - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick/omit/required/partial - do not allow unknown keys","status":"passed","title":"pick/omit/required/partial - do not allow unknown keys","duration":1,"failureMessages":[]}],"startTime":1756058603636,"endTime":1756058603643,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/pickomit.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string to number pipe","status":"passed","title":"string to number pipe","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string to number pipe async","status":"passed","title":"string to number pipe async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string with default fallback","status":"passed","title":"string with default fallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue on non-fatal errors","status":"passed","title":"continue on non-fatal errors","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" break on fatal errors","status":"passed","title":"break on fatal errors","duration":1,"failureMessages":[]}],"startTime":1756058618798,"endTime":1756058618805,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/pipe.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic prefault","status":"passed","title":"basic prefault","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" prefault inside object","status":"passed","title":"prefault inside object","duration":1,"failureMessages":[]}],"startTime":1756058625385,"endTime":1756058625388,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/prefault.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" preprocess","status":"passed","title":"preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess","status":"passed","title":"async preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.addIssue accepts string","status":"passed","title":"ctx.addIssue accepts string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parse","status":"passed","title":"preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue non-fatal by default","status":"passed","title":"preprocess ctx.addIssue non-fatal by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue fatal true","status":"passed","title":"preprocess ctx.addIssue fatal true","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess ctx.addIssue with parseAsync","status":"passed","title":"async preprocess ctx.addIssue with parseAsync","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in preprocess","status":"passed","title":"z.NEVER in preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess as the second property of object","status":"passed","title":"preprocess as the second property of object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess validates with sibling errors","status":"passed","title":"preprocess validates with sibling errors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" perform transform with non-fatal issues","status":"passed","title":"perform transform with non-fatal issues","duration":1,"failureMessages":[]}],"startTime":1756058595071,"endTime":1756058595083,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/preprocess.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" literal string schema","status":"passed","title":"literal string schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number schema","status":"passed","title":"literal number schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean schema","status":"passed","title":"literal boolean schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint schema","status":"passed","title":"literal bigint schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string schema","status":"passed","title":"string schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number schema","status":"passed","title":"number schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint schema","status":"passed","title":"bigint schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean schema","status":"passed","title":"boolean schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date schema","status":"passed","title":"date schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" symbol schema","status":"passed","title":"symbol schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined schema","status":"passed","title":"undefined schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null schema","status":"passed","title":"null schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" primitive inference","status":"passed","title":"primitive inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get literal values","status":"passed","title":"get literal values","duration":1,"failureMessages":[]}],"startTime":1756058592202,"endTime":1756058592211,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/primitive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" promise inference","status":"passed","title":"promise inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success","status":"passed","title":"promise parsing success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail 2","status":"passed","title":"promise parsing fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync promise parsing","status":"passed","title":"sync promise parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function pass","status":"passed","title":"async function pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function fail","status":"passed","title":"async function fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async promise parsing","status":"passed","title":"async promise parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" resolves","status":"passed","title":"resolves","duration":1,"failureMessages":[]}],"startTime":1756058615890,"endTime":1756058615896,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/promise.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":2,"failureMessages":[]}],"startTime":1756058632510,"endTime":1756058632512,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/prototypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" flat inference","status":"passed","title":"flat inference","duration":6,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object freezing","status":"passed","title":"object freezing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async object freezing","status":"passed","title":"async object freezing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly inference","status":"passed","title":"readonly inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly parse","status":"passed","title":"readonly parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly parse with tuples","status":"passed","title":"readonly parse with tuples","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly and the get method","status":"passed","title":"readonly and the get method","duration":2,"failureMessages":[]}],"startTime":1756058587410,"endTime":1756058587426,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/readonly.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum exhaustiveness","status":"passed","title":"enum exhaustiveness","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal exhaustiveness","status":"passed","title":"literal exhaustiveness","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe exhaustiveness","status":"passed","title":"pipe exhaustiveness","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union exhaustiveness","status":"passed","title":"union exhaustiveness","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - pass","status":"passed","title":"string record parse - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key and value getters","status":"passed","title":"key and value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" is not vulnerable to prototype pollution","status":"passed","title":"is not vulnerable to prototype pollution","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont remove undefined values","status":"passed","title":"dont remove undefined values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" allow undefined values","status":"passed","title":"allow undefined values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async parsing","status":"passed","title":"async parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async parsing","status":"passed","title":"async parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial record","status":"passed","title":"partial record","duration":1,"failureMessages":[]}],"startTime":1756058590691,"endTime":1756058590704,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/record.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion - native","status":"passed","title":"mutual recursion - native","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick and omit with getter","status":"passed","title":"pick and omit with getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred self-recursion","status":"passed","title":"deferred self-recursion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred mutual recursion","status":"passed","title":"deferred mutual recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with meta","status":"passed","title":"mutual recursion with meta","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion compatibility","status":"passed","title":"recursion compatibility","duration":0,"failureMessages":[]}],"startTime":1756058593557,"endTime":1756058593565,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/recursive-types.test.ts"},{"assertionResults":[{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should create a new schema instance when refining","status":"passed","title":"should create a new schema instance when refining","duration":4,"failureMessages":[]},{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should validate according to refinement logic","status":"passed","title":"should validate according to refinement logic","duration":2,"failureMessages":[]},{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should validate strict mode correctly","status":"passed","title":"should validate strict mode correctly","duration":1,"failureMessages":[]},{"ancestorTitles":["","refinement with custom error messages"],"fullName":" refinement with custom error messages should use custom error message when validation fails","status":"passed","title":"should use custom error message when validation fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","async refinements"],"fullName":" async refinements should support async refinement functions","status":"passed","title":"should support async refinement functions","duration":2,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with continue: false","status":"passed","title":"should abort early with continue: false","duration":0,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with fatal: true","status":"passed","title":"should abort early with fatal: true","duration":0,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with abort flag","status":"passed","title":"should abort early with abort flag","duration":1,"failureMessages":[]},{"ancestorTitles":["","custom error paths"],"fullName":" custom error paths should use custom path in error message","status":"passed","title":"should use custom path in error message","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should support multiple validation rules","status":"passed","title":"should support multiple validation rules","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should support async superRefine","status":"passed","title":"should support async superRefine","duration":0,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should accept string as shorthand for custom error message","status":"passed","title":"should accept string as shorthand for custom error message","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should respect fatal flag in superRefine","status":"passed","title":"should respect fatal flag in superRefine","duration":0,"failureMessages":[]},{"ancestorTitles":["","chained refinements"],"fullName":" chained refinements should collect all validation errors when appropriate","status":"passed","title":"should collect all validation errors when appropriate","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" when","status":"passed","title":"when","duration":3,"failureMessages":[]}],"startTime":1756058585947,"endTime":1756058585965,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" globalRegistry","status":"passed","title":"globalRegistry","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry","status":"passed","title":"z.registry","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry no metadata","status":"passed","title":"z.registry no metadata","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry with schema constraints","status":"passed","title":"z.registry with schema constraints","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output type in registry meta","status":"passed","title":"output type in registry meta","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output type in registry meta - objects and arrays","status":"passed","title":"output type in registry meta - objects and arrays","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type in registry meta","status":"passed","title":"input type in registry meta","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type in registry meta - objects and arrays","status":"passed","title":"input type in registry meta - objects and arrays","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .meta method","status":"passed","title":".meta method","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .meta metadata does not bubble up","status":"passed","title":".meta metadata does not bubble up","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .describe","status":"passed","title":".describe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inherit across clone","status":"passed","title":"inherit across clone","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" loose examples","status":"passed","title":"loose examples","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function meta witout replacement","status":"passed","title":"function meta witout replacement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function meta with replacement","status":"passed","title":"function meta with replacement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test .clear()","status":"passed","title":"test .clear()","duration":0,"failureMessages":[]}],"startTime":1756058598424,"endTime":1756058598430,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/registries.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse: size-related methods","status":"passed","title":"valid parse: size-related methods","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when parsing empty set in nonempty ","status":"passed","title":"failing when parsing empty set in nonempty ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is smaller than min() ","status":"passed","title":"failing when set is smaller than min() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is bigger than max() ","status":"passed","title":"failing when set is bigger than max() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when an empty set is given","status":"passed","title":"doesn’t throw when an empty set is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Map is given","status":"passed","title":"throws when a Map is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has invalid input","status":"passed","title":"throws when the given set has invalid input","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has multiple invalid entries","status":"passed","title":"throws when the given set has multiple invalid entries","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min/max","status":"passed","title":"min/max","duration":1,"failureMessages":[]}],"startTime":1756058599568,"endTime":1756058599576,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/set.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":0,"failureMessages":[]}],"startTime":1756058620919,"endTime":1756058620923,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/standard-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string format methods","status":"passed","title":"string format methods","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringFormat","status":"passed","title":"z.stringFormat","duration":2,"failureMessages":[]}],"startTime":1756058610438,"endTime":1756058610444,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/string-formats.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" includes","status":"passed","title":"includes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" startswith/endswith","status":"passed","title":"startswith/endswith","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" email validations","status":"passed","title":"email validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 validations","status":"passed","title":"base64 validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url validations","status":"passed","title":"base64url validations","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" big base64 and base64url","status":"passed","title":"big base64 and base64url","duration":140,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" jwt token","status":"passed","title":"jwt token","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url validations","status":"passed","title":"url validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" httpurl","status":"passed","title":"httpurl","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url error overrides","status":"passed","title":"url error overrides","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" emoji validations","status":"passed","title":"emoji validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nanoid","status":"passed","title":"nanoid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad nanoid","status":"passed","title":"bad nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" good uuid","status":"passed","title":"good uuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad uuid","status":"passed","title":"bad uuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" good guid","status":"passed","title":"good guid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad guid","status":"passed","title":"bad guid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid","status":"passed","title":"cuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid2","status":"passed","title":"cuid2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ulid","status":"passed","title":"ulid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" xid","status":"passed","title":"xid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ksuid","status":"passed","title":"ksuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex","status":"passed","title":"regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error message","status":"passed","title":"regexp error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error custom message","status":"passed","title":"regexp error custom message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex lastIndex reset","status":"passed","title":"regex lastIndex reset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" format","status":"passed","title":"format","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" trim","status":"passed","title":"trim","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lowerCase","status":"passed","title":"lowerCase","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IPv4 validation","status":"passed","title":"IPv4 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IPv6 validation","status":"passed","title":"IPv6 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR v4 validation","status":"passed","title":"CIDR v4 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR v6 validation","status":"passed","title":"CIDR v6 validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" E.164 validation","status":"passed","title":"E.164 validation","duration":1,"failureMessages":[]}],"startTime":1756058582930,"endTime":1756058583104,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.stringbool","status":"passed","title":"z.stringbool","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom values","status":"passed","title":"custom values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom values - case sensitive","status":"passed","title":"custom values - case sensitive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringbool with custom error messages","status":"passed","title":"z.stringbool with custom error messages","duration":1,"failureMessages":[]}],"startTime":1756058615310,"endTime":1756058615316,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/stringbool.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" template literal type inference","status":"passed","title":"template literal type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal unsupported args","status":"passed","title":"template literal unsupported args","duration":8,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - success - basic cases","status":"passed","title":"template literal parsing - success - basic cases","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - basic cases","status":"passed","title":"template literal parsing - failure - basic cases","duration":8,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexes","status":"passed","title":"regexes","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - success - complex cases","status":"passed","title":"template literal parsing - success - complex cases","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - complex cases","status":"passed","title":"template literal parsing - failure - complex cases","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - issue format","status":"passed","title":"template literal parsing - failure - issue format","duration":1,"failureMessages":[]}],"startTime":1756058583829,"endTime":1756058583857,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/template-literal.test.ts"},{"assertionResults":[{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema primitive types","status":"passed","title":"primitive types","duration":10,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema unsupported schema types","status":"passed","title":"unsupported schema types","duration":3,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema string formats","status":"passed","title":"string formats","duration":3,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema string patterns","status":"passed","title":"string patterns","duration":2,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema number constraints","status":"passed","title":"number constraints","duration":3,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema arrays","status":"passed","title":"arrays","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema unions","status":"passed","title":"unions","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema intersections","status":"passed","title":"intersections","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema record","status":"passed","title":"record","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema tuple","status":"passed","title":"tuple","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema promise","status":"passed","title":"promise","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema lazy","status":"passed","title":"lazy","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema enum","status":"passed","title":"enum","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema literal","status":"passed","title":"literal","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema pipe","status":"passed","title":"pipe","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema simple objects","status":"passed","title":"simple objects","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema additionalproperties in z.object","status":"passed","title":"additionalproperties in z.object","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema catchall objects","status":"passed","title":"catchall objects","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema optional fields - object","status":"passed","title":"optional fields - object","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema recursive object","status":"passed","title":"recursive object","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema simple interface","status":"passed","title":"simple interface","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema catchall interface","status":"passed","title":"catchall interface","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema recursive interface schemas","status":"passed","title":"recursive interface schemas","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema mutually recursive interface schemas","status":"passed","title":"mutually recursive interface schemas","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override","status":"passed","title":"override","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override: do not run on references","status":"passed","title":"override: do not run on references","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override with refs","status":"passed","title":"override with refs","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override execution order","status":"passed","title":"override execution order","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override with path","status":"passed","title":"override with path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe","status":"passed","title":"pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough schemas","status":"passed","title":"passthrough schemas","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract schemas with id","status":"passed","title":"extract schemas with id","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unrepresentable literal values are ignored","status":"passed","title":"unrepresentable literal values are ignored","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" describe with id","status":"passed","title":"describe with id","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overwrite id","status":"passed","title":"overwrite id","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overwrite descriptions","status":"passed","title":"overwrite descriptions","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" top-level readonly","status":"passed","title":"top-level readonly","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic registry","status":"passed","title":"basic registry","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" _ref","status":"passed","title":"_ref","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" defaults/prefaults","status":"passed","title":"defaults/prefaults","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type","status":"passed","title":"input type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" examples on pipe","status":"passed","title":"examples on pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" use output type for preprocess","status":"passed","title":"use output type for preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" flatten simple intersections","status":"passed","title":"flatten simple intersections","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file()","status":"passed","title":"z.file()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom toJSONSchema","status":"passed","title":"custom toJSONSchema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cycle detection - root","status":"passed","title":"cycle detection - root","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cycle detection - mutual recursion","status":"passed","title":"cycle detection - mutual recursion","duration":0,"failureMessages":[]}],"startTime":1756058583293,"endTime":1756058583336,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parse","status":"passed","title":"transform ctx.addIssue with parse","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parseAsync","status":"passed","title":"transform ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in transform","status":"passed","title":"z.NEVER in transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic transformations","status":"passed","title":"basic transformations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" coercion","status":"passed","title":"coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async coercion","status":"passed","title":"async coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync coercion async error","status":"passed","title":"sync coercion async error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default","status":"passed","title":"default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dynamic default","status":"passed","title":"dynamic default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default when property is null or undefined","status":"passed","title":"default when property is null or undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with falsy values","status":"passed","title":"default with falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object typing","status":"passed","title":"object typing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform method overloads","status":"passed","title":"transform method overloads","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple transformers","status":"passed","title":"multiple transformers","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" short circuit on dirty","status":"passed","title":"short circuit on dirty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async short circuit on dirty","status":"passed","title":"async short circuit on dirty","duration":1,"failureMessages":[]}],"startTime":1756058597997,"endTime":1756058598010,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/transform.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" successful validation","status":"passed","title":"successful validation","duration":6,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation","status":"passed","title":"async validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with optional elements","status":"passed","title":"tuple with optional elements","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with optional elements followed by required","status":"passed","title":"tuple with optional elements followed by required","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with rest schema","status":"passed","title":"tuple with rest schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sparse array input","status":"passed","title":"sparse array input","duration":0,"failureMessages":[]}],"startTime":1756058602832,"endTime":1756058602843,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/tuple.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union 2","status":"passed","title":"union 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return valid over invalid","status":"passed","title":"return valid over invalid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return errors from both union arms","status":"passed","title":"return errors from both union arms","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" options getter","status":"passed","title":"options getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly union","status":"passed","title":"readonly union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union inferred types","status":"passed","title":"union inferred types","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union values","status":"passed","title":"union values","duration":1,"failureMessages":[]}],"startTime":1756058612884,"endTime":1756058612895,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/union.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string length","status":"passed","title":"string length","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string min/max","status":"passed","title":"string min/max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string max","status":"passed","title":"string max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number min","status":"passed","title":"number min","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number gte","status":"passed","title":"number gte","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number gt","status":"passed","title":"number gt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number max","status":"passed","title":"number max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number lte","status":"passed","title":"number lte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number lt","status":"passed","title":"number lt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonnegative","status":"passed","title":"number nonnegative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonpositive","status":"passed","title":"number nonpositive","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number negative","status":"passed","title":"number negative","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number positive","status":"passed","title":"number positive","duration":0,"failureMessages":[]}],"startTime":1756058595829,"endTime":1756058595837,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/validations.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" void","status":"passed","title":"void","duration":2,"failureMessages":[]}],"startTime":1756058633782,"endTime":1756058633784,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/classic/tests/void.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test","status":"passed","title":"test","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test2","status":"passed","title":"test2","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation","status":"passed","title":"async validation","duration":2,"failureMessages":[]}],"startTime":1756058622530,"endTime":1756058622534,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/core/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability with type narrowing","status":"passed","title":"assignability with type narrowing","duration":0,"failureMessages":[]}],"startTime":1756058609738,"endTime":1756058609742,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/assignability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":2,"failureMessages":[]}],"startTime":1756058619100,"endTime":1756058619102,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/brand.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.lt","status":"passed","title":"z.lt","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lte","status":"passed","title":"z.lte","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.max","status":"passed","title":"z.max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.gt","status":"passed","title":"z.gt","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.gte","status":"passed","title":"z.gte","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.min","status":"passed","title":"z.min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.maxLength","status":"passed","title":"z.maxLength","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.minLength","status":"passed","title":"z.minLength","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.length","status":"passed","title":"z.length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.regex","status":"passed","title":"z.regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.includes","status":"passed","title":"z.includes","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.startsWith","status":"passed","title":"z.startsWith","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.endsWith","status":"passed","title":"z.endsWith","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lowercase","status":"passed","title":"z.lowercase","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uppercase","status":"passed","title":"z.uppercase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.overwrite","status":"passed","title":"z.overwrite","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" abort early","status":"passed","title":"abort early","duration":0,"failureMessages":[]}],"startTime":1756058605027,"endTime":1756058605034,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/checks.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" min/max","status":"passed","title":"min/max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multipleOf","status":"passed","title":"multipleOf","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int64 format","status":"passed","title":"int64 format","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int32 format","status":"passed","title":"int32 format","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array size","status":"passed","title":"array size","duration":1,"failureMessages":[]}],"startTime":1756058623764,"endTime":1756058623767,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/computed.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" no locale by default","status":"passed","title":"no locale by default","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error inheritance","status":"passed","title":"error inheritance","duration":0,"failureMessages":[]}],"startTime":1756058630385,"endTime":1756058630387,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/error.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.function","status":"passed","title":"z.function","duration":1,"failureMessages":[]}],"startTime":1756058622728,"endTime":1756058622729,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/functions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.boolean","status":"passed","title":"z.boolean","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.bigint","status":"passed","title":"z.bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.symbol","status":"passed","title":"z.symbol","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.date","status":"passed","title":"z.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.string","status":"passed","title":"z.coerce.string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.number","status":"passed","title":"z.coerce.number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.boolean","status":"passed","title":"z.coerce.boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.bigint","status":"passed","title":"z.coerce.bigint","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.date","status":"passed","title":"z.coerce.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.datetime","status":"passed","title":"z.iso.datetime","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.date","status":"passed","title":"z.iso.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.time","status":"passed","title":"z.iso.time","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.duration","status":"passed","title":"z.iso.duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.undefined","status":"passed","title":"z.undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.any","status":"passed","title":"z.any","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.unknown","status":"passed","title":"z.unknown","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.never","status":"passed","title":"z.never","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.void","status":"passed","title":"z.void","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.array","status":"passed","title":"z.array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.union","status":"passed","title":"z.union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.intersection","status":"passed","title":"z.intersection","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.tuple","status":"passed","title":"z.tuple","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.record","status":"passed","title":"z.record","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map","status":"passed","title":"z.map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map invalid_element","status":"passed","title":"z.map invalid_element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map async","status":"passed","title":"z.map async","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.set","status":"passed","title":"z.set","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum","status":"passed","title":"z.enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum - native","status":"passed","title":"z.enum - native","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nativeEnum","status":"passed","title":"z.nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.literal","status":"passed","title":"z.literal","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file","status":"passed","title":"z.file","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform async","status":"passed","title":"z.transform async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.preprocess","status":"passed","title":"z.preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.optional","status":"passed","title":"z.optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nullable","status":"passed","title":"z.nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.default","status":"passed","title":"z.default","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catch","status":"passed","title":"z.catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nan","status":"passed","title":"z.nan","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe","status":"passed","title":"z.pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.readonly","status":"passed","title":"z.readonly","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.templateLiteral","status":"passed","title":"z.templateLiteral","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom","status":"passed","title":"z.custom","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.check","status":"passed","title":"z.check","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.instanceof","status":"passed","title":"z.instanceof","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.refine","status":"passed","title":"z.refine","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.$brand()","status":"passed","title":"z.$brand()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lazy","status":"passed","title":"z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.json","status":"passed","title":"z.json","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringbool","status":"passed","title":"z.stringbool","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.promise","status":"passed","title":"z.promise","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe type enforcement","status":"passed","title":"z.pipe type enforcement","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" def typing","status":"passed","title":"def typing","duration":1,"failureMessages":[]}],"startTime":1756058584175,"endTime":1756058584222,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.number","status":"passed","title":"z.number","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.number async","status":"passed","title":"z.number async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int","status":"passed","title":"z.int","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.float32","status":"passed","title":"z.float32","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.float64","status":"passed","title":"z.float64","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int32","status":"passed","title":"z.int32","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uint32","status":"passed","title":"z.uint32","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int64","status":"passed","title":"z.int64","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uint64","status":"passed","title":"z.uint64","duration":0,"failureMessages":[]}],"startTime":1756058607286,"endTime":1756058607293,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.object","status":"passed","title":"z.object","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.object().check()","status":"passed","title":"z.object().check()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.strictObject","status":"passed","title":"z.strictObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.looseObject","status":"passed","title":"z.looseObject","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.keyof","status":"passed","title":"z.keyof","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.extend","status":"passed","title":"z.extend","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pick","status":"passed","title":"z.pick","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.omit","status":"passed","title":"z.omit","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.partial","status":"passed","title":"z.partial","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.partial with mask","status":"passed","title":"z.partial with mask","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catchall","status":"passed","title":"z.catchall","duration":0,"failureMessages":[]}],"startTime":1756058600345,"endTime":1756058600352,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":0,"failureMessages":[]}],"startTime":1756058626929,"endTime":1756058626931,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/prototypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion - native","status":"passed","title":"mutual recursion - native","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick and omit with getter","status":"passed","title":"pick and omit with getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred self-recursion","status":"passed","title":"deferred self-recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion compatibility","status":"passed","title":"recursion compatibility","duration":0,"failureMessages":[]}],"startTime":1756058599238,"endTime":1756058599243,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/recursive-types.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.string","status":"passed","title":"z.string","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.string with custom error","status":"passed","title":"z.string with custom error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inference in checks","status":"passed","title":"inference in checks","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.string async","status":"passed","title":"z.string async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uuid","status":"passed","title":"z.uuid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.email","status":"passed","title":"z.email","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url","status":"passed","title":"z.url","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with optional hostname regex","status":"passed","title":"z.url with optional hostname regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url - file urls","status":"passed","title":"z.url - file urls","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with optional protocol regex","status":"passed","title":"z.url with optional protocol regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with both hostname and protocol regexes","status":"passed","title":"z.url with both hostname and protocol regexes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with invalid regex patterns","status":"passed","title":"z.url with invalid regex patterns","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.emoji","status":"passed","title":"z.emoji","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nanoid","status":"passed","title":"z.nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.cuid","status":"passed","title":"z.cuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.cuid2","status":"passed","title":"z.cuid2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ulid","status":"passed","title":"z.ulid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.xid","status":"passed","title":"z.xid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ksuid","status":"passed","title":"z.ksuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ipv4","status":"passed","title":"z.ipv4","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ipv6","status":"passed","title":"z.ipv6","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.base64","status":"passed","title":"z.base64","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.e164","status":"passed","title":"z.e164","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.jwt","status":"passed","title":"z.jwt","duration":0,"failureMessages":[]}],"startTime":1756058588121,"endTime":1756058588136,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/mini/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" check any inference","status":"passed","title":"check any inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check unknown inference","status":"passed","title":"check unknown inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check never inference","status":"passed","title":"check never inference","duration":1,"failureMessages":[]}],"startTime":1756058630878,"endTime":1756058630881,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/anyunknown.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array min/max","status":"passed","title":"array min/max","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array length","status":"passed","title":"array length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array.nonempty()","status":"passed","title":"array.nonempty()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array.nonempty().max()","status":"passed","title":"array.nonempty().max()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse empty array in nonempty","status":"passed","title":"parse empty array in nonempty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get element","status":"passed","title":"get element","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue parsing despite array size error","status":"passed","title":"continue parsing despite array size error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array","status":"passed","title":"parse should fail given sparse array","duration":0,"failureMessages":[]}],"startTime":1756058594095,"endTime":1756058594103,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/array.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":7,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" checks","status":"passed","title":"checks","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability to $ZodType","status":"passed","title":"assignability to $ZodType","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability with narrowing","status":"passed","title":"assignability with narrowing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generic assignability in objects","status":"passed","title":"generic assignability in objects","duration":0,"failureMessages":[]}],"startTime":1756058595591,"endTime":1756058595599,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/assignability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string async parse","status":"passed","title":"string async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number async parse","status":"passed","title":"number async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigInt async parse","status":"passed","title":"bigInt async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean async parse","status":"passed","title":"boolean async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date async parse","status":"passed","title":"date async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined async parse","status":"passed","title":"undefined async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null async parse","status":"passed","title":"null async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" any async parse","status":"passed","title":"any async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown async parse","status":"passed","title":"unknown async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" void async parse","status":"passed","title":"void async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array async parse","status":"passed","title":"array async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object async parse","status":"passed","title":"object async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union async parse","status":"passed","title":"union async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" record async parse","status":"passed","title":"record async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal async parse","status":"passed","title":"literal async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum async parse","status":"passed","title":"enum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum async parse","status":"passed","title":"nativeEnum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse good","status":"passed","title":"promise async parse good","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse bad","status":"passed","title":"promise async parse bad","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation non-empty strings","status":"passed","title":"async validation non-empty strings","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 1","status":"passed","title":"async validation multiple errors 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 2","status":"passed","title":"async validation multiple errors 2","duration":508,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ensure early async failure prevents follow-up refinement checks","status":"passed","title":"ensure early async failure prevents follow-up refinement checks","duration":1,"failureMessages":[]}],"startTime":1756058586730,"endTime":1756058587246,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/async-parsing.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" async refine .parse()","status":"passed","title":"async refine .parse()","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine","status":"passed","title":"async refine","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine with Promises","status":"passed","title":"async refine with Promises","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine that uses value","status":"passed","title":"async refine that uses value","duration":1,"failureMessages":[]}],"startTime":1756058618518,"endTime":1756058618526,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/async-refinements.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test this binding","status":"passed","title":"test this binding","duration":2,"failureMessages":[]}],"startTime":1756058634304,"endTime":1756058634306,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/base.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]}],"startTime":1756058617416,"endTime":1756058617420,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/bigint.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" $branded","status":"passed","title":"$branded","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded record","status":"passed","title":"branded record","duration":1,"failureMessages":[]}],"startTime":1756058616403,"endTime":1756058616407,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/brand.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic catch","status":"passed","title":"basic catch","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch fn does not run when parsing succeeds","status":"passed","title":"catch fn does not run when parsing succeeds","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic catch async","status":"passed","title":"basic catch async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch replace wrong types","status":"passed","title":"catch replace wrong types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch with transform","status":"passed","title":"catch with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch on existing optional","status":"passed","title":"catch on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on catch","status":"passed","title":"optional on catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeCatch","status":"passed","title":"removeCatch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained catch","status":"passed","title":"chained catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" reported issues with nested usage","status":"passed","title":"reported issues with nested usage","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch error","status":"passed","title":"catch error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.input","status":"passed","title":"ctx.input","duration":0,"failureMessages":[]}],"startTime":1756058594388,"endTime":1756058594401,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/catch.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" coalesce","status":"passed","title":"coalesce","duration":1,"failureMessages":[]}],"startTime":1756058629344,"endTime":1756058629345,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/coalesce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string coercion","status":"passed","title":"string coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number coercion","status":"passed","title":"number coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean coercion","status":"passed","title":"boolean coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint coercion","status":"passed","title":"bigint coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date coercion","status":"passed","title":"date coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override input type","status":"passed","title":"override input type","duration":0,"failureMessages":[]}],"startTime":1756058591631,"endTime":1756058591637,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/coerce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" continuability","status":"passed","title":"continuability","duration":9,"failureMessages":[]}],"startTime":1756058592739,"endTime":1756058592748,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/continuability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string params","status":"passed","title":"string params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non-continuable by default","status":"passed","title":"non-continuable by default","duration":1,"failureMessages":[]}],"startTime":1756058622313,"endTime":1756058622317,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/custom.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]}],"startTime":1756058626375,"endTime":1756058626379,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/date.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url recheck (resolved id: recheck) in C:/Users/scale/Code/edgeql/EdgeQL/node_modules/.pnpm/zod@3.25.76/node_modules/zod/src/v4/classic/tests/datetime.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/datetime.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic defaults","status":"passed","title":"basic defaults","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with optional","status":"passed","title":"default with optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with transform","status":"passed","title":"default with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default on existing optional","status":"passed","title":"default on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on default","status":"passed","title":"optional on default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeDefault","status":"passed","title":"removeDefault","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" apply default at output","status":"passed","title":"apply default at output","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained defaults","status":"passed","title":"chained defaults","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object optionality","status":"passed","title":"object optionality","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested prefault/default","status":"passed","title":"nested prefault/default","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing default","status":"passed","title":"failing default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial should not clobber defaults","status":"passed","title":"partial should not clobber defaults","duration":1,"failureMessages":[]}],"startTime":1756058591894,"endTime":1756058591908,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/default.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .describe","status":"passed","title":".describe","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" adding description with z.globalRegistry","status":"passed","title":"adding description with z.globalRegistry","duration":0,"failureMessages":[]}],"startTime":1756058621628,"endTime":1756058621630,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/description.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" _values","status":"passed","title":"_values","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse - object","status":"passed","title":"valid parse - object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - include discriminator key (deprecated)","status":"passed","title":"valid - include discriminator key (deprecated)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - optional discriminator (object)","status":"passed","title":"valid - optional discriminator (object)","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - discriminator value of various primitive types","status":"passed","title":"valid - discriminator value of various primitive types","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid - null","status":"passed","title":"invalid - null","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value","status":"passed","title":"invalid discriminator value","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value - unionFallback","status":"passed","title":"invalid discriminator value - unionFallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid discriminator value, invalid data","status":"passed","title":"valid discriminator value, invalid data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - missing discriminator","status":"passed","title":"wrong schema - missing discriminator","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - valid","status":"passed","title":"async - valid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - invalid","status":"passed","title":"async - invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - literals with .default or .pipe","status":"passed","title":"valid - literals with .default or .pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum and nativeEnum","status":"passed","title":"enum and nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded","status":"passed","title":"branded","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional and nullable","status":"passed","title":"optional and nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple discriminators","status":"passed","title":"multiple discriminators","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" single element union","status":"passed","title":"single element union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested discriminated unions","status":"passed","title":"nested discriminated unions","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly literal discriminator","status":"passed","title":"readonly literal discriminator","duration":1,"failureMessages":[]}],"startTime":1756058585500,"endTime":1756058585525,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" enum from string array","status":"passed","title":"enum from string array","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from const object","status":"passed","title":"enum from const object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from native enum","status":"passed","title":"enum from native enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from native enum with numeric keys","status":"passed","title":"enum from native enum with numeric keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" issue metadata","status":"passed","title":"issue metadata","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from non-const inputs","status":"passed","title":"enum from non-const inputs","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get options","status":"passed","title":"get options","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly enum","status":"passed","title":"readonly enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map","status":"passed","title":"error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type signatures","status":"passed","title":"type signatures","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract","status":"passed","title":"extract","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" exclude","status":"passed","title":"exclude","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map inheritance","status":"passed","title":"error map inheritance","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly in ZodEnumDef","status":"passed","title":"readonly in ZodEnumDef","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid enum elementstring","status":"passed","title":"enum error message, invalid enum elementstring","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid type","status":"passed","title":"enum error message, invalid type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum default error message","status":"passed","title":"nativeEnum default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with message returns the custom error message","status":"passed","title":"enum with message returns the custom error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with diagonal keys","status":"passed","title":"enum with diagonal keys","duration":0,"failureMessages":[]}],"startTime":1756058589720,"endTime":1756058589728,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/enum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" regular error","status":"passed","title":"regular error","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .flatten()","status":"passed","title":".flatten()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom .flatten()","status":"passed","title":"custom .flatten()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .format()","status":"passed","title":".format()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom .format()","status":"passed","title":"custom .format()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" all errors","status":"passed","title":"all errors","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.treeifyError","status":"passed","title":"z.treeifyError","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.treeifyError 2","status":"passed","title":"z.treeifyError 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.prettifyError","status":"passed","title":"z.prettifyError","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.toDotPath","status":"passed","title":"z.toDotPath","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inheritance","status":"passed","title":"inheritance","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" disc union treeify/format","status":"passed","title":"disc union treeify/format","duration":1,"failureMessages":[]}],"startTime":1756058586483,"endTime":1756058586495,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/error-utils.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" error creation","status":"passed","title":"error creation","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" do not allow error and message together","status":"passed","title":"do not allow error and message together","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type error with custom error map","status":"passed","title":"type error with custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement fail with params","status":"passed","title":"refinement fail with params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" hard coded error  with custom errormap","status":"passed","title":"hard coded error  with custom errormap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default error message","status":"passed","title":"default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refine","status":"passed","title":"override error in refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refinement","status":"passed","title":"override error in refinement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array minimum","status":"passed","title":"array minimum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path in custom error map","status":"passed","title":"custom path in custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" root level formatting","status":"passed","title":"root level formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" no abort early on refinements","status":"passed","title":"no abort early on refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" detect issue with input fallback","status":"passed","title":"detect issue with input fallback","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting","status":"passed","title":"formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting with nullable and optional fields","status":"passed","title":"formatting with nullable and optional fields","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferFlattenedErrors","status":"passed","title":"inferFlattenedErrors","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema-bound error map","status":"passed","title":"schema-bound error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bound error map overrides contextual","status":"passed","title":"bound error map overrides contextual","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.config customError ","status":"passed","title":"z.config customError ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty string error message","status":"passed","title":"empty string error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont short circuit on continuable errors","status":"passed","title":"dont short circuit on continuable errors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string error params","status":"passed","title":"string error params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error inheritance","status":"passed","title":"error inheritance","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error serialization","status":"passed","title":"error serialization","duration":2,"failureMessages":[]}],"startTime":1756058584925,"endTime":1756058584948,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/error.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url @web-std/file (resolved id: @web-std/file) in C:/Users/scale/Code/edgeql/EdgeQL/node_modules/.pnpm/zod@3.25.76/node_modules/zod/src/v4/classic/tests/file.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/file.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" first party switch","status":"passed","title":"first party switch","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" $ZodSchemaTypes","status":"passed","title":"$ZodSchemaTypes","duration":0,"failureMessages":[]}],"startTime":1756058611150,"endTime":1756058611152,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/firstparty.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 1","status":"passed","title":"parsed function fail 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 2","status":"passed","title":"parsed function fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 1","status":"passed","title":"function inference 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" args method","status":"passed","title":"args method","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 2","status":"passed","title":"function inference 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid function run","status":"passed","title":"valid function run","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input validation error","status":"passed","title":"input validation error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array inputs","status":"passed","title":"array inputs","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output validation error","status":"passed","title":"output validation error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function with async refinements","status":"passed","title":"function with async refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non async function with async refinements should fail","status":"passed","title":"non async function with async refinements should fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extra parameters with rest","status":"passed","title":"extra parameters with rest","duration":1,"failureMessages":[]}],"startTime":1756058597722,"endTime":1756058597731,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/function.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" generics","status":"passed","title":"generics","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generics with optional","status":"passed","title":"generics with optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested no undefined","status":"passed","title":"nested no undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generic on output type","status":"passed","title":"generic on output type","duration":0,"failureMessages":[]}],"startTime":1756058616645,"endTime":1756058616649,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/generics.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.boolean","status":"passed","title":"z.boolean","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.bigint","status":"passed","title":"z.bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.symbol","status":"passed","title":"z.symbol","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.date","status":"passed","title":"z.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.string","status":"passed","title":"z.coerce.string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.number","status":"passed","title":"z.coerce.number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.boolean","status":"passed","title":"z.coerce.boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.bigint","status":"passed","title":"z.coerce.bigint","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.date","status":"passed","title":"z.coerce.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.datetime","status":"passed","title":"z.iso.datetime","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.date","status":"passed","title":"z.iso.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.time","status":"passed","title":"z.iso.time","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.duration","status":"passed","title":"z.iso.duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.undefined","status":"passed","title":"z.undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.any","status":"passed","title":"z.any","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.unknown","status":"passed","title":"z.unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.never","status":"passed","title":"z.never","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.void","status":"passed","title":"z.void","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.array","status":"passed","title":"z.array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.union","status":"passed","title":"z.union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.intersection","status":"passed","title":"z.intersection","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.tuple","status":"passed","title":"z.tuple","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.record","status":"passed","title":"z.record","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map","status":"passed","title":"z.map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map invalid_element","status":"passed","title":"z.map invalid_element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map async","status":"passed","title":"z.map async","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.set","status":"passed","title":"z.set","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum","status":"passed","title":"z.enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum - native","status":"passed","title":"z.enum - native","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nativeEnum","status":"passed","title":"z.nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.literal","status":"passed","title":"z.literal","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file","status":"passed","title":"z.file","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform async","status":"passed","title":"z.transform async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.preprocess","status":"passed","title":"z.preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.optional","status":"passed","title":"z.optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nullable","status":"passed","title":"z.nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.default","status":"passed","title":"z.default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catch","status":"passed","title":"z.catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nan","status":"passed","title":"z.nan","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe","status":"passed","title":"z.pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.readonly","status":"passed","title":"z.readonly","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.templateLiteral","status":"passed","title":"z.templateLiteral","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom schema","status":"passed","title":"z.custom schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom check","status":"passed","title":"z.custom check","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.check","status":"passed","title":"z.check","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.instanceof","status":"passed","title":"z.instanceof","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.refine","status":"passed","title":"z.refine","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.$brand()","status":"passed","title":"z.$brand()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lazy","status":"passed","title":"z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.json","status":"passed","title":"z.json","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.promise","status":"passed","title":"z.promise","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" isPlainObject","status":"passed","title":"isPlainObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" def typing","status":"passed","title":"def typing","duration":1,"failureMessages":[]}],"startTime":1756058584508,"endTime":1756058584546,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof fatal","status":"passed","title":"instanceof fatal","duration":1,"failureMessages":[]}],"startTime":1756058625152,"endTime":1756058625156,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/instanceof.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object intersection","status":"passed","title":"object intersection","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object intersection: loose","status":"passed","title":"object intersection: loose","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object intersection: strict","status":"passed","title":"object intersection: strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection","status":"passed","title":"deep intersection","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection of arrays","status":"passed","title":"deep intersection of arrays","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid intersection types","status":"passed","title":"invalid intersection types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge (incompatible lengths)","status":"passed","title":"invalid array merge (incompatible lengths)","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge (incompatible elements)","status":"passed","title":"invalid array merge (incompatible elements)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid object merge","status":"passed","title":"invalid object merge","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid deep merge of object and array combination","status":"passed","title":"invalid deep merge of object and array combination","duration":0,"failureMessages":[]}],"startTime":1756058601883,"endTime":1756058601893,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/intersection.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" <anonymous>","status":"passed","title":"<anonymous>","duration":1,"failureMessages":[]}],"startTime":1756058609465,"endTime":1756058609466,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/json.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" opt passthrough","status":"passed","title":"opt passthrough","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema getter","status":"passed","title":"schema getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lazy proxy","status":"passed","title":"lazy proxy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursive union wit z.lazy","status":"passed","title":"recursive union wit z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with lazy","status":"passed","title":"mutual recursion with lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with cyclical data","status":"passed","title":"mutual recursion with cyclical data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complicated self-recursion","status":"passed","title":"complicated self-recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lazy initialization","status":"passed","title":"lazy initialization","duration":1,"failureMessages":[]}],"startTime":1756058602329,"endTime":1756058602337,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/lazy.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should have `input` field with data","status":"passed","title":"invalid_literal should have `input` field with data","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should return default message","status":"passed","title":"invalid_literal should return default message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should return custom message","status":"passed","title":"invalid_literal should return custom message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal default error message","status":"passed","title":"literal default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .value getter","status":"passed","title":".value getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly","status":"passed","title":"readonly","duration":0,"failureMessages":[]}],"startTime":1756058613644,"endTime":1756058613649,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/literal.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Set is given","status":"passed","title":"throws when a Set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has invalid key and invalid input","status":"passed","title":"throws when the given map has invalid key and invalid input","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has multiple invalid entries","status":"passed","title":"throws when the given map has multiple invalid entries","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dirty","status":"passed","title":"dirty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" map with object keys","status":"passed","title":"map with object keys","duration":1,"failureMessages":[]}],"startTime":1756058601151,"endTime":1756058601158,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/map.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]}],"startTime":1756058630147,"endTime":1756058630149,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/nan.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nested refinements","status":"passed","title":"nested refinements","duration":6,"failureMessages":[]}],"startTime":1756058607811,"endTime":1756058607817,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/nested-refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nonoptional","status":"passed","title":"nonoptional","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonoptional with default","status":"passed","title":"nonoptional with default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonoptional in object","status":"passed","title":"nonoptional in object","duration":1,"failureMessages":[]}],"startTime":1756058614348,"endTime":1756058614353,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/nonoptional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .nullable()","status":"passed","title":".nullable()","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nullable unwrap","status":"passed","title":".nullable unwrap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":1,"failureMessages":[]}],"startTime":1756058631608,"endTime":1756058631612,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/nullable.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.number() basic validation","status":"passed","title":"z.number() basic validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" NaN validation","status":"passed","title":"NaN validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" Infinity validation","status":"passed","title":"Infinity validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .gt() validation","status":"passed","title":".gt() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .gte() validation","status":"passed","title":".gte() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .min() validation","status":"passed","title":".min() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .lt() validation","status":"passed","title":".lt() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .lte() validation","status":"passed","title":".lte() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .max() validation","status":"passed","title":".max() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .int() validation","status":"passed","title":".int() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .positive() validation","status":"passed","title":".positive() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .negative() validation","status":"passed","title":".negative() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nonpositive() validation","status":"passed","title":".nonpositive() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nonnegative() validation","status":"passed","title":".nonnegative() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .multipleOf() with positive divisor","status":"passed","title":".multipleOf() with positive divisor","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .multipleOf() with negative divisor","status":"passed","title":".multipleOf() with negative divisor","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .step() validation","status":"passed","title":".step() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .finite() validation","status":"passed","title":".finite() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .safe() validation","status":"passed","title":".safe() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min value getters","status":"passed","title":"min value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" max value getters","status":"passed","title":"max value getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int getter","status":"passed","title":"int getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" finite getter","status":"passed","title":"finite getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string format methods","status":"passed","title":"string format methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error customization","status":"passed","title":"error customization","duration":0,"failureMessages":[]}],"startTime":1756058591158,"endTime":1756058591170,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object type inference","status":"passed","title":"object type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown throw","status":"passed","title":"unknown throw","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shape() should return schema of particular key","status":"passed","title":"shape() should return schema of particular key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" correct parsing","status":"passed","title":"correct parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict by default","status":"passed","title":"nonstrict by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse optional keys ","status":"passed","title":"parse optional keys ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty object","status":"passed","title":"empty object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip by default","status":"passed","title":"strip by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys override","status":"passed","title":"unknownkeys override","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough unknown","status":"passed","title":"passthrough unknown","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip unknown","status":"passed","title":"strip unknown","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict","status":"passed","title":"strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall inference","status":"passed","title":"catchall inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional keys are unset","status":"passed","title":"optional keys are unset","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall parsing","status":"passed","title":"catchall parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonexistent keys","status":"passed","title":"nonexistent keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test async union","status":"passed","title":"test async union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test inferred merged type","status":"passed","title":"test inferred merged type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type with Record shape","status":"passed","title":"inferred type with Record shape","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred merged object type with optional properties","status":"passed","title":"inferred merged object type with optional properties","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred unioned object type with optional properties","status":"passed","title":"inferred unioned object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred enum type","status":"passed","title":"inferred enum type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred partial object type with optional properties","status":"passed","title":"inferred partial object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred picked object type with optional properties","status":"passed","title":"inferred picked object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type for unknown/any keys","status":"passed","title":"inferred type for unknown/any keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strictObject","status":"passed","title":"strictObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object with refine","status":"passed","title":"object with refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with date","status":"passed","title":"intersection of object with date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with refine with date","status":"passed","title":"intersection of object with refine with date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall","status":"passed","title":"catchall","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys merging","status":"passed","title":"unknownkeys merging","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should return schema with new key","status":"passed","title":"extend() should return schema with new key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should have power to override existing key","status":"passed","title":"extend() should have power to override existing key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough index signature","status":"passed","title":"passthrough index signature","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null prototype","status":"passed","title":"null prototype","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty objects","status":"passed","title":"empty objects","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preserve key order","status":"passed","title":"preserve key order","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty shape","status":"passed","title":"empty shape","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" zodtype assignability","status":"passed","title":"zodtype assignability","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" index signature in shape","status":"passed","title":"index signature in shape","duration":0,"failureMessages":[]}],"startTime":1756058585841,"endTime":1756058585866,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .optional()","status":"passed","title":".optional()","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optionality","status":"passed","title":"optionality","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe optionality","status":"passed","title":"pipe optionality","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe optionality inside objects","status":"passed","title":"pipe optionality inside objects","duration":1,"failureMessages":[]}],"startTime":1756058604411,"endTime":1756058604418,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/optional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" shallow inference","status":"passed","title":"shallow inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shallow partial parse","status":"passed","title":"shallow partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required","status":"passed","title":"required","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required inference","status":"passed","title":"required inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask","status":"passed","title":"required with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask -- ignore falsy values","status":"passed","title":"required with mask -- ignore falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask","status":"passed","title":"partial with mask","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask -- ignore falsy values","status":"passed","title":"partial with mask -- ignore falsy values","duration":0,"failureMessages":[]}],"startTime":1756058600813,"endTime":1756058600818,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/partial.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" pick type inference","status":"passed","title":"pick type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - success","status":"passed","title":"pick parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - fail","status":"passed","title":"pick parse - fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick - remove optional","status":"passed","title":"pick - remove optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit type inference","status":"passed","title":"omit type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - success","status":"passed","title":"omit parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - fail","status":"passed","title":"omit parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit - remove optional","status":"passed","title":"omit - remove optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict inference","status":"passed","title":"nonstrict inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - pass","status":"passed","title":"nonstrict parsing - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - fail","status":"passed","title":"nonstrict parsing - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick/omit/required/partial - do not allow unknown keys","status":"passed","title":"pick/omit/required/partial - do not allow unknown keys","duration":1,"failureMessages":[]}],"startTime":1756058603826,"endTime":1756058603834,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/pickomit.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string to number pipe","status":"passed","title":"string to number pipe","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string to number pipe async","status":"passed","title":"string to number pipe async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string with default fallback","status":"passed","title":"string with default fallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue on non-fatal errors","status":"passed","title":"continue on non-fatal errors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" break on fatal errors","status":"passed","title":"break on fatal errors","duration":0,"failureMessages":[]}],"startTime":1756058618823,"endTime":1756058618829,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/pipe.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic prefault","status":"passed","title":"basic prefault","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" prefault inside object","status":"passed","title":"prefault inside object","duration":2,"failureMessages":[]}],"startTime":1756058625650,"endTime":1756058625655,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/prefault.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" preprocess","status":"passed","title":"preprocess","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess","status":"passed","title":"async preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.addIssue accepts string","status":"passed","title":"ctx.addIssue accepts string","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parse","status":"passed","title":"preprocess ctx.addIssue with parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue non-fatal by default","status":"passed","title":"preprocess ctx.addIssue non-fatal by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue fatal true","status":"passed","title":"preprocess ctx.addIssue fatal true","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess ctx.addIssue with parseAsync","status":"passed","title":"async preprocess ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in preprocess","status":"passed","title":"z.NEVER in preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess as the second property of object","status":"passed","title":"preprocess as the second property of object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess validates with sibling errors","status":"passed","title":"preprocess validates with sibling errors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" perform transform with non-fatal issues","status":"passed","title":"perform transform with non-fatal issues","duration":1,"failureMessages":[]}],"startTime":1756058595112,"endTime":1756058595126,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/preprocess.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" literal string schema","status":"passed","title":"literal string schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number schema","status":"passed","title":"literal number schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean schema","status":"passed","title":"literal boolean schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint schema","status":"passed","title":"literal bigint schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string schema","status":"passed","title":"string schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number schema","status":"passed","title":"number schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint schema","status":"passed","title":"bigint schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean schema","status":"passed","title":"boolean schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date schema","status":"passed","title":"date schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" symbol schema","status":"passed","title":"symbol schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined schema","status":"passed","title":"undefined schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null schema","status":"passed","title":"null schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" primitive inference","status":"passed","title":"primitive inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get literal values","status":"passed","title":"get literal values","duration":0,"failureMessages":[]}],"startTime":1756058592426,"endTime":1756058592435,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/primitive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" promise inference","status":"passed","title":"promise inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success","status":"passed","title":"promise parsing success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail 2","status":"passed","title":"promise parsing fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync promise parsing","status":"passed","title":"sync promise parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function pass","status":"passed","title":"async function pass","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function fail","status":"passed","title":"async function fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async promise parsing","status":"passed","title":"async promise parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" resolves","status":"passed","title":"resolves","duration":0,"failureMessages":[]}],"startTime":1756058615911,"endTime":1756058615921,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/promise.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":2,"failureMessages":[]}],"startTime":1756058632759,"endTime":1756058632761,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/prototypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" flat inference","status":"passed","title":"flat inference","duration":7,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object freezing","status":"passed","title":"object freezing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async object freezing","status":"passed","title":"async object freezing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly inference","status":"passed","title":"readonly inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly parse","status":"passed","title":"readonly parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly parse with tuples","status":"passed","title":"readonly parse with tuples","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly and the get method","status":"passed","title":"readonly and the get method","duration":1,"failureMessages":[]}],"startTime":1756058587563,"endTime":1756058587576,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/readonly.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum exhaustiveness","status":"passed","title":"enum exhaustiveness","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal exhaustiveness","status":"passed","title":"literal exhaustiveness","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe exhaustiveness","status":"passed","title":"pipe exhaustiveness","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union exhaustiveness","status":"passed","title":"union exhaustiveness","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - pass","status":"passed","title":"string record parse - pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key and value getters","status":"passed","title":"key and value getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" is not vulnerable to prototype pollution","status":"passed","title":"is not vulnerable to prototype pollution","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont remove undefined values","status":"passed","title":"dont remove undefined values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" allow undefined values","status":"passed","title":"allow undefined values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async parsing","status":"passed","title":"async parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async parsing","status":"passed","title":"async parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial record","status":"passed","title":"partial record","duration":0,"failureMessages":[]}],"startTime":1756058590872,"endTime":1756058590883,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/record.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":8,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion - native","status":"passed","title":"mutual recursion - native","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick and omit with getter","status":"passed","title":"pick and omit with getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred self-recursion","status":"passed","title":"deferred self-recursion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred mutual recursion","status":"passed","title":"deferred mutual recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with meta","status":"passed","title":"mutual recursion with meta","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion compatibility","status":"passed","title":"recursion compatibility","duration":0,"failureMessages":[]}],"startTime":1756058593585,"endTime":1756058593599,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/recursive-types.test.ts"},{"assertionResults":[{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should create a new schema instance when refining","status":"passed","title":"should create a new schema instance when refining","duration":5,"failureMessages":[]},{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should validate according to refinement logic","status":"passed","title":"should validate according to refinement logic","duration":3,"failureMessages":[]},{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should validate strict mode correctly","status":"passed","title":"should validate strict mode correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","refinement with custom error messages"],"fullName":" refinement with custom error messages should use custom error message when validation fails","status":"passed","title":"should use custom error message when validation fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","async refinements"],"fullName":" async refinements should support async refinement functions","status":"passed","title":"should support async refinement functions","duration":1,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with continue: false","status":"passed","title":"should abort early with continue: false","duration":0,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with fatal: true","status":"passed","title":"should abort early with fatal: true","duration":1,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with abort flag","status":"passed","title":"should abort early with abort flag","duration":0,"failureMessages":[]},{"ancestorTitles":["","custom error paths"],"fullName":" custom error paths should use custom path in error message","status":"passed","title":"should use custom path in error message","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should support multiple validation rules","status":"passed","title":"should support multiple validation rules","duration":0,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should support async superRefine","status":"passed","title":"should support async superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should accept string as shorthand for custom error message","status":"passed","title":"should accept string as shorthand for custom error message","duration":0,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should respect fatal flag in superRefine","status":"passed","title":"should respect fatal flag in superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":["","chained refinements"],"fullName":" chained refinements should collect all validation errors when appropriate","status":"passed","title":"should collect all validation errors when appropriate","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" when","status":"passed","title":"when","duration":2,"failureMessages":[]}],"startTime":1756058586001,"endTime":1756058586019,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" globalRegistry","status":"passed","title":"globalRegistry","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry","status":"passed","title":"z.registry","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry no metadata","status":"passed","title":"z.registry no metadata","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry with schema constraints","status":"passed","title":"z.registry with schema constraints","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output type in registry meta","status":"passed","title":"output type in registry meta","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output type in registry meta - objects and arrays","status":"passed","title":"output type in registry meta - objects and arrays","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type in registry meta","status":"passed","title":"input type in registry meta","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type in registry meta - objects and arrays","status":"passed","title":"input type in registry meta - objects and arrays","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .meta method","status":"passed","title":".meta method","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .meta metadata does not bubble up","status":"passed","title":".meta metadata does not bubble up","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .describe","status":"passed","title":".describe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inherit across clone","status":"passed","title":"inherit across clone","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" loose examples","status":"passed","title":"loose examples","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function meta witout replacement","status":"passed","title":"function meta witout replacement","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function meta with replacement","status":"passed","title":"function meta with replacement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test .clear()","status":"passed","title":"test .clear()","duration":0,"failureMessages":[]}],"startTime":1756058598593,"endTime":1756058598601,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/registries.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse: size-related methods","status":"passed","title":"valid parse: size-related methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when parsing empty set in nonempty ","status":"passed","title":"failing when parsing empty set in nonempty ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is smaller than min() ","status":"passed","title":"failing when set is smaller than min() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is bigger than max() ","status":"passed","title":"failing when set is bigger than max() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when an empty set is given","status":"passed","title":"doesn’t throw when an empty set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Map is given","status":"passed","title":"throws when a Map is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has invalid input","status":"passed","title":"throws when the given set has invalid input","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has multiple invalid entries","status":"passed","title":"throws when the given set has multiple invalid entries","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min/max","status":"passed","title":"min/max","duration":1,"failureMessages":[]}],"startTime":1756058599752,"endTime":1756058599760,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/set.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":0,"failureMessages":[]}],"startTime":1756058620931,"endTime":1756058620935,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/standard-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string format methods","status":"passed","title":"string format methods","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringFormat","status":"passed","title":"z.stringFormat","duration":3,"failureMessages":[]}],"startTime":1756058610553,"endTime":1756058610559,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/string-formats.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" includes","status":"passed","title":"includes","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" startswith/endswith","status":"passed","title":"startswith/endswith","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" email validations","status":"passed","title":"email validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 validations","status":"passed","title":"base64 validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url validations","status":"passed","title":"base64url validations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" big base64 and base64url","status":"passed","title":"big base64 and base64url","duration":121,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" jwt token","status":"passed","title":"jwt token","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url validations","status":"passed","title":"url validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" httpurl","status":"passed","title":"httpurl","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url error overrides","status":"passed","title":"url error overrides","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" emoji validations","status":"passed","title":"emoji validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nanoid","status":"passed","title":"nanoid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad nanoid","status":"passed","title":"bad nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" good uuid","status":"passed","title":"good uuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad uuid","status":"passed","title":"bad uuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" good guid","status":"passed","title":"good guid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad guid","status":"passed","title":"bad guid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid","status":"passed","title":"cuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid2","status":"passed","title":"cuid2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ulid","status":"passed","title":"ulid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" xid","status":"passed","title":"xid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ksuid","status":"passed","title":"ksuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex","status":"passed","title":"regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error message","status":"passed","title":"regexp error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error custom message","status":"passed","title":"regexp error custom message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex lastIndex reset","status":"passed","title":"regex lastIndex reset","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" format","status":"passed","title":"format","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" trim","status":"passed","title":"trim","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lowerCase","status":"passed","title":"lowerCase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IPv4 validation","status":"passed","title":"IPv4 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IPv6 validation","status":"passed","title":"IPv6 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR v4 validation","status":"passed","title":"CIDR v4 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR v6 validation","status":"passed","title":"CIDR v6 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" E.164 validation","status":"passed","title":"E.164 validation","duration":0,"failureMessages":[]}],"startTime":1756058583262,"endTime":1756058583416,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.stringbool","status":"passed","title":"z.stringbool","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom values","status":"passed","title":"custom values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom values - case sensitive","status":"passed","title":"custom values - case sensitive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringbool with custom error messages","status":"passed","title":"z.stringbool with custom error messages","duration":1,"failureMessages":[]}],"startTime":1756058615596,"endTime":1756058615603,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/stringbool.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" template literal type inference","status":"passed","title":"template literal type inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal unsupported args","status":"passed","title":"template literal unsupported args","duration":7,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - success - basic cases","status":"passed","title":"template literal parsing - success - basic cases","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - basic cases","status":"passed","title":"template literal parsing - failure - basic cases","duration":9,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexes","status":"passed","title":"regexes","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - success - complex cases","status":"passed","title":"template literal parsing - success - complex cases","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - complex cases","status":"passed","title":"template literal parsing - failure - complex cases","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - issue format","status":"passed","title":"template literal parsing - failure - issue format","duration":1,"failureMessages":[]}],"startTime":1756058583824,"endTime":1756058583851,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/template-literal.test.ts"},{"assertionResults":[{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema primitive types","status":"passed","title":"primitive types","duration":13,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema unsupported schema types","status":"passed","title":"unsupported schema types","duration":4,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema string formats","status":"passed","title":"string formats","duration":2,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema string patterns","status":"passed","title":"string patterns","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema number constraints","status":"passed","title":"number constraints","duration":2,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema arrays","status":"passed","title":"arrays","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema unions","status":"passed","title":"unions","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema intersections","status":"passed","title":"intersections","duration":3,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema record","status":"passed","title":"record","duration":2,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema tuple","status":"passed","title":"tuple","duration":3,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema promise","status":"passed","title":"promise","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema lazy","status":"passed","title":"lazy","duration":4,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema enum","status":"passed","title":"enum","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema literal","status":"passed","title":"literal","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema pipe","status":"passed","title":"pipe","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema simple objects","status":"passed","title":"simple objects","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema additionalproperties in z.object","status":"passed","title":"additionalproperties in z.object","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema catchall objects","status":"passed","title":"catchall objects","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema optional fields - object","status":"passed","title":"optional fields - object","duration":2,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema recursive object","status":"passed","title":"recursive object","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema simple interface","status":"passed","title":"simple interface","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema catchall interface","status":"passed","title":"catchall interface","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema recursive interface schemas","status":"passed","title":"recursive interface schemas","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema mutually recursive interface schemas","status":"passed","title":"mutually recursive interface schemas","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override","status":"passed","title":"override","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override: do not run on references","status":"passed","title":"override: do not run on references","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override with refs","status":"passed","title":"override with refs","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override execution order","status":"passed","title":"override execution order","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override with path","status":"passed","title":"override with path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe","status":"passed","title":"pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough schemas","status":"passed","title":"passthrough schemas","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract schemas with id","status":"passed","title":"extract schemas with id","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unrepresentable literal values are ignored","status":"passed","title":"unrepresentable literal values are ignored","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" describe with id","status":"passed","title":"describe with id","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overwrite id","status":"passed","title":"overwrite id","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overwrite descriptions","status":"passed","title":"overwrite descriptions","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" top-level readonly","status":"passed","title":"top-level readonly","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic registry","status":"passed","title":"basic registry","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" _ref","status":"passed","title":"_ref","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" defaults/prefaults","status":"passed","title":"defaults/prefaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type","status":"passed","title":"input type","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" examples on pipe","status":"passed","title":"examples on pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" use output type for preprocess","status":"passed","title":"use output type for preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" flatten simple intersections","status":"passed","title":"flatten simple intersections","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file()","status":"passed","title":"z.file()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom toJSONSchema","status":"passed","title":"custom toJSONSchema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cycle detection - root","status":"passed","title":"cycle detection - root","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cycle detection - mutual recursion","status":"passed","title":"cycle detection - mutual recursion","duration":0,"failureMessages":[]}],"startTime":1756058583406,"endTime":1756058583469,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parse","status":"passed","title":"transform ctx.addIssue with parse","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parseAsync","status":"passed","title":"transform ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in transform","status":"passed","title":"z.NEVER in transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic transformations","status":"passed","title":"basic transformations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" coercion","status":"passed","title":"coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async coercion","status":"passed","title":"async coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync coercion async error","status":"passed","title":"sync coercion async error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default","status":"passed","title":"default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dynamic default","status":"passed","title":"dynamic default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default when property is null or undefined","status":"passed","title":"default when property is null or undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with falsy values","status":"passed","title":"default with falsy values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object typing","status":"passed","title":"object typing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform method overloads","status":"passed","title":"transform method overloads","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple transformers","status":"passed","title":"multiple transformers","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" short circuit on dirty","status":"passed","title":"short circuit on dirty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async short circuit on dirty","status":"passed","title":"async short circuit on dirty","duration":0,"failureMessages":[]}],"startTime":1756058598125,"endTime":1756058598138,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/transform.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" successful validation","status":"passed","title":"successful validation","duration":6,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation","status":"passed","title":"async validation","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with optional elements","status":"passed","title":"tuple with optional elements","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with optional elements followed by required","status":"passed","title":"tuple with optional elements followed by required","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with rest schema","status":"passed","title":"tuple with rest schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sparse array input","status":"passed","title":"sparse array input","duration":0,"failureMessages":[]}],"startTime":1756058603093,"endTime":1756058603105,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/tuple.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union 2","status":"passed","title":"union 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return valid over invalid","status":"passed","title":"return valid over invalid","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return errors from both union arms","status":"passed","title":"return errors from both union arms","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" options getter","status":"passed","title":"options getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly union","status":"passed","title":"readonly union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union inferred types","status":"passed","title":"union inferred types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union values","status":"passed","title":"union values","duration":1,"failureMessages":[]}],"startTime":1756058612940,"endTime":1756058612953,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/union.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string length","status":"passed","title":"string length","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string min/max","status":"passed","title":"string min/max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string max","status":"passed","title":"string max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number min","status":"passed","title":"number min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number gte","status":"passed","title":"number gte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number gt","status":"passed","title":"number gt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number max","status":"passed","title":"number max","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number lte","status":"passed","title":"number lte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number lt","status":"passed","title":"number lt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonnegative","status":"passed","title":"number nonnegative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonpositive","status":"passed","title":"number nonpositive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number negative","status":"passed","title":"number negative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number positive","status":"passed","title":"number positive","duration":0,"failureMessages":[]}],"startTime":1756058595887,"endTime":1756058595897,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/validations.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" void","status":"passed","title":"void","duration":2,"failureMessages":[]}],"startTime":1756058633798,"endTime":1756058633800,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/classic/tests/void.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability with type narrowing","status":"passed","title":"assignability with type narrowing","duration":0,"failureMessages":[]}],"startTime":1756058609896,"endTime":1756058609900,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/assignability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":4,"failureMessages":[]}],"startTime":1756058619342,"endTime":1756058619346,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/brand.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.lt","status":"passed","title":"z.lt","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lte","status":"passed","title":"z.lte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.max","status":"passed","title":"z.max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.gt","status":"passed","title":"z.gt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.gte","status":"passed","title":"z.gte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.min","status":"passed","title":"z.min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.maxLength","status":"passed","title":"z.maxLength","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.minLength","status":"passed","title":"z.minLength","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.length","status":"passed","title":"z.length","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.regex","status":"passed","title":"z.regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.includes","status":"passed","title":"z.includes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.startsWith","status":"passed","title":"z.startsWith","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.endsWith","status":"passed","title":"z.endsWith","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lowercase","status":"passed","title":"z.lowercase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uppercase","status":"passed","title":"z.uppercase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.overwrite","status":"passed","title":"z.overwrite","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" abort early","status":"passed","title":"abort early","duration":0,"failureMessages":[]}],"startTime":1756058605024,"endTime":1756058605032,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/checks.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" min/max","status":"passed","title":"min/max","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multipleOf","status":"passed","title":"multipleOf","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int64 format","status":"passed","title":"int64 format","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int32 format","status":"passed","title":"int32 format","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array size","status":"passed","title":"array size","duration":1,"failureMessages":[]}],"startTime":1756058623779,"endTime":1756058623783,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/computed.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" no locale by default","status":"passed","title":"no locale by default","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error inheritance","status":"passed","title":"error inheritance","duration":0,"failureMessages":[]}],"startTime":1756058630626,"endTime":1756058630628,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/error.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.function","status":"passed","title":"z.function","duration":1,"failureMessages":[]}],"startTime":1756058622740,"endTime":1756058622741,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/functions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.boolean","status":"passed","title":"z.boolean","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.bigint","status":"passed","title":"z.bigint","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.symbol","status":"passed","title":"z.symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.date","status":"passed","title":"z.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.string","status":"passed","title":"z.coerce.string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.number","status":"passed","title":"z.coerce.number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.boolean","status":"passed","title":"z.coerce.boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.bigint","status":"passed","title":"z.coerce.bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.date","status":"passed","title":"z.coerce.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.datetime","status":"passed","title":"z.iso.datetime","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.date","status":"passed","title":"z.iso.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.time","status":"passed","title":"z.iso.time","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.duration","status":"passed","title":"z.iso.duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.undefined","status":"passed","title":"z.undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.any","status":"passed","title":"z.any","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.unknown","status":"passed","title":"z.unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.never","status":"passed","title":"z.never","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.void","status":"passed","title":"z.void","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.array","status":"passed","title":"z.array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.union","status":"passed","title":"z.union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.intersection","status":"passed","title":"z.intersection","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.tuple","status":"passed","title":"z.tuple","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.record","status":"passed","title":"z.record","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map","status":"passed","title":"z.map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map invalid_element","status":"passed","title":"z.map invalid_element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map async","status":"passed","title":"z.map async","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.set","status":"passed","title":"z.set","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum","status":"passed","title":"z.enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum - native","status":"passed","title":"z.enum - native","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nativeEnum","status":"passed","title":"z.nativeEnum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.literal","status":"passed","title":"z.literal","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file","status":"passed","title":"z.file","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform async","status":"passed","title":"z.transform async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.preprocess","status":"passed","title":"z.preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.optional","status":"passed","title":"z.optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nullable","status":"passed","title":"z.nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.default","status":"passed","title":"z.default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catch","status":"passed","title":"z.catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nan","status":"passed","title":"z.nan","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe","status":"passed","title":"z.pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.readonly","status":"passed","title":"z.readonly","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.templateLiteral","status":"passed","title":"z.templateLiteral","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom","status":"passed","title":"z.custom","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.check","status":"passed","title":"z.check","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.instanceof","status":"passed","title":"z.instanceof","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.refine","status":"passed","title":"z.refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.$brand()","status":"passed","title":"z.$brand()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lazy","status":"passed","title":"z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.json","status":"passed","title":"z.json","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringbool","status":"passed","title":"z.stringbool","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.promise","status":"passed","title":"z.promise","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe type enforcement","status":"passed","title":"z.pipe type enforcement","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" def typing","status":"passed","title":"def typing","duration":1,"failureMessages":[]}],"startTime":1756058584215,"endTime":1756058584252,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.number","status":"passed","title":"z.number","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.number async","status":"passed","title":"z.number async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int","status":"passed","title":"z.int","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.float32","status":"passed","title":"z.float32","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.float64","status":"passed","title":"z.float64","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int32","status":"passed","title":"z.int32","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uint32","status":"passed","title":"z.uint32","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int64","status":"passed","title":"z.int64","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uint64","status":"passed","title":"z.uint64","duration":1,"failureMessages":[]}],"startTime":1756058607296,"endTime":1756058607304,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.object","status":"passed","title":"z.object","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.object().check()","status":"passed","title":"z.object().check()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.strictObject","status":"passed","title":"z.strictObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.looseObject","status":"passed","title":"z.looseObject","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.keyof","status":"passed","title":"z.keyof","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.extend","status":"passed","title":"z.extend","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pick","status":"passed","title":"z.pick","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.omit","status":"passed","title":"z.omit","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.partial","status":"passed","title":"z.partial","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.partial with mask","status":"passed","title":"z.partial with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catchall","status":"passed","title":"z.catchall","duration":1,"failureMessages":[]}],"startTime":1756058600441,"endTime":1756058600448,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":0,"failureMessages":[]}],"startTime":1756058627113,"endTime":1756058627115,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/prototypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion - native","status":"passed","title":"mutual recursion - native","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick and omit with getter","status":"passed","title":"pick and omit with getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred self-recursion","status":"passed","title":"deferred self-recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion compatibility","status":"passed","title":"recursion compatibility","duration":0,"failureMessages":[]}],"startTime":1756058599325,"endTime":1756058599330,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/recursive-types.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.string","status":"passed","title":"z.string","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.string with custom error","status":"passed","title":"z.string with custom error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inference in checks","status":"passed","title":"inference in checks","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.string async","status":"passed","title":"z.string async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uuid","status":"passed","title":"z.uuid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.email","status":"passed","title":"z.email","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url","status":"passed","title":"z.url","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with optional hostname regex","status":"passed","title":"z.url with optional hostname regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url - file urls","status":"passed","title":"z.url - file urls","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with optional protocol regex","status":"passed","title":"z.url with optional protocol regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with both hostname and protocol regexes","status":"passed","title":"z.url with both hostname and protocol regexes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with invalid regex patterns","status":"passed","title":"z.url with invalid regex patterns","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.emoji","status":"passed","title":"z.emoji","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nanoid","status":"passed","title":"z.nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.cuid","status":"passed","title":"z.cuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.cuid2","status":"passed","title":"z.cuid2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ulid","status":"passed","title":"z.ulid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.xid","status":"passed","title":"z.xid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ksuid","status":"passed","title":"z.ksuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ipv4","status":"passed","title":"z.ipv4","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ipv6","status":"passed","title":"z.ipv6","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.base64","status":"passed","title":"z.base64","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.e164","status":"passed","title":"z.e164","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.jwt","status":"passed","title":"z.jwt","duration":0,"failureMessages":[]}],"startTime":1756058588129,"endTime":1756058588145,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/mini/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test","status":"passed","title":"test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test2","status":"passed","title":"test2","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation","status":"passed","title":"async validation","duration":2,"failureMessages":[]}],"startTime":1756058622972,"endTime":1756058622977,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/core/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 1 array","status":"passed","title":"correctly pluralizes 1 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 2 array","status":"passed","title":"correctly pluralizes 2 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 5 array","status":"passed","title":"correctly pluralizes 5 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 11 array","status":"passed","title":"correctly pluralizes 11 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 21 array","status":"passed","title":"correctly pluralizes 21 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 22 array","status":"passed","title":"correctly pluralizes 22 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 25 array","status":"passed","title":"correctly pluralizes 25 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 101 array","status":"passed","title":"correctly pluralizes 101 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 111 array","status":"passed","title":"correctly pluralizes 111 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 1 set","status":"passed","title":"correctly pluralizes 1 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 2 set","status":"passed","title":"correctly pluralizes 2 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 5 set","status":"passed","title":"correctly pluralizes 5 set","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 11 set","status":"passed","title":"correctly pluralizes 11 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 21 set","status":"passed","title":"correctly pluralizes 21 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 22 set","status":"passed","title":"correctly pluralizes 22 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 25 set","status":"passed","title":"correctly pluralizes 25 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 101 set","status":"passed","title":"correctly pluralizes 101 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 111 set","status":"passed","title":"correctly pluralizes 111 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 1 string","status":"passed","title":"correctly pluralizes 1 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 2 string","status":"passed","title":"correctly pluralizes 2 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 5 string","status":"passed","title":"correctly pluralizes 5 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 11 string","status":"passed","title":"correctly pluralizes 11 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 21 string","status":"passed","title":"correctly pluralizes 21 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 22 string","status":"passed","title":"correctly pluralizes 22 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 25 string","status":"passed","title":"correctly pluralizes 25 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 0 file","status":"passed","title":"correctly pluralizes 0 file","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 1 file","status":"passed","title":"correctly pluralizes 1 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 2 file","status":"passed","title":"correctly pluralizes 2 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 5 file","status":"passed","title":"correctly pluralizes 5 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 11 file","status":"passed","title":"correctly pluralizes 11 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 21 file","status":"passed","title":"correctly pluralizes 21 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 22 file","status":"passed","title":"correctly pluralizes 22 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 25 file","status":"passed","title":"correctly pluralizes 25 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 101 file","status":"passed","title":"correctly pluralizes 101 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 110 file","status":"passed","title":"correctly pluralizes 110 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles negative numbers correctly","status":"passed","title":"handles negative numbers correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles zero correctly","status":"passed","title":"handles zero correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles bigint values correctly","status":"passed","title":"handles bigint values correctly","duration":1,"failureMessages":[]}],"startTime":1756058606144,"endTime":1756058606149,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/core/tests/locales/be.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parsedType","status":"passed","title":"parsedType","duration":1,"failureMessages":[]}],"startTime":1756058627594,"endTime":1756058627595,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/core/tests/locales/en.test.ts"},{"assertionResults":[{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 1 array","status":"passed","title":"correctly pluralizes 1 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 2 array","status":"passed","title":"correctly pluralizes 2 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 5 array","status":"passed","title":"correctly pluralizes 5 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 11 array","status":"passed","title":"correctly pluralizes 11 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 21 array","status":"passed","title":"correctly pluralizes 21 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 22 array","status":"passed","title":"correctly pluralizes 22 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 25 array","status":"passed","title":"correctly pluralizes 25 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 101 array","status":"passed","title":"correctly pluralizes 101 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 111 array","status":"passed","title":"correctly pluralizes 111 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 1 set","status":"passed","title":"correctly pluralizes 1 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 2 set","status":"passed","title":"correctly pluralizes 2 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 5 set","status":"passed","title":"correctly pluralizes 5 set","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 11 set","status":"passed","title":"correctly pluralizes 11 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 21 set","status":"passed","title":"correctly pluralizes 21 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 22 set","status":"passed","title":"correctly pluralizes 22 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 25 set","status":"passed","title":"correctly pluralizes 25 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 101 set","status":"passed","title":"correctly pluralizes 101 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 111 set","status":"passed","title":"correctly pluralizes 111 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 1 string","status":"passed","title":"correctly pluralizes 1 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 2 string","status":"passed","title":"correctly pluralizes 2 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 5 string","status":"passed","title":"correctly pluralizes 5 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 11 string","status":"passed","title":"correctly pluralizes 11 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 21 string","status":"passed","title":"correctly pluralizes 21 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 22 string","status":"passed","title":"correctly pluralizes 22 string","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 25 string","status":"passed","title":"correctly pluralizes 25 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 0 file","status":"passed","title":"correctly pluralizes 0 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 1 file","status":"passed","title":"correctly pluralizes 1 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 2 file","status":"passed","title":"correctly pluralizes 2 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 5 file","status":"passed","title":"correctly pluralizes 5 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 11 file","status":"passed","title":"correctly pluralizes 11 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 21 file","status":"passed","title":"correctly pluralizes 21 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 22 file","status":"passed","title":"correctly pluralizes 22 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 25 file","status":"passed","title":"correctly pluralizes 25 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 101 file","status":"passed","title":"correctly pluralizes 101 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 110 file","status":"passed","title":"correctly pluralizes 110 file","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles negative numbers correctly","status":"passed","title":"handles negative numbers correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles zero correctly","status":"passed","title":"handles zero correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles bigint values correctly","status":"passed","title":"handles bigint values correctly","duration":0,"failureMessages":[]}],"startTime":1756058606617,"endTime":1756058606622,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/core/tests/locales/ru.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parsedType","status":"passed","title":"parsedType","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" locales - tr","status":"passed","title":"locales - tr","duration":6,"failureMessages":[]}],"startTime":1756058608954,"endTime":1756058608961,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/api/node_modules/zod/src/v4/core/tests/locales/tr.test.ts"},{"assertionResults":[{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 1 array","status":"passed","title":"correctly pluralizes 1 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 2 array","status":"passed","title":"correctly pluralizes 2 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 5 array","status":"passed","title":"correctly pluralizes 5 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 11 array","status":"passed","title":"correctly pluralizes 11 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 21 array","status":"passed","title":"correctly pluralizes 21 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 22 array","status":"passed","title":"correctly pluralizes 22 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 25 array","status":"passed","title":"correctly pluralizes 25 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 101 array","status":"passed","title":"correctly pluralizes 101 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 111 array","status":"passed","title":"correctly pluralizes 111 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 1 set","status":"passed","title":"correctly pluralizes 1 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 2 set","status":"passed","title":"correctly pluralizes 2 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 5 set","status":"passed","title":"correctly pluralizes 5 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 11 set","status":"passed","title":"correctly pluralizes 11 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 21 set","status":"passed","title":"correctly pluralizes 21 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 22 set","status":"passed","title":"correctly pluralizes 22 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 25 set","status":"passed","title":"correctly pluralizes 25 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 101 set","status":"passed","title":"correctly pluralizes 101 set","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 111 set","status":"passed","title":"correctly pluralizes 111 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 1 string","status":"passed","title":"correctly pluralizes 1 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 2 string","status":"passed","title":"correctly pluralizes 2 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 5 string","status":"passed","title":"correctly pluralizes 5 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 11 string","status":"passed","title":"correctly pluralizes 11 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 21 string","status":"passed","title":"correctly pluralizes 21 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 22 string","status":"passed","title":"correctly pluralizes 22 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 25 string","status":"passed","title":"correctly pluralizes 25 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 0 file","status":"passed","title":"correctly pluralizes 0 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 1 file","status":"passed","title":"correctly pluralizes 1 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 2 file","status":"passed","title":"correctly pluralizes 2 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 5 file","status":"passed","title":"correctly pluralizes 5 file","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 11 file","status":"passed","title":"correctly pluralizes 11 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 21 file","status":"passed","title":"correctly pluralizes 21 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 22 file","status":"passed","title":"correctly pluralizes 22 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 25 file","status":"passed","title":"correctly pluralizes 25 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 101 file","status":"passed","title":"correctly pluralizes 101 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 110 file","status":"passed","title":"correctly pluralizes 110 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles negative numbers correctly","status":"passed","title":"handles negative numbers correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles zero correctly","status":"passed","title":"handles zero correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles bigint values correctly","status":"passed","title":"handles bigint values correctly","duration":0,"failureMessages":[]}],"startTime":1756058606364,"endTime":1756058606369,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/core/tests/locales/be.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parsedType","status":"passed","title":"parsedType","duration":1,"failureMessages":[]}],"startTime":1756058627728,"endTime":1756058627729,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/core/tests/locales/en.test.ts"},{"assertionResults":[{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 1 array","status":"passed","title":"correctly pluralizes 1 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 2 array","status":"passed","title":"correctly pluralizes 2 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 5 array","status":"passed","title":"correctly pluralizes 5 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 11 array","status":"passed","title":"correctly pluralizes 11 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 21 array","status":"passed","title":"correctly pluralizes 21 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 22 array","status":"passed","title":"correctly pluralizes 22 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 25 array","status":"passed","title":"correctly pluralizes 25 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 101 array","status":"passed","title":"correctly pluralizes 101 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 111 array","status":"passed","title":"correctly pluralizes 111 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 1 set","status":"passed","title":"correctly pluralizes 1 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 2 set","status":"passed","title":"correctly pluralizes 2 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 5 set","status":"passed","title":"correctly pluralizes 5 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 11 set","status":"passed","title":"correctly pluralizes 11 set","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 21 set","status":"passed","title":"correctly pluralizes 21 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 22 set","status":"passed","title":"correctly pluralizes 22 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 25 set","status":"passed","title":"correctly pluralizes 25 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 101 set","status":"passed","title":"correctly pluralizes 101 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 111 set","status":"passed","title":"correctly pluralizes 111 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 1 string","status":"passed","title":"correctly pluralizes 1 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 2 string","status":"passed","title":"correctly pluralizes 2 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 5 string","status":"passed","title":"correctly pluralizes 5 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 11 string","status":"passed","title":"correctly pluralizes 11 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 21 string","status":"passed","title":"correctly pluralizes 21 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 22 string","status":"passed","title":"correctly pluralizes 22 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 25 string","status":"passed","title":"correctly pluralizes 25 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 0 file","status":"passed","title":"correctly pluralizes 0 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 1 file","status":"passed","title":"correctly pluralizes 1 file","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 2 file","status":"passed","title":"correctly pluralizes 2 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 5 file","status":"passed","title":"correctly pluralizes 5 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 11 file","status":"passed","title":"correctly pluralizes 11 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 21 file","status":"passed","title":"correctly pluralizes 21 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 22 file","status":"passed","title":"correctly pluralizes 22 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 25 file","status":"passed","title":"correctly pluralizes 25 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 101 file","status":"passed","title":"correctly pluralizes 101 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 110 file","status":"passed","title":"correctly pluralizes 110 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles negative numbers correctly","status":"passed","title":"handles negative numbers correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles zero correctly","status":"passed","title":"handles zero correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles bigint values correctly","status":"passed","title":"handles bigint values correctly","duration":1,"failureMessages":[]}],"startTime":1756058606638,"endTime":1756058606643,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/core/tests/locales/ru.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parsedType","status":"passed","title":"parsedType","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" locales - tr","status":"passed","title":"locales - tr","duration":5,"failureMessages":[]}],"startTime":1756058609174,"endTime":1756058609180,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/compiler/node_modules/zod/src/v4/core/tests/locales/tr.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" default flattened errors type inference","status":"passed","title":"default flattened errors type inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom flattened errors type inference","status":"passed","title":"custom flattened errors type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" form errors type inference","status":"passed","title":"form errors type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .flatten() type assertion","status":"passed","title":".flatten() type assertion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .formErrors type assertion","status":"passed","title":".formErrors type assertion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" all errors","status":"passed","title":"all errors","duration":2,"failureMessages":[]}],"startTime":1756058602795,"endTime":1756058602801,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/all-errors.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" check any inference","status":"passed","title":"check any inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check unknown inference","status":"passed","title":"check unknown inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check never inference","status":"passed","title":"check never inference","duration":2,"failureMessages":[]}],"startTime":1756058629882,"endTime":1756058629885,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/anyunknown.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse empty array in nonempty","status":"passed","title":"parse empty array in nonempty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get element","status":"passed","title":"get element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue parsing despite array size error","status":"passed","title":"continue parsing despite array size error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array","status":"passed","title":"parse should fail given sparse array","duration":0,"failureMessages":[]}],"startTime":1756058617840,"endTime":1756058617845,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/array.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string async parse","status":"passed","title":"string async parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number async parse","status":"passed","title":"number async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigInt async parse","status":"passed","title":"bigInt async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean async parse","status":"passed","title":"boolean async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date async parse","status":"passed","title":"date async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined async parse","status":"passed","title":"undefined async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null async parse","status":"passed","title":"null async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" any async parse","status":"passed","title":"any async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown async parse","status":"passed","title":"unknown async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" void async parse","status":"passed","title":"void async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array async parse","status":"passed","title":"array async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object async parse","status":"passed","title":"object async parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union async parse","status":"passed","title":"union async parse","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" record async parse","status":"passed","title":"record async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function async parse","status":"passed","title":"function async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal async parse","status":"passed","title":"literal async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum async parse","status":"passed","title":"enum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum async parse","status":"passed","title":"nativeEnum async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse good","status":"passed","title":"promise async parse good","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse bad","status":"passed","title":"promise async parse bad","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation non-empty strings","status":"passed","title":"async validation non-empty strings","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 1","status":"passed","title":"async validation multiple errors 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 2","status":"passed","title":"async validation multiple errors 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ensure early async failure prevents follow-up refinement checks","status":"passed","title":"ensure early async failure prevents follow-up refinement checks","duration":0,"failureMessages":[]}],"startTime":1756058586270,"endTime":1756058586290,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/async-parsing.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse async test","status":"passed","title":"parse async test","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async test","status":"passed","title":"parseAsync async test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async test","status":"passed","title":"parseAsync async test","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parseAsync async with value","status":"passed","title":"parseAsync async with value","duration":1,"failureMessages":[]}],"startTime":1756058619976,"endTime":1756058619981,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/async-refinements.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type guard","status":"passed","title":"type guard","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test this binding","status":"passed","title":"test this binding","duration":1,"failureMessages":[]}],"startTime":1756058628929,"endTime":1756058628931,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/base.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]}],"startTime":1756058617138,"endTime":1756058617142,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/bigint.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":1,"failureMessages":[]}],"startTime":1756058619752,"endTime":1756058619753,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/branded.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic catch","status":"passed","title":"basic catch","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch fn does not run when parsing succeeds","status":"passed","title":"catch fn does not run when parsing succeeds","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic catch async","status":"passed","title":"basic catch async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch replace wrong types","status":"passed","title":"catch replace wrong types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch with transform","status":"passed","title":"catch with transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch on existing optional","status":"passed","title":"catch on existing optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on catch","status":"passed","title":"optional on catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeCatch","status":"passed","title":"removeCatch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained catch","status":"passed","title":"chained catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" factory","status":"passed","title":"factory","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" reported issues with nested usage","status":"passed","title":"reported issues with nested usage","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch error","status":"passed","title":"catch error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.input","status":"passed","title":"ctx.input","duration":0,"failureMessages":[]}],"startTime":1756058597120,"endTime":1756058597127,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/catch.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string coercion","status":"passed","title":"string coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number coercion","status":"passed","title":"number coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean coercion","status":"passed","title":"boolean coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint coercion","status":"passed","title":"bigint coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date coercion","status":"passed","title":"date coercion","duration":1,"failureMessages":[]}],"startTime":1756058596343,"endTime":1756058596350,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/coerce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse","status":"passed","title":"parse","duration":3,"failureMessages":[]}],"startTime":1756058618267,"endTime":1756058618270,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/complex.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string params","status":"passed","title":"string params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validations","status":"passed","title":"async validations","duration":1,"failureMessages":[]}],"startTime":1756058626869,"endTime":1756058626872,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/custom.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]}],"startTime":1756058626093,"endTime":1756058626096,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/date.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test","status":"passed","title":"test","duration":1,"failureMessages":[]}],"startTime":1756058600214,"endTime":1756058600215,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/deepmasking.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic defaults","status":"passed","title":"basic defaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with transform","status":"passed","title":"default with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default on existing optional","status":"passed","title":"default on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on default","status":"passed","title":"optional on default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeDefault","status":"passed","title":"removeDefault","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained defaults","status":"passed","title":"chained defaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" factory","status":"passed","title":"factory","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":1,"failureMessages":[]}],"startTime":1756058608925,"endTime":1756058608930,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/default.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing `description` to schema should add a description","status":"passed","title":"passing `description` to schema should add a description","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" `.describe` should add a description","status":"passed","title":"`.describe` should add a description","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" description should carry over to chained schemas","status":"passed","title":"description should carry over to chained schemas","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" description should not carry over to chained array schema","status":"passed","title":"description should not carry over to chained array schema","duration":0,"failureMessages":[]}],"startTime":1756058621364,"endTime":1756058621366,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/description.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" valid","status":"passed","title":"valid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - discriminator value of various primitive types","status":"passed","title":"valid - discriminator value of various primitive types","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid - null","status":"passed","title":"invalid - null","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value","status":"passed","title":"invalid discriminator value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid discriminator value, invalid data","status":"passed","title":"valid discriminator value, invalid data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - missing discriminator","status":"passed","title":"wrong schema - missing discriminator","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - duplicate discriminator values","status":"passed","title":"wrong schema - duplicate discriminator values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - valid","status":"passed","title":"async - valid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - invalid","status":"passed","title":"async - invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - literals with .default or .preprocess","status":"passed","title":"valid - literals with .default or .preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum and nativeEnum","status":"passed","title":"enum and nativeEnum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded","status":"passed","title":"branded","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional and nullable","status":"passed","title":"optional and nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly array of options","status":"passed","title":"readonly array of options","duration":0,"failureMessages":[]}],"startTime":1756058589497,"endTime":1756058589506,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/discriminated-unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" create enum","status":"passed","title":"create enum","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" infer enum","status":"passed","title":"infer enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get options","status":"passed","title":"get options","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly enum","status":"passed","title":"readonly enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error params","status":"passed","title":"error params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract/exclude","status":"passed","title":"extract/exclude","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map in extract/exclude","status":"passed","title":"error map in extract/exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly in ZodEnumDef","status":"passed","title":"readonly in ZodEnumDef","duration":0,"failureMessages":[]}],"startTime":1756058611948,"endTime":1756058611952,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/enum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" error creation","status":"passed","title":"error creation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type error with custom error map","status":"passed","title":"type error with custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement fail with params","status":"passed","title":"refinement fail with params","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom error with custom errormap","status":"passed","title":"custom error with custom errormap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default error message","status":"passed","title":"default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refine","status":"passed","title":"override error in refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refinement","status":"passed","title":"override error in refinement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array minimum","status":"passed","title":"array minimum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path in custom error map","status":"passed","title":"custom path in custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error metadata from value","status":"passed","title":"error metadata from value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" root level formatting","status":"passed","title":"root level formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" no abort early on refinements","status":"passed","title":"no abort early on refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting","status":"passed","title":"formatting","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting with nullable and optional fields","status":"passed","title":"formatting with nullable and optional fields","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema-bound error map","status":"passed","title":"schema-bound error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overrideErrorMap","status":"passed","title":"overrideErrorMap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid and required","status":"passed","title":"invalid and required","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" Fallback to default required error","status":"passed","title":"Fallback to default required error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid and required and errorMap","status":"passed","title":"invalid and required and errorMap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict error message","status":"passed","title":"strict error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid enum elementstring","status":"passed","title":"enum error message, invalid enum elementstring","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid type","status":"passed","title":"enum error message, invalid type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum default error message","status":"passed","title":"nativeEnum default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal default error message","status":"passed","title":"literal default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with message returns the custom error message","status":"passed","title":"enum with message returns the custom error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" when the message is falsy, it is used as is provided","status":"passed","title":"when the message is falsy, it is used as is provided","duration":0,"failureMessages":[]}],"startTime":1756058585195,"endTime":1756058585206,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/error.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" first party switch","status":"passed","title":"first party switch","duration":1,"failureMessages":[]}],"startTime":1756058614837,"endTime":1756058614838,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/firstparty.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Identify missing [ZodFirstPartySchemaTypes]","status":"passed","title":"Identify missing [ZodFirstPartySchemaTypes]","duration":0,"failureMessages":[]}],"startTime":1756058628520,"endTime":1756058628520,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/firstpartyschematypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 1","status":"passed","title":"parsed function fail 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 2","status":"passed","title":"parsed function fail 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 1","status":"passed","title":"function inference 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" method parsing","status":"passed","title":"method parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async method parsing","status":"passed","title":"async method parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" args method","status":"passed","title":"args method","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 2","status":"passed","title":"function inference 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid function run","status":"passed","title":"valid function run","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input validation error","status":"passed","title":"input validation error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output validation error","status":"passed","title":"output validation error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" special function error codes","status":"passed","title":"special function error codes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function with async refinements","status":"passed","title":"function with async refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non async function with async refinements should fail","status":"passed","title":"non async function with async refinements should fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" allow extra parameters","status":"passed","title":"allow extra parameters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" params and returnType getters","status":"passed","title":"params and returnType getters","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inference with transforms","status":"passed","title":"inference with transforms","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" fallback to OuterTypeOfFunction","status":"passed","title":"fallback to OuterTypeOfFunction","duration":0,"failureMessages":[]}],"startTime":1756058596808,"endTime":1756058596816,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/function.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" generics","status":"passed","title":"generics","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested no undefined","status":"passed","title":"nested no undefined","duration":2,"failureMessages":[]}],"startTime":1756058620709,"endTime":1756058620713,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/generics.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof fatal","status":"passed","title":"instanceof fatal","duration":1,"failureMessages":[]}],"startTime":1756058624185,"endTime":1756058624188,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/instanceof.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object intersection","status":"passed","title":"object intersection","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection","status":"passed","title":"deep intersection","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection of arrays","status":"passed","title":"deep intersection of arrays","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid intersection types","status":"passed","title":"invalid intersection types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge","status":"passed","title":"invalid array merge","duration":0,"failureMessages":[]}],"startTime":1756058610317,"endTime":1756058610323,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/intersection.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" ","status":"passed","title":"","duration":1,"failureMessages":[]}],"startTime":1756058590142,"endTime":1756058590143,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/language-server.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should have `received` field with data","status":"passed","title":"invalid_literal should have `received` field with data","duration":0,"failureMessages":[]}],"startTime":1756058624877,"endTime":1756058624880,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/literal.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Set is given","status":"passed","title":"throws when a Set is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has invalid key and invalid input","status":"passed","title":"throws when the given map has invalid key and invalid input","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has multiple invalid entries","status":"passed","title":"throws when the given map has multiple invalid entries","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dirty","status":"passed","title":"dirty","duration":0,"failureMessages":[]}],"startTime":1756058608493,"endTime":1756058608497,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/map.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" masking test","status":"passed","title":"masking test","duration":1,"failureMessages":[]}],"startTime":1756058649185,"endTime":1756058649186,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/masking.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" mocker","status":"passed","title":"mocker","duration":1,"failureMessages":[]}],"startTime":1756058633311,"endTime":1756058633312,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/mocker.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]}],"startTime":1756058632057,"endTime":1756058632059,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/nan.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nativeEnum test with consts","status":"passed","title":"nativeEnum test with consts","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum test with real enum","status":"passed","title":"nativeEnum test with real enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum test with const with numeric keys","status":"passed","title":"nativeEnum test with const with numeric keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" from enum","status":"passed","title":"from enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" from const","status":"passed","title":"from const","duration":1,"failureMessages":[]}],"startTime":1756058615286,"endTime":1756058615290,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/nativeEnum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Should have error messages appropriate for the underlying type","status":"passed","title":"Should have error messages appropriate for the underlying type","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":1,"failureMessages":[]}],"startTime":1756058623529,"endTime":1756058623535,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/nullable.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse NaN","status":"passed","title":"parse NaN","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int getter","status":"passed","title":"int getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" finite getter","status":"passed","title":"finite getter","duration":0,"failureMessages":[]}],"startTime":1756058597470,"endTime":1756058597476,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object augmentation","status":"passed","title":"object augmentation","duration":4,"failureMessages":[]}],"startTime":1756058632474,"endTime":1756058632478,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/object-augmentation.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" doesn’t throw when Date is undefined","status":"passed","title":"doesn’t throw when Date is undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when Set is undefined","status":"passed","title":"doesn’t throw when Set is undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when Map is undefined","status":"passed","title":"doesn’t throw when Map is undefined","duration":0,"failureMessages":[]}],"startTime":1756058629125,"endTime":1756058629127,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/object-in-es5-env.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object type inference","status":"passed","title":"object type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown throw","status":"passed","title":"unknown throw","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shape() should return schema of particular key","status":"passed","title":"shape() should return schema of particular key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" correct parsing","status":"passed","title":"correct parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" incorrect #1","status":"passed","title":"incorrect #1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict by default","status":"passed","title":"nonstrict by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip by default","status":"passed","title":"strip by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys override","status":"passed","title":"unknownkeys override","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough unknown","status":"passed","title":"passthrough unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip unknown","status":"passed","title":"strip unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict","status":"passed","title":"strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall inference","status":"passed","title":"catchall inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test that optional keys are unset","status":"passed","title":"test that optional keys are unset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test catchall parsing","status":"passed","title":"test catchall parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test nonexistent keys","status":"passed","title":"test nonexistent keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test async union","status":"passed","title":"test async union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test inferred merged type","status":"passed","title":"test inferred merged type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred merged object type with optional properties","status":"passed","title":"inferred merged object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred unioned object type with optional properties","status":"passed","title":"inferred unioned object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred enum type","status":"passed","title":"inferred enum type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred partial object type with optional properties","status":"passed","title":"inferred partial object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred picked object type with optional properties","status":"passed","title":"inferred picked object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type for unknown/any keys","status":"passed","title":"inferred type for unknown/any keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" setKey","status":"passed","title":"setKey","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strictcreate","status":"passed","title":"strictcreate","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object with refine","status":"passed","title":"object with refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with date","status":"passed","title":"intersection of object with date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with refine with date","status":"passed","title":"intersection of object with refine with date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys merging","status":"passed","title":"unknownkeys merging","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should return schema with new key","status":"passed","title":"extend() should return schema with new key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should have power to override existing key","status":"passed","title":"extend() should have power to override existing key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough index signature","status":"passed","title":"passthrough index signature","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" xor","status":"passed","title":"xor","duration":0,"failureMessages":[]}],"startTime":1756058587824,"endTime":1756058587836,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" Should have error messages appropriate for the underlying type","status":"passed","title":"Should have error messages appropriate for the underlying type","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":0,"failureMessages":[]}],"startTime":1756058622087,"endTime":1756058622091,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/optional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parse strict object with unknown keys","status":"passed","title":"parse strict object with unknown keys","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nonstrict object with unknown keys","status":"passed","title":"parse nonstrict object with unknown keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid left side of intersection","status":"passed","title":"invalid left side of intersection","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid right side of intersection","status":"passed","title":"invalid right side of intersection","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsing non-array in tuple schema","status":"passed","title":"parsing non-array in tuple schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" incorrect num elements in tuple","status":"passed","title":"incorrect num elements in tuple","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid enum value","status":"passed","title":"invalid enum value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsing unknown","status":"passed","title":"parsing unknown","duration":0,"failureMessages":[]}],"startTime":1756058624597,"endTime":1756058624603,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/parser.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parseUtil isInvalid should use structural typing","status":"passed","title":"parseUtil isInvalid should use structural typing","duration":1,"failureMessages":[]}],"startTime":1756058627531,"endTime":1756058627532,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/parseUtil.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" shallow inference","status":"passed","title":"shallow inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shallow partial parse","status":"passed","title":"shallow partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial inference","status":"passed","title":"deep partial inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial parse","status":"passed","title":"deep partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial runtime tests","status":"passed","title":"deep partial runtime tests","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial optional/nullable","status":"passed","title":"deep partial optional/nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial tuple","status":"passed","title":"deep partial tuple","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep partial inference","status":"passed","title":"deep partial inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required","status":"passed","title":"required","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required inference","status":"passed","title":"required inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask","status":"passed","title":"required with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask -- ignore falsy values","status":"passed","title":"required with mask -- ignore falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask","status":"passed","title":"partial with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask -- ignore falsy values","status":"passed","title":"partial with mask -- ignore falsy values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deeppartial array","status":"passed","title":"deeppartial array","duration":0,"failureMessages":[]}],"startTime":1756058594856,"endTime":1756058594861,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/partials.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" pick type inference","status":"passed","title":"pick type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - success","status":"passed","title":"pick parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - fail","status":"passed","title":"pick parse - fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit type inference","status":"passed","title":"omit type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - success","status":"passed","title":"omit parse - success","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - fail","status":"passed","title":"omit parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict inference","status":"passed","title":"nonstrict inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - pass","status":"passed","title":"nonstrict parsing - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - fail","status":"passed","title":"nonstrict parsing - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick/omit/required/partial - do not allow unknown keys","status":"passed","title":"pick/omit/required/partial - do not allow unknown keys","duration":1,"failureMessages":[]}],"startTime":1756058608272,"endTime":1756058608278,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/pickomit.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string to number pipeline","status":"passed","title":"string to number pipeline","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string to number pipeline async","status":"passed","title":"string to number pipeline async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" break if dirty","status":"passed","title":"break if dirty","duration":1,"failureMessages":[]}],"startTime":1756058628249,"endTime":1756058628253,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/pipeline.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" preprocess","status":"passed","title":"preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess","status":"passed","title":"async preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parse","status":"passed","title":"preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue non-fatal by default","status":"passed","title":"preprocess ctx.addIssue non-fatal by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue fatal true","status":"passed","title":"preprocess ctx.addIssue fatal true","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess ctx.addIssue with parse","status":"passed","title":"async preprocess ctx.addIssue with parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parseAsync","status":"passed","title":"preprocess ctx.addIssue with parseAsync","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in preprocess","status":"passed","title":"z.NEVER in preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess as the second property of object","status":"passed","title":"preprocess as the second property of object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess validates with sibling errors","status":"passed","title":"preprocess validates with sibling errors","duration":0,"failureMessages":[]}],"startTime":1756058603582,"endTime":1756058603590,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/preprocess.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" literal string correct","status":"passed","title":"literal string correct","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string incorrect","status":"passed","title":"literal string incorrect","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string number","status":"passed","title":"literal string number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string boolean","status":"passed","title":"literal string boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string boolean","status":"passed","title":"literal string boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal string object","status":"passed","title":"literal string object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number correct","status":"passed","title":"literal number correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number incorrect","status":"passed","title":"literal number incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number number","status":"passed","title":"literal number number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number boolean","status":"passed","title":"literal number boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number object","status":"passed","title":"literal number object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean correct","status":"passed","title":"literal boolean correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean incorrect","status":"passed","title":"literal boolean incorrect","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean number","status":"passed","title":"literal boolean number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean boolean","status":"passed","title":"literal boolean boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean object","status":"passed","title":"literal boolean object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint correct","status":"passed","title":"literal bigint correct","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint incorrect","status":"passed","title":"literal bigint incorrect","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint number","status":"passed","title":"literal bigint number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint boolean","status":"passed","title":"literal bigint boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint object","status":"passed","title":"literal bigint object","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal symbol","status":"passed","title":"literal symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema string","status":"passed","title":"parse stringSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema number","status":"passed","title":"parse stringSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema boolean","status":"passed","title":"parse stringSchema boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema undefined","status":"passed","title":"parse stringSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse stringSchema null","status":"passed","title":"parse stringSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema string","status":"passed","title":"parse numberSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema number","status":"passed","title":"parse numberSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema bigint","status":"passed","title":"parse numberSchema bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema boolean","status":"passed","title":"parse numberSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema undefined","status":"passed","title":"parse numberSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse numberSchema null","status":"passed","title":"parse numberSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema string","status":"passed","title":"parse bigintSchema string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema number","status":"passed","title":"parse bigintSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema bigint","status":"passed","title":"parse bigintSchema bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema boolean","status":"passed","title":"parse bigintSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema undefined","status":"passed","title":"parse bigintSchema undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse bigintSchema null","status":"passed","title":"parse bigintSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema string","status":"passed","title":"parse booleanSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema number","status":"passed","title":"parse booleanSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema boolean","status":"passed","title":"parse booleanSchema boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema undefined","status":"passed","title":"parse booleanSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse booleanSchema null","status":"passed","title":"parse booleanSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema string","status":"passed","title":"parse dateSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema number","status":"passed","title":"parse dateSchema number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema boolean","status":"passed","title":"parse dateSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema date","status":"passed","title":"parse dateSchema date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema undefined","status":"passed","title":"parse dateSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema null","status":"passed","title":"parse dateSchema null","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse dateSchema invalid date","status":"passed","title":"parse dateSchema invalid date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema string","status":"passed","title":"parse symbolSchema string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema number","status":"passed","title":"parse symbolSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema boolean","status":"passed","title":"parse symbolSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema date","status":"passed","title":"parse symbolSchema date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema symbol","status":"passed","title":"parse symbolSchema symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema undefined","status":"passed","title":"parse symbolSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse symbolSchema null","status":"passed","title":"parse symbolSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema string","status":"passed","title":"parse undefinedSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema number","status":"passed","title":"parse undefinedSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema boolean","status":"passed","title":"parse undefinedSchema boolean","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema undefined","status":"passed","title":"parse undefinedSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse undefinedSchema null","status":"passed","title":"parse undefinedSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema string","status":"passed","title":"parse nullSchema string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema number","status":"passed","title":"parse nullSchema number","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema boolean","status":"passed","title":"parse nullSchema boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema undefined","status":"passed","title":"parse nullSchema undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse nullSchema null","status":"passed","title":"parse nullSchema null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" primitive inference","status":"passed","title":"primitive inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get literal value","status":"passed","title":"get literal value","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional convenience method","status":"passed","title":"optional convenience method","duration":0,"failureMessages":[]}],"startTime":1756058587304,"endTime":1756058587322,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/primitive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" promise inference","status":"passed","title":"promise inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success","status":"passed","title":"promise parsing success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success 2","status":"passed","title":"promise parsing success 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail 2","status":"passed","title":"promise parsing fail 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function pass","status":"passed","title":"async function pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function fail","status":"passed","title":"async function fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async promise parsing","status":"passed","title":"async promise parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" resolves","status":"passed","title":"resolves","duration":0,"failureMessages":[]}],"startTime":1756058613409,"endTime":1756058613414,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/promise.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" flat inference","status":"passed","title":"flat inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object freezing","status":"passed","title":"object freezing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async object freezing","status":"passed","title":"async object freezing","duration":1,"failureMessages":[]}],"startTime":1756058593267,"endTime":1756058593272,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/readonly.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" methods","status":"passed","title":"methods","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - pass","status":"passed","title":"string record parse - pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - fail","status":"passed","title":"string record parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key schema","status":"passed","title":"key schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key and value getters","status":"passed","title":"key and value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" is not vulnerable to prototype pollution","status":"passed","title":"is not vulnerable to prototype pollution","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont parse undefined values","status":"passed","title":"dont parse undefined values","duration":0,"failureMessages":[]}],"startTime":1756058607069,"endTime":1756058607076,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/record.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.late.object","status":"passed","title":"recursion with z.late.object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema getter","status":"passed","title":"schema getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]}],"startTime":1756058605483,"endTime":1756058605487,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/recursive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" refinement","status":"passed","title":"refinement","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement 2","status":"passed","title":"refinement 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement type guard","status":"passed","title":"refinement type guard","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement Promise","status":"passed","title":"refinement Promise","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" use path in refinement context","status":"passed","title":"use path in refinement context","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine","status":"passed","title":"superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine async","status":"passed","title":"superRefine async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine - type narrowing","status":"passed","title":"superRefine - type narrowing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained mixed refining types","status":"passed","title":"chained mixed refining types","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get inner type","status":"passed","title":"get inner type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained refinements","status":"passed","title":"chained refinements","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" fatal superRefine","status":"passed","title":"fatal superRefine","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" superRefine after skipped transform","status":"passed","title":"superRefine after skipped transform","duration":0,"failureMessages":[]}],"startTime":1756058590642,"endTime":1756058590651,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" safeparse fail","status":"passed","title":"safeparse fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" safeparse pass","status":"passed","title":"safeparse pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" safeparse unexpected error","status":"passed","title":"safeparse unexpected error","duration":1,"failureMessages":[]}],"startTime":1756058631362,"endTime":1756058631365,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/safeparse.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse: size-related methods","status":"passed","title":"valid parse: size-related methods","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when parsing empty set in nonempty ","status":"passed","title":"failing when parsing empty set in nonempty ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is smaller than min() ","status":"passed","title":"failing when set is smaller than min() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is bigger than max() ","status":"passed","title":"failing when set is bigger than max() ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when an empty set is given","status":"passed","title":"doesn’t throw when an empty set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Map is given","status":"passed","title":"throws when a Map is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has invalid input","status":"passed","title":"throws when the given set has invalid input","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has multiple invalid entries","status":"passed","title":"throws when the given set has multiple invalid entries","duration":0,"failureMessages":[]}],"startTime":1756058601642,"endTime":1756058601647,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/set.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid parse","status":"passed","title":"invalid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid parse async","status":"passed","title":"invalid parse async","duration":0,"failureMessages":[]}],"startTime":1756058612681,"endTime":1756058612686,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/standard-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" email validations","status":"passed","title":"email validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept SGVsbG8gV29ybGQ=","status":"passed","title":"base64 should accept SGVsbG8gV29ybGQ=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","status":"passed","title":"base64 should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","status":"passed","title":"base64 should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64 should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64 should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept MTIzNDU2Nzg5MA==","status":"passed","title":"base64 should accept MTIzNDU2Nzg5MA==","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","status":"passed","title":"base64 should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","status":"passed","title":"base64 should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept ISIkJSMmJyonKCk=","status":"passed","title":"base64 should accept ISIkJSMmJyonKCk=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept ","status":"passed","title":"base64 should accept ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should accept w7/Dv8O+w74K","status":"passed","title":"base64 should accept w7/Dv8O+w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject 12345","status":"passed","title":"base64 should reject 12345","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject 12345===","status":"passed","title":"base64 should reject 12345===","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject SGVsbG8gV29ybGQ","status":"passed","title":"base64 should reject SGVsbG8gV29ybGQ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","status":"passed","title":"base64 should reject VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64 should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64 should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject .MTIzND2Nzg5MC4=","status":"passed","title":"base64 should reject .MTIzND2Nzg5MC4=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","status":"passed","title":"base64 should reject QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 should reject w7_Dv8O-w74K","status":"passed","title":"base64 should reject w7_Dv8O-w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept SGVsbG8gV29ybGQ","status":"passed","title":"base64url should accept SGVsbG8gV29ybGQ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept SGVsbG8gV29ybGQ=","status":"passed","title":"base64url should accept SGVsbG8gV29ybGQ=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","status":"passed","title":"base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","status":"passed","title":"base64url should accept VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms","status":"passed","title":"base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","status":"passed","title":"base64url should accept TWFueSBoYW5kcyBtYWtlIGxpZ2h0IHdvcms=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64url should accept UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg","status":"passed","title":"base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64url should accept QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept MTIzNDU2Nzg5MA","status":"passed","title":"base64url should accept MTIzNDU2Nzg5MA","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept MTIzNDU2Nzg5MA==","status":"passed","title":"base64url should accept MTIzNDU2Nzg5MA==","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo","status":"passed","title":"base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","status":"passed","title":"base64url should accept YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","status":"passed","title":"base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","status":"passed","title":"base64url should accept QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVo=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ISIkJSMmJyonKCk","status":"passed","title":"base64url should accept ISIkJSMmJyonKCk","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ISIkJSMmJyonKCk=","status":"passed","title":"base64url should accept ISIkJSMmJyonKCk=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept ","status":"passed","title":"base64url should accept ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept w7_Dv8O-w74K","status":"passed","title":"base64url should accept w7_Dv8O-w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should accept 123456","status":"passed","title":"base64url should accept 123456","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject w7/Dv8O+w74K","status":"passed","title":"base64url should reject w7/Dv8O+w74K","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject 12345","status":"passed","title":"base64url should reject 12345","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject 12345===","status":"passed","title":"base64url should reject 12345===","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","status":"passed","title":"base64url should reject !UGF0aWVuY2UgaXMgdGhlIGtleSB0byBzdWNjZXNz","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","status":"passed","title":"base64url should reject ?QmFzZTY0IGVuY29kaW5nIGlzIGZ1bg==","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url should reject .MTIzND2Nzg5MC4=","status":"passed","title":"base64url should reject .MTIzND2Nzg5MC4=","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" jwt validations","status":"passed","title":"jwt validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url validations","status":"passed","title":"url validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url error overrides","status":"passed","title":"url error overrides","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" emoji validations","status":"passed","title":"emoji validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" uuid","status":"passed","title":"uuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad uuid","status":"passed","title":"bad uuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nanoid","status":"passed","title":"nanoid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad nanoid","status":"passed","title":"bad nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid","status":"passed","title":"cuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid2","status":"passed","title":"cuid2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ulid","status":"passed","title":"ulid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex","status":"passed","title":"regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error message","status":"passed","title":"regexp error message","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex lastIndex reset","status":"passed","title":"regex lastIndex reset","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" checks getters","status":"passed","title":"checks getters","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" trim","status":"passed","title":"trim","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lowerCase","status":"passed","title":"lowerCase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" datetime","status":"passed","title":"datetime","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" datetime parsing","status":"passed","title":"datetime parsing","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date","status":"passed","title":"date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date parsing","status":"passed","title":"date parsing","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" time","status":"passed","title":"time","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" time parsing","status":"passed","title":"time parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" duration","status":"passed","title":"duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IP validation","status":"passed","title":"IP validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR validation","status":"passed","title":"CIDR validation","duration":2,"failureMessages":[]}],"startTime":1756058582891,"endTime":1756058582932,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parse","status":"passed","title":"transform ctx.addIssue with parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parseAsync","status":"passed","title":"transform ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in transform","status":"passed","title":"z.NEVER in transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic transformations","status":"passed","title":"basic transformations","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" coercion","status":"passed","title":"coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async coercion","status":"passed","title":"async coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync coercion async error","status":"passed","title":"sync coercion async error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default","status":"passed","title":"default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dynamic default","status":"passed","title":"dynamic default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default when property is null or undefined","status":"passed","title":"default when property is null or undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with falsy values","status":"passed","title":"default with falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object typing","status":"passed","title":"object typing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform method overloads","status":"passed","title":"transform method overloads","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple transformers","status":"passed","title":"multiple transformers","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" short circuit on dirty","status":"passed","title":"short circuit on dirty","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async short circuit on dirty","status":"passed","title":"async short circuit on dirty","duration":0,"failureMessages":[]}],"startTime":1756058599094,"endTime":1756058599100,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/transformer.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" tuple inference","status":"passed","title":"tuple inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" successful validation","status":"passed","title":"successful validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" successful async validation","status":"passed","title":"successful async validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failed validation","status":"passed","title":"failed validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failed async validation","status":"passed","title":"failed async validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with transformers","status":"passed","title":"tuple with transformers","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with rest schema","status":"passed","title":"tuple with rest schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array as tuple","status":"passed","title":"parse should fail given sparse array as tuple","duration":0,"failureMessages":[]}],"startTime":1756058612379,"endTime":1756058612384,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/tuple.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union 2","status":"passed","title":"union 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return valid over invalid","status":"passed","title":"return valid over invalid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return dirty result over aborted","status":"passed","title":"return dirty result over aborted","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" options getter","status":"passed","title":"options getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly union","status":"passed","title":"readonly union","duration":1,"failureMessages":[]}],"startTime":1756058620480,"endTime":1756058620486,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" array min","status":"passed","title":"array min","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array max","status":"passed","title":"array max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array length","status":"passed","title":"array length","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string length","status":"passed","title":"string length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string min","status":"passed","title":"string min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string max","status":"passed","title":"string max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number min","status":"passed","title":"number min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number max","status":"passed","title":"number max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonnegative","status":"passed","title":"number nonnegative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonpositive","status":"passed","title":"number nonpositive","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number negative","status":"passed","title":"number negative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number positive","status":"passed","title":"number positive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instantiation","status":"passed","title":"instantiation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int","status":"passed","title":"int","duration":0,"failureMessages":[]}],"startTime":1756058606096,"endTime":1756058606103,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/validations.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" void","status":"passed","title":"void","duration":2,"failureMessages":[]}],"startTime":1756058633544,"endTime":1756058633546,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v3/tests/void.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test","status":"passed","title":"test","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test2","status":"passed","title":"test2","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation","status":"passed","title":"async validation","duration":2,"failureMessages":[]}],"startTime":1756058622972,"endTime":1756058622977,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/core/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" check any inference","status":"passed","title":"check any inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check unknown inference","status":"passed","title":"check unknown inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" check never inference","status":"passed","title":"check never inference","duration":2,"failureMessages":[]}],"startTime":1756058631108,"endTime":1756058631111,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/anyunknown.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array min/max","status":"passed","title":"array min/max","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array length","status":"passed","title":"array length","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array.nonempty()","status":"passed","title":"array.nonempty()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array.nonempty().max()","status":"passed","title":"array.nonempty().max()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse empty array in nonempty","status":"passed","title":"parse empty array in nonempty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get element","status":"passed","title":"get element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue parsing despite array size error","status":"passed","title":"continue parsing despite array size error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse should fail given sparse array","status":"passed","title":"parse should fail given sparse array","duration":1,"failureMessages":[]}],"startTime":1756058594121,"endTime":1756058594130,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/array.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":7,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" checks","status":"passed","title":"checks","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability to $ZodType","status":"passed","title":"assignability to $ZodType","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability with narrowing","status":"passed","title":"assignability with narrowing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generic assignability in objects","status":"passed","title":"generic assignability in objects","duration":0,"failureMessages":[]}],"startTime":1756058595642,"endTime":1756058595650,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/assignability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string async parse","status":"passed","title":"string async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number async parse","status":"passed","title":"number async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigInt async parse","status":"passed","title":"bigInt async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean async parse","status":"passed","title":"boolean async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date async parse","status":"passed","title":"date async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined async parse","status":"passed","title":"undefined async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null async parse","status":"passed","title":"null async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" any async parse","status":"passed","title":"any async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown async parse","status":"passed","title":"unknown async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" void async parse","status":"passed","title":"void async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array async parse","status":"passed","title":"array async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object async parse","status":"passed","title":"object async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union async parse","status":"passed","title":"union async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" record async parse","status":"passed","title":"record async parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal async parse","status":"passed","title":"literal async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum async parse","status":"passed","title":"enum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum async parse","status":"passed","title":"nativeEnum async parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse good","status":"passed","title":"promise async parse good","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise async parse bad","status":"passed","title":"promise async parse bad","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation non-empty strings","status":"passed","title":"async validation non-empty strings","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 1","status":"passed","title":"async validation multiple errors 1","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation multiple errors 2","status":"passed","title":"async validation multiple errors 2","duration":504,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ensure early async failure prevents follow-up refinement checks","status":"passed","title":"ensure early async failure prevents follow-up refinement checks","duration":1,"failureMessages":[]}],"startTime":1756058586747,"endTime":1756058587259,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/async-parsing.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" async refine .parse()","status":"passed","title":"async refine .parse()","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine","status":"passed","title":"async refine","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine with Promises","status":"passed","title":"async refine with Promises","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async refine that uses value","status":"passed","title":"async refine that uses value","duration":1,"failureMessages":[]}],"startTime":1756058618552,"endTime":1756058618559,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/async-refinements.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" test this binding","status":"passed","title":"test this binding","duration":1,"failureMessages":[]}],"startTime":1756058634310,"endTime":1756058634311,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/base.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":0,"failureMessages":[]}],"startTime":1756058617619,"endTime":1756058617622,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/bigint.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" $branded","status":"passed","title":"$branded","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded record","status":"passed","title":"branded record","duration":0,"failureMessages":[]}],"startTime":1756058616405,"endTime":1756058616408,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/brand.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic catch","status":"passed","title":"basic catch","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch fn does not run when parsing succeeds","status":"passed","title":"catch fn does not run when parsing succeeds","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic catch async","status":"passed","title":"basic catch async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch replace wrong types","status":"passed","title":"catch replace wrong types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch with transform","status":"passed","title":"catch with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch on existing optional","status":"passed","title":"catch on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on catch","status":"passed","title":"optional on catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complex chain example","status":"passed","title":"complex chain example","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeCatch","status":"passed","title":"removeCatch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained catch","status":"passed","title":"chained catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" native enum","status":"passed","title":"native enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum","status":"passed","title":"enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" reported issues with nested usage","status":"passed","title":"reported issues with nested usage","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catch error","status":"passed","title":"catch error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.input","status":"passed","title":"ctx.input","duration":0,"failureMessages":[]}],"startTime":1756058594571,"endTime":1756058594581,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/catch.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" coalesce","status":"passed","title":"coalesce","duration":1,"failureMessages":[]}],"startTime":1756058629585,"endTime":1756058629586,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/coalesce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string coercion","status":"passed","title":"string coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number coercion","status":"passed","title":"number coercion","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean coercion","status":"passed","title":"boolean coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint coercion","status":"passed","title":"bigint coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date coercion","status":"passed","title":"date coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override input type","status":"passed","title":"override input type","duration":1,"failureMessages":[]}],"startTime":1756058591645,"endTime":1756058591652,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/coerce.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" continuability","status":"passed","title":"continuability","duration":9,"failureMessages":[]}],"startTime":1756058593006,"endTime":1756058593015,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/continuability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string params","status":"passed","title":"string params","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non-continuable by default","status":"passed","title":"non-continuable by default","duration":1,"failureMessages":[]}],"startTime":1756058622535,"endTime":1756058622540,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/custom.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]}],"startTime":1756058626416,"endTime":1756058626419,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/date.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url recheck (resolved id: recheck) in C:/Users/scale/Code/edgeql/EdgeQL/node_modules/.pnpm/zod@3.25.76/node_modules/zod/src/v4/classic/tests/datetime.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/datetime.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic defaults","status":"passed","title":"basic defaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with optional","status":"passed","title":"default with optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with transform","status":"passed","title":"default with transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default on existing optional","status":"passed","title":"default on existing optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional on default","status":"passed","title":"optional on default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" removeDefault","status":"passed","title":"removeDefault","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" apply default at output","status":"passed","title":"apply default at output","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested","status":"passed","title":"nested","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" chained defaults","status":"passed","title":"chained defaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object optionality","status":"passed","title":"object optionality","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested prefault/default","status":"passed","title":"nested prefault/default","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing default","status":"passed","title":"failing default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial should not clobber defaults","status":"passed","title":"partial should not clobber defaults","duration":0,"failureMessages":[]}],"startTime":1756058592156,"endTime":1756058592167,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/default.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .describe","status":"passed","title":".describe","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" adding description with z.globalRegistry","status":"passed","title":"adding description with z.globalRegistry","duration":1,"failureMessages":[]}],"startTime":1756058621867,"endTime":1756058621870,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/description.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" _values","status":"passed","title":"_values","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse - object","status":"passed","title":"valid parse - object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - include discriminator key (deprecated)","status":"passed","title":"valid - include discriminator key (deprecated)","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - optional discriminator (object)","status":"passed","title":"valid - optional discriminator (object)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - discriminator value of various primitive types","status":"passed","title":"valid - discriminator value of various primitive types","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid - null","status":"passed","title":"invalid - null","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value","status":"passed","title":"invalid discriminator value","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid discriminator value - unionFallback","status":"passed","title":"invalid discriminator value - unionFallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid discriminator value, invalid data","status":"passed","title":"valid discriminator value, invalid data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" wrong schema - missing discriminator","status":"passed","title":"wrong schema - missing discriminator","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - valid","status":"passed","title":"async - valid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async - invalid","status":"passed","title":"async - invalid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid - literals with .default or .pipe","status":"passed","title":"valid - literals with .default or .pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum and nativeEnum","status":"passed","title":"enum and nativeEnum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" branded","status":"passed","title":"branded","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional and nullable","status":"passed","title":"optional and nullable","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple discriminators","status":"passed","title":"multiple discriminators","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" single element union","status":"passed","title":"single element union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested discriminated unions","status":"passed","title":"nested discriminated unions","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly literal discriminator","status":"passed","title":"readonly literal discriminator","duration":1,"failureMessages":[]}],"startTime":1756058585507,"endTime":1756058585531,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/discriminated-unions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" enum from string array","status":"passed","title":"enum from string array","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from const object","status":"passed","title":"enum from const object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from native enum","status":"passed","title":"enum from native enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from native enum with numeric keys","status":"passed","title":"enum from native enum with numeric keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" issue metadata","status":"passed","title":"issue metadata","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum from non-const inputs","status":"passed","title":"enum from non-const inputs","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get options","status":"passed","title":"get options","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly enum","status":"passed","title":"readonly enum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map","status":"passed","title":"error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type signatures","status":"passed","title":"type signatures","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract","status":"passed","title":"extract","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" exclude","status":"passed","title":"exclude","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error map inheritance","status":"passed","title":"error map inheritance","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly in ZodEnumDef","status":"passed","title":"readonly in ZodEnumDef","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid enum elementstring","status":"passed","title":"enum error message, invalid enum elementstring","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum error message, invalid type","status":"passed","title":"enum error message, invalid type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nativeEnum default error message","status":"passed","title":"nativeEnum default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with message returns the custom error message","status":"passed","title":"enum with message returns the custom error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum with diagonal keys","status":"passed","title":"enum with diagonal keys","duration":1,"failureMessages":[]}],"startTime":1756058589906,"endTime":1756058589914,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/enum.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" regular error","status":"passed","title":"regular error","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .flatten()","status":"passed","title":".flatten()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom .flatten()","status":"passed","title":"custom .flatten()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .format()","status":"passed","title":".format()","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom .format()","status":"passed","title":"custom .format()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" all errors","status":"passed","title":"all errors","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.treeifyError","status":"passed","title":"z.treeifyError","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.treeifyError 2","status":"passed","title":"z.treeifyError 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.prettifyError","status":"passed","title":"z.prettifyError","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.toDotPath","status":"passed","title":"z.toDotPath","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inheritance","status":"passed","title":"inheritance","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" disc union treeify/format","status":"passed","title":"disc union treeify/format","duration":1,"failureMessages":[]}],"startTime":1756058586537,"endTime":1756058586546,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/error-utils.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" error creation","status":"passed","title":"error creation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" do not allow error and message together","status":"passed","title":"do not allow error and message together","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" type error with custom error map","status":"passed","title":"type error with custom error map","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" refinement fail with params","status":"passed","title":"refinement fail with params","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" hard coded error  with custom errormap","status":"passed","title":"hard coded error  with custom errormap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default error message","status":"passed","title":"default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refine","status":"passed","title":"override error in refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override error in refinement","status":"passed","title":"override error in refinement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array minimum","status":"passed","title":"array minimum","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path in custom error map","status":"passed","title":"custom path in custom error map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" root level formatting","status":"passed","title":"root level formatting","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom path","status":"passed","title":"custom path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" no abort early on refinements","status":"passed","title":"no abort early on refinements","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" detect issue with input fallback","status":"passed","title":"detect issue with input fallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting","status":"passed","title":"formatting","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" formatting with nullable and optional fields","status":"passed","title":"formatting with nullable and optional fields","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferFlattenedErrors","status":"passed","title":"inferFlattenedErrors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema-bound error map","status":"passed","title":"schema-bound error map","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bound error map overrides contextual","status":"passed","title":"bound error map overrides contextual","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.config customError ","status":"passed","title":"z.config customError ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty string error message","status":"passed","title":"empty string error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont short circuit on continuable errors","status":"passed","title":"dont short circuit on continuable errors","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string error params","status":"passed","title":"string error params","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error inheritance","status":"passed","title":"error inheritance","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error serialization","status":"passed","title":"error serialization","duration":2,"failureMessages":[]}],"startTime":1756058584922,"endTime":1756058584945,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/error.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url @web-std/file (resolved id: @web-std/file) in C:/Users/scale/Code/edgeql/EdgeQL/node_modules/.pnpm/zod@3.25.76/node_modules/zod/src/v4/classic/tests/file.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/file.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" first party switch","status":"passed","title":"first party switch","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" $ZodSchemaTypes","status":"passed","title":"$ZodSchemaTypes","duration":0,"failureMessages":[]}],"startTime":1756058611261,"endTime":1756058611262,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/firstparty.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 1","status":"passed","title":"parsed function fail 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parsed function fail 2","status":"passed","title":"parsed function fail 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 1","status":"passed","title":"function inference 1","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" args method","status":"passed","title":"args method","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function inference 2","status":"passed","title":"function inference 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid function run","status":"passed","title":"valid function run","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input validation error","status":"passed","title":"input validation error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array inputs","status":"passed","title":"array inputs","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output validation error","status":"passed","title":"output validation error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function with async refinements","status":"passed","title":"function with async refinements","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" non async function with async refinements should fail","status":"passed","title":"non async function with async refinements should fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extra parameters with rest","status":"passed","title":"extra parameters with rest","duration":0,"failureMessages":[]}],"startTime":1756058597834,"endTime":1756058597844,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/function.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" generics","status":"passed","title":"generics","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generics with optional","status":"passed","title":"generics with optional","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nested no undefined","status":"passed","title":"nested no undefined","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" generic on output type","status":"passed","title":"generic on output type","duration":0,"failureMessages":[]}],"startTime":1756058616872,"endTime":1756058616877,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/generics.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.boolean","status":"passed","title":"z.boolean","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.bigint","status":"passed","title":"z.bigint","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.symbol","status":"passed","title":"z.symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.date","status":"passed","title":"z.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.string","status":"passed","title":"z.coerce.string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.number","status":"passed","title":"z.coerce.number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.boolean","status":"passed","title":"z.coerce.boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.bigint","status":"passed","title":"z.coerce.bigint","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.date","status":"passed","title":"z.coerce.date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.datetime","status":"passed","title":"z.iso.datetime","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.date","status":"passed","title":"z.iso.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.time","status":"passed","title":"z.iso.time","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.duration","status":"passed","title":"z.iso.duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.undefined","status":"passed","title":"z.undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.any","status":"passed","title":"z.any","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.unknown","status":"passed","title":"z.unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.never","status":"passed","title":"z.never","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.void","status":"passed","title":"z.void","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.array","status":"passed","title":"z.array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.union","status":"passed","title":"z.union","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.intersection","status":"passed","title":"z.intersection","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.tuple","status":"passed","title":"z.tuple","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.record","status":"passed","title":"z.record","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map","status":"passed","title":"z.map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map invalid_element","status":"passed","title":"z.map invalid_element","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map async","status":"passed","title":"z.map async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.set","status":"passed","title":"z.set","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum","status":"passed","title":"z.enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum - native","status":"passed","title":"z.enum - native","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nativeEnum","status":"passed","title":"z.nativeEnum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.literal","status":"passed","title":"z.literal","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file","status":"passed","title":"z.file","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform async","status":"passed","title":"z.transform async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.preprocess","status":"passed","title":"z.preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.optional","status":"passed","title":"z.optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nullable","status":"passed","title":"z.nullable","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.default","status":"passed","title":"z.default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catch","status":"passed","title":"z.catch","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nan","status":"passed","title":"z.nan","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe","status":"passed","title":"z.pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.readonly","status":"passed","title":"z.readonly","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.templateLiteral","status":"passed","title":"z.templateLiteral","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom schema","status":"passed","title":"z.custom schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom check","status":"passed","title":"z.custom check","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.check","status":"passed","title":"z.check","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.instanceof","status":"passed","title":"z.instanceof","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.refine","status":"passed","title":"z.refine","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.$brand()","status":"passed","title":"z.$brand()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lazy","status":"passed","title":"z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.json","status":"passed","title":"z.json","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.promise","status":"passed","title":"z.promise","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" isPlainObject","status":"passed","title":"isPlainObject","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" def typing","status":"passed","title":"def typing","duration":2,"failureMessages":[]}],"startTime":1756058584542,"endTime":1756058584581,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" instanceof","status":"passed","title":"instanceof","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" instanceof fatal","status":"passed","title":"instanceof fatal","duration":1,"failureMessages":[]}],"startTime":1756058625394,"endTime":1756058625398,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/instanceof.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object intersection","status":"passed","title":"object intersection","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object intersection: loose","status":"passed","title":"object intersection: loose","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object intersection: strict","status":"passed","title":"object intersection: strict","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection","status":"passed","title":"deep intersection","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deep intersection of arrays","status":"passed","title":"deep intersection of arrays","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid intersection types","status":"passed","title":"invalid intersection types","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge (incompatible lengths)","status":"passed","title":"invalid array merge (incompatible lengths)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid array merge (incompatible elements)","status":"passed","title":"invalid array merge (incompatible elements)","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid object merge","status":"passed","title":"invalid object merge","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid deep merge of object and array combination","status":"passed","title":"invalid deep merge of object and array combination","duration":1,"failureMessages":[]}],"startTime":1756058602082,"endTime":1756058602093,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/intersection.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" <anonymous>","status":"passed","title":"<anonymous>","duration":0,"failureMessages":[]}],"startTime":1756058609666,"endTime":1756058609666,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/json.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" opt passthrough","status":"passed","title":"opt passthrough","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" schema getter","status":"passed","title":"schema getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lazy proxy","status":"passed","title":"lazy proxy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursive union wit z.lazy","status":"passed","title":"recursive union wit z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with lazy","status":"passed","title":"mutual recursion with lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with cyclical data","status":"passed","title":"mutual recursion with cyclical data","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" complicated self-recursion","status":"passed","title":"complicated self-recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lazy initialization","status":"passed","title":"lazy initialization","duration":1,"failureMessages":[]}],"startTime":1756058602349,"endTime":1756058602358,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/lazy.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should have `input` field with data","status":"passed","title":"invalid_literal should have `input` field with data","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should return default message","status":"passed","title":"invalid_literal should return default message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" invalid_literal should return custom message","status":"passed","title":"invalid_literal should return custom message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal default error message","status":"passed","title":"literal default error message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint default error message","status":"passed","title":"literal bigint default error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .value getter","status":"passed","title":".value getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly","status":"passed","title":"readonly","duration":0,"failureMessages":[]}],"startTime":1756058613837,"endTime":1756058613843,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/literal.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Set is given","status":"passed","title":"throws when a Set is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has invalid key and invalid input","status":"passed","title":"throws when the given map has invalid key and invalid input","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given map has multiple invalid entries","status":"passed","title":"throws when the given map has multiple invalid entries","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dirty","status":"passed","title":"dirty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" map with object keys","status":"passed","title":"map with object keys","duration":1,"failureMessages":[]}],"startTime":1756058601318,"endTime":1756058601326,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/map.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" passing validations","status":"passed","title":"passing validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing validations","status":"passed","title":"failing validations","duration":2,"failureMessages":[]}],"startTime":1756058630375,"endTime":1756058630378,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/nan.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nested refinements","status":"passed","title":"nested refinements","duration":7,"failureMessages":[]}],"startTime":1756058607819,"endTime":1756058607826,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/nested-refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" nonoptional","status":"passed","title":"nonoptional","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonoptional with default","status":"passed","title":"nonoptional with default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonoptional in object","status":"passed","title":"nonoptional in object","duration":2,"failureMessages":[]}],"startTime":1756058614576,"endTime":1756058614582,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/nonoptional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .nullable()","status":"passed","title":".nullable()","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nullable unwrap","status":"passed","title":".nullable unwrap","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]}],"startTime":1756058631862,"endTime":1756058631865,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/nullable.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.number() basic validation","status":"passed","title":"z.number() basic validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" NaN validation","status":"passed","title":"NaN validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" Infinity validation","status":"passed","title":"Infinity validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .gt() validation","status":"passed","title":".gt() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .gte() validation","status":"passed","title":".gte() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .min() validation","status":"passed","title":".min() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .lt() validation","status":"passed","title":".lt() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .lte() validation","status":"passed","title":".lte() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .max() validation","status":"passed","title":".max() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .int() validation","status":"passed","title":".int() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .positive() validation","status":"passed","title":".positive() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .negative() validation","status":"passed","title":".negative() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nonpositive() validation","status":"passed","title":".nonpositive() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .nonnegative() validation","status":"passed","title":".nonnegative() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .multipleOf() with positive divisor","status":"passed","title":".multipleOf() with positive divisor","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .multipleOf() with negative divisor","status":"passed","title":".multipleOf() with negative divisor","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .step() validation","status":"passed","title":".step() validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .finite() validation","status":"passed","title":".finite() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .safe() validation","status":"passed","title":".safe() validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min value getters","status":"passed","title":"min value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" max value getters","status":"passed","title":"max value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int getter","status":"passed","title":"int getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" finite getter","status":"passed","title":"finite getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string format methods","status":"passed","title":"string format methods","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error customization","status":"passed","title":"error customization","duration":0,"failureMessages":[]}],"startTime":1756058591383,"endTime":1756058591399,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" object type inference","status":"passed","title":"object type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknown throw","status":"passed","title":"unknown throw","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shape() should return schema of particular key","status":"passed","title":"shape() should return schema of particular key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" correct parsing","status":"passed","title":"correct parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict by default","status":"passed","title":"nonstrict by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" parse optional keys ","status":"passed","title":"parse optional keys ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty object","status":"passed","title":"empty object","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip by default","status":"passed","title":"strip by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys override","status":"passed","title":"unknownkeys override","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough unknown","status":"passed","title":"passthrough unknown","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strip unknown","status":"passed","title":"strip unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strict","status":"passed","title":"strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall inference","status":"passed","title":"catchall inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall overrides strict","status":"passed","title":"catchall overrides strict","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optional keys are unset","status":"passed","title":"optional keys are unset","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall parsing","status":"passed","title":"catchall parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonexistent keys","status":"passed","title":"nonexistent keys","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test async union","status":"passed","title":"test async union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test inferred merged type","status":"passed","title":"test inferred merged type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type with Record shape","status":"passed","title":"inferred type with Record shape","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred merged object type with optional properties","status":"passed","title":"inferred merged object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred unioned object type with optional properties","status":"passed","title":"inferred unioned object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred enum type","status":"passed","title":"inferred enum type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred partial object type with optional properties","status":"passed","title":"inferred partial object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred picked object type with optional properties","status":"passed","title":"inferred picked object type with optional properties","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inferred type for unknown/any keys","status":"passed","title":"inferred type for unknown/any keys","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" strictObject","status":"passed","title":"strictObject","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object with refine","status":"passed","title":"object with refine","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with date","status":"passed","title":"intersection of object with date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" intersection of object with refine with date","status":"passed","title":"intersection of object with refine with date","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" constructor key","status":"passed","title":"constructor key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" catchall","status":"passed","title":"catchall","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unknownkeys merging","status":"passed","title":"unknownkeys merging","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should return schema with new key","status":"passed","title":"extend() should return schema with new key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extend() should have power to override existing key","status":"passed","title":"extend() should have power to override existing key","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough index signature","status":"passed","title":"passthrough index signature","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null prototype","status":"passed","title":"null prototype","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty objects","status":"passed","title":"empty objects","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preserve key order","status":"passed","title":"preserve key order","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" empty shape","status":"passed","title":"empty shape","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" zodtype assignability","status":"passed","title":"zodtype assignability","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" index signature in shape","status":"passed","title":"index signature in shape","duration":0,"failureMessages":[]}],"startTime":1756058585855,"endTime":1756058585877,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" .optional()","status":"passed","title":".optional()","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unwrap","status":"passed","title":"unwrap","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" optionality","status":"passed","title":"optionality","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe optionality","status":"passed","title":"pipe optionality","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe optionality inside objects","status":"passed","title":"pipe optionality inside objects","duration":1,"failureMessages":[]}],"startTime":1756058604602,"endTime":1756058604612,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/optional.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" shallow inference","status":"passed","title":"shallow inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" shallow partial parse","status":"passed","title":"shallow partial parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required","status":"passed","title":"required","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required inference","status":"passed","title":"required inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask","status":"passed","title":"required with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" required with mask -- ignore falsy values","status":"passed","title":"required with mask -- ignore falsy values","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask","status":"passed","title":"partial with mask","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial with mask -- ignore falsy values","status":"passed","title":"partial with mask -- ignore falsy values","duration":2,"failureMessages":[]}],"startTime":1756058600916,"endTime":1756058600926,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/partial.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" pick type inference","status":"passed","title":"pick type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - success","status":"passed","title":"pick parse - success","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick parse - fail","status":"passed","title":"pick parse - fail","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick - remove optional","status":"passed","title":"pick - remove optional","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit type inference","status":"passed","title":"omit type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - success","status":"passed","title":"omit parse - success","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit parse - fail","status":"passed","title":"omit parse - fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" omit - remove optional","status":"passed","title":"omit - remove optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict inference","status":"passed","title":"nonstrict inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - pass","status":"passed","title":"nonstrict parsing - pass","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nonstrict parsing - fail","status":"passed","title":"nonstrict parsing - fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick/omit/required/partial - do not allow unknown keys","status":"passed","title":"pick/omit/required/partial - do not allow unknown keys","duration":1,"failureMessages":[]}],"startTime":1756058603868,"endTime":1756058603876,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/pickomit.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string to number pipe","status":"passed","title":"string to number pipe","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string to number pipe async","status":"passed","title":"string to number pipe async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string with default fallback","status":"passed","title":"string with default fallback","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" continue on non-fatal errors","status":"passed","title":"continue on non-fatal errors","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" break on fatal errors","status":"passed","title":"break on fatal errors","duration":1,"failureMessages":[]}],"startTime":1756058619066,"endTime":1756058619075,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/pipe.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" basic prefault","status":"passed","title":"basic prefault","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" prefault inside object","status":"passed","title":"prefault inside object","duration":1,"failureMessages":[]}],"startTime":1756058625654,"endTime":1756058625657,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/prefault.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" preprocess","status":"passed","title":"preprocess","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess","status":"passed","title":"async preprocess","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ctx.addIssue accepts string","status":"passed","title":"ctx.addIssue accepts string","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue with parse","status":"passed","title":"preprocess ctx.addIssue with parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue non-fatal by default","status":"passed","title":"preprocess ctx.addIssue non-fatal by default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess ctx.addIssue fatal true","status":"passed","title":"preprocess ctx.addIssue fatal true","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async preprocess ctx.addIssue with parseAsync","status":"passed","title":"async preprocess ctx.addIssue with parseAsync","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in preprocess","status":"passed","title":"z.NEVER in preprocess","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess as the second property of object","status":"passed","title":"preprocess as the second property of object","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" preprocess validates with sibling errors","status":"passed","title":"preprocess validates with sibling errors","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" perform transform with non-fatal issues","status":"passed","title":"perform transform with non-fatal issues","duration":1,"failureMessages":[]}],"startTime":1756058595339,"endTime":1756058595353,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/preprocess.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" literal string schema","status":"passed","title":"literal string schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal number schema","status":"passed","title":"literal number schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal boolean schema","status":"passed","title":"literal boolean schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal bigint schema","status":"passed","title":"literal bigint schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string schema","status":"passed","title":"string schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number schema","status":"passed","title":"number schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bigint schema","status":"passed","title":"bigint schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" boolean schema","status":"passed","title":"boolean schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" date schema","status":"passed","title":"date schema","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" symbol schema","status":"passed","title":"symbol schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" undefined schema","status":"passed","title":"undefined schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" null schema","status":"passed","title":"null schema","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" primitive inference","status":"passed","title":"primitive inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" get literal values","status":"passed","title":"get literal values","duration":1,"failureMessages":[]}],"startTime":1756058592468,"endTime":1756058592478,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/primitive.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" promise inference","status":"passed","title":"promise inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing success","status":"passed","title":"promise parsing success","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail 2","status":"passed","title":"promise parsing fail 2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" promise parsing fail","status":"passed","title":"promise parsing fail","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync promise parsing","status":"passed","title":"sync promise parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function pass","status":"passed","title":"async function pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async function fail","status":"passed","title":"async function fail","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async promise parsing","status":"passed","title":"async promise parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" resolves","status":"passed","title":"resolves","duration":0,"failureMessages":[]}],"startTime":1756058616124,"endTime":1756058616130,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/promise.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":2,"failureMessages":[]}],"startTime":1756058632809,"endTime":1756058632811,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/prototypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" flat inference","status":"passed","title":"flat inference","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object freezing","status":"passed","title":"object freezing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async object freezing","status":"passed","title":"async object freezing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly inference","status":"passed","title":"readonly inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly parse","status":"passed","title":"readonly parse","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly parse with tuples","status":"passed","title":"readonly parse with tuples","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly and the get method","status":"passed","title":"readonly and the get method","duration":1,"failureMessages":[]}],"startTime":1756058587582,"endTime":1756058587593,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/readonly.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" enum exhaustiveness","status":"passed","title":"enum exhaustiveness","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" literal exhaustiveness","status":"passed","title":"literal exhaustiveness","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe exhaustiveness","status":"passed","title":"pipe exhaustiveness","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union exhaustiveness","status":"passed","title":"union exhaustiveness","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string record parse - pass","status":"passed","title":"string record parse - pass","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" key and value getters","status":"passed","title":"key and value getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" is not vulnerable to prototype pollution","status":"passed","title":"is not vulnerable to prototype pollution","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dont remove undefined values","status":"passed","title":"dont remove undefined values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" allow undefined values","status":"passed","title":"allow undefined values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async parsing","status":"passed","title":"async parsing","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async parsing","status":"passed","title":"async parsing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" partial record","status":"passed","title":"partial record","duration":1,"failureMessages":[]}],"startTime":1756058590928,"endTime":1756058590939,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/record.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion - native","status":"passed","title":"mutual recursion - native","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick and omit with getter","status":"passed","title":"pick and omit with getter","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred self-recursion","status":"passed","title":"deferred self-recursion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred mutual recursion","status":"passed","title":"deferred mutual recursion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion with meta","status":"passed","title":"mutual recursion with meta","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion compatibility","status":"passed","title":"recursion compatibility","duration":0,"failureMessages":[]}],"startTime":1756058593843,"endTime":1756058593851,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/recursive-types.test.ts"},{"assertionResults":[{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should create a new schema instance when refining","status":"passed","title":"should create a new schema instance when refining","duration":3,"failureMessages":[]},{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should validate according to refinement logic","status":"passed","title":"should validate according to refinement logic","duration":3,"failureMessages":[]},{"ancestorTitles":["","basic refinement functionality"],"fullName":" basic refinement functionality should validate strict mode correctly","status":"passed","title":"should validate strict mode correctly","duration":1,"failureMessages":[]},{"ancestorTitles":["","refinement with custom error messages"],"fullName":" refinement with custom error messages should use custom error message when validation fails","status":"passed","title":"should use custom error message when validation fails","duration":1,"failureMessages":[]},{"ancestorTitles":["","async refinements"],"fullName":" async refinements should support async refinement functions","status":"passed","title":"should support async refinement functions","duration":2,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with continue: false","status":"passed","title":"should abort early with continue: false","duration":0,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with fatal: true","status":"passed","title":"should abort early with fatal: true","duration":1,"failureMessages":[]},{"ancestorTitles":["","early termination options"],"fullName":" early termination options should abort early with abort flag","status":"passed","title":"should abort early with abort flag","duration":0,"failureMessages":[]},{"ancestorTitles":["","custom error paths"],"fullName":" custom error paths should use custom path in error message","status":"passed","title":"should use custom path in error message","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should support multiple validation rules","status":"passed","title":"should support multiple validation rules","duration":0,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should support async superRefine","status":"passed","title":"should support async superRefine","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should accept string as shorthand for custom error message","status":"passed","title":"should accept string as shorthand for custom error message","duration":1,"failureMessages":[]},{"ancestorTitles":["","superRefine functionality"],"fullName":" superRefine functionality should respect fatal flag in superRefine","status":"passed","title":"should respect fatal flag in superRefine","duration":0,"failureMessages":[]},{"ancestorTitles":["","chained refinements"],"fullName":" chained refinements should collect all validation errors when appropriate","status":"passed","title":"should collect all validation errors when appropriate","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" when","status":"passed","title":"when","duration":3,"failureMessages":[]}],"startTime":1756058586144,"endTime":1756058586162,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/refine.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" globalRegistry","status":"passed","title":"globalRegistry","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry","status":"passed","title":"z.registry","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry no metadata","status":"passed","title":"z.registry no metadata","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.registry with schema constraints","status":"passed","title":"z.registry with schema constraints","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output type in registry meta","status":"passed","title":"output type in registry meta","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" output type in registry meta - objects and arrays","status":"passed","title":"output type in registry meta - objects and arrays","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type in registry meta","status":"passed","title":"input type in registry meta","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type in registry meta - objects and arrays","status":"passed","title":"input type in registry meta - objects and arrays","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .meta method","status":"passed","title":".meta method","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .meta metadata does not bubble up","status":"passed","title":".meta metadata does not bubble up","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" .describe","status":"passed","title":".describe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inherit across clone","status":"passed","title":"inherit across clone","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" loose examples","status":"passed","title":"loose examples","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function meta witout replacement","status":"passed","title":"function meta witout replacement","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" function meta with replacement","status":"passed","title":"function meta with replacement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" test .clear()","status":"passed","title":"test .clear()","duration":0,"failureMessages":[]}],"startTime":1756058598683,"endTime":1756058598689,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/registries.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" type inference","status":"passed","title":"type inference","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse","status":"passed","title":"valid parse","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse async","status":"passed","title":"valid parse async","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" valid parse: size-related methods","status":"passed","title":"valid parse: size-related methods","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when parsing empty set in nonempty ","status":"passed","title":"failing when parsing empty set in nonempty ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is smaller than min() ","status":"passed","title":"failing when set is smaller than min() ","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" failing when set is bigger than max() ","status":"passed","title":"failing when set is bigger than max() ","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" doesn’t throw when an empty set is given","status":"passed","title":"doesn’t throw when an empty set is given","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when a Map is given","status":"passed","title":"throws when a Map is given","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has invalid input","status":"passed","title":"throws when the given set has invalid input","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" throws when the given set has multiple invalid entries","status":"passed","title":"throws when the given set has multiple invalid entries","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min/max","status":"passed","title":"min/max","duration":1,"failureMessages":[]}],"startTime":1756058599859,"endTime":1756058599866,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/set.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":1,"failureMessages":[]}],"startTime":1756058621142,"endTime":1756058621147,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/standard-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string format methods","status":"passed","title":"string format methods","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringFormat","status":"passed","title":"z.stringFormat","duration":3,"failureMessages":[]}],"startTime":1756058610701,"endTime":1756058610708,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/string-formats.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" length checks","status":"passed","title":"length checks","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" includes","status":"passed","title":"includes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" startswith/endswith","status":"passed","title":"startswith/endswith","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" email validations","status":"passed","title":"email validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64 validations","status":"passed","title":"base64 validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" base64url validations","status":"passed","title":"base64url validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" big base64 and base64url","status":"passed","title":"big base64 and base64url","duration":116,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" jwt token","status":"passed","title":"jwt token","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url validations","status":"passed","title":"url validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" httpurl","status":"passed","title":"httpurl","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" url error overrides","status":"passed","title":"url error overrides","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" emoji validations","status":"passed","title":"emoji validations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" nanoid","status":"passed","title":"nanoid","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad nanoid","status":"passed","title":"bad nanoid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" good uuid","status":"passed","title":"good uuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad uuid","status":"passed","title":"bad uuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" good guid","status":"passed","title":"good guid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" bad guid","status":"passed","title":"bad guid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid","status":"passed","title":"cuid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cuid2","status":"passed","title":"cuid2","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ulid","status":"passed","title":"ulid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" xid","status":"passed","title":"xid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" ksuid","status":"passed","title":"ksuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex","status":"passed","title":"regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error message","status":"passed","title":"regexp error message","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexp error custom message","status":"passed","title":"regexp error custom message","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regex lastIndex reset","status":"passed","title":"regex lastIndex reset","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" format","status":"passed","title":"format","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" min max getters","status":"passed","title":"min max getters","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" trim","status":"passed","title":"trim","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" lowerCase","status":"passed","title":"lowerCase","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IPv4 validation","status":"passed","title":"IPv4 validation","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" IPv6 validation","status":"passed","title":"IPv6 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR v4 validation","status":"passed","title":"CIDR v4 validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" CIDR v6 validation","status":"passed","title":"CIDR v6 validation","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" E.164 validation","status":"passed","title":"E.164 validation","duration":1,"failureMessages":[]}],"startTime":1756058583265,"endTime":1756058583417,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.stringbool","status":"passed","title":"z.stringbool","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom values","status":"passed","title":"custom values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom values - case sensitive","status":"passed","title":"custom values - case sensitive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringbool with custom error messages","status":"passed","title":"z.stringbool with custom error messages","duration":1,"failureMessages":[]}],"startTime":1756058615601,"endTime":1756058615608,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/stringbool.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" template literal type inference","status":"passed","title":"template literal type inference","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal unsupported args","status":"passed","title":"template literal unsupported args","duration":9,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - success - basic cases","status":"passed","title":"template literal parsing - success - basic cases","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - basic cases","status":"passed","title":"template literal parsing - failure - basic cases","duration":8,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" regexes","status":"passed","title":"regexes","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - success - complex cases","status":"passed","title":"template literal parsing - success - complex cases","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - complex cases","status":"passed","title":"template literal parsing - failure - complex cases","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" template literal parsing - failure - issue format","status":"passed","title":"template literal parsing - failure - issue format","duration":1,"failureMessages":[]}],"startTime":1756058583901,"endTime":1756058583928,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/template-literal.test.ts"},{"assertionResults":[{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema primitive types","status":"passed","title":"primitive types","duration":14,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema unsupported schema types","status":"passed","title":"unsupported schema types","duration":5,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema string formats","status":"passed","title":"string formats","duration":2,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema string patterns","status":"passed","title":"string patterns","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema number constraints","status":"passed","title":"number constraints","duration":3,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema arrays","status":"passed","title":"arrays","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema unions","status":"passed","title":"unions","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema intersections","status":"passed","title":"intersections","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema record","status":"passed","title":"record","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema tuple","status":"passed","title":"tuple","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema promise","status":"passed","title":"promise","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema lazy","status":"passed","title":"lazy","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema enum","status":"passed","title":"enum","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema literal","status":"passed","title":"literal","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema pipe","status":"passed","title":"pipe","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema simple objects","status":"passed","title":"simple objects","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema additionalproperties in z.object","status":"passed","title":"additionalproperties in z.object","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema catchall objects","status":"passed","title":"catchall objects","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema optional fields - object","status":"passed","title":"optional fields - object","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema recursive object","status":"passed","title":"recursive object","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema simple interface","status":"passed","title":"simple interface","duration":0,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema catchall interface","status":"passed","title":"catchall interface","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema recursive interface schemas","status":"passed","title":"recursive interface schemas","duration":1,"failureMessages":[]},{"ancestorTitles":["","toJSONSchema"],"fullName":" toJSONSchema mutually recursive interface schemas","status":"passed","title":"mutually recursive interface schemas","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override","status":"passed","title":"override","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override: do not run on references","status":"passed","title":"override: do not run on references","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override with refs","status":"passed","title":"override with refs","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override execution order","status":"passed","title":"override execution order","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" override with path","status":"passed","title":"override with path","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pipe","status":"passed","title":"pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" passthrough schemas","status":"passed","title":"passthrough schemas","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" extract schemas with id","status":"passed","title":"extract schemas with id","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" unrepresentable literal values are ignored","status":"passed","title":"unrepresentable literal values are ignored","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" describe with id","status":"passed","title":"describe with id","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overwrite id","status":"passed","title":"overwrite id","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" overwrite descriptions","status":"passed","title":"overwrite descriptions","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" top-level readonly","status":"passed","title":"top-level readonly","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic registry","status":"passed","title":"basic registry","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" _ref","status":"passed","title":"_ref","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" defaults/prefaults","status":"passed","title":"defaults/prefaults","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" input type","status":"passed","title":"input type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" examples on pipe","status":"passed","title":"examples on pipe","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" use output type for preprocess","status":"passed","title":"use output type for preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" flatten simple intersections","status":"passed","title":"flatten simple intersections","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file()","status":"passed","title":"z.file()","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" custom toJSONSchema","status":"passed","title":"custom toJSONSchema","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cycle detection - root","status":"passed","title":"cycle detection - root","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" cycle detection - mutual recursion","status":"passed","title":"cycle detection - mutual recursion","duration":1,"failureMessages":[]}],"startTime":1756058583734,"endTime":1756058583790,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/to-json-schema.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parse","status":"passed","title":"transform ctx.addIssue with parse","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform ctx.addIssue with parseAsync","status":"passed","title":"transform ctx.addIssue with parseAsync","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.NEVER in transform","status":"passed","title":"z.NEVER in transform","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" basic transformations","status":"passed","title":"basic transformations","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" coercion","status":"passed","title":"coercion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async coercion","status":"passed","title":"async coercion","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sync coercion async error","status":"passed","title":"sync coercion async error","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default","status":"passed","title":"default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" dynamic default","status":"passed","title":"dynamic default","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default when property is null or undefined","status":"passed","title":"default when property is null or undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" default with falsy values","status":"passed","title":"default with falsy values","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" object typing","status":"passed","title":"object typing","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" transform method overloads","status":"passed","title":"transform method overloads","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multiple transformers","status":"passed","title":"multiple transformers","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" short circuit on dirty","status":"passed","title":"short circuit on dirty","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async short circuit on dirty","status":"passed","title":"async short circuit on dirty","duration":0,"failureMessages":[]}],"startTime":1756058598319,"endTime":1756058598331,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/transform.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" successful validation","status":"passed","title":"successful validation","duration":6,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" async validation","status":"passed","title":"async validation","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with optional elements","status":"passed","title":"tuple with optional elements","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with optional elements followed by required","status":"passed","title":"tuple with optional elements followed by required","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" tuple with rest schema","status":"passed","title":"tuple with rest schema","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" sparse array input","status":"passed","title":"sparse array input","duration":0,"failureMessages":[]}],"startTime":1756058603139,"endTime":1756058603149,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/tuple.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" function parsing","status":"passed","title":"function parsing","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union 2","status":"passed","title":"union 2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return valid over invalid","status":"passed","title":"return valid over invalid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" return errors from both union arms","status":"passed","title":"return errors from both union arms","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" options getter","status":"passed","title":"options getter","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" readonly union","status":"passed","title":"readonly union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union inferred types","status":"passed","title":"union inferred types","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" union values","status":"passed","title":"union values","duration":1,"failureMessages":[]}],"startTime":1756058613160,"endTime":1756058613168,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/union.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" string length","status":"passed","title":"string length","duration":4,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string min/max","status":"passed","title":"string min/max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" string max","status":"passed","title":"string max","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number min","status":"passed","title":"number min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number gte","status":"passed","title":"number gte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number gt","status":"passed","title":"number gt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number max","status":"passed","title":"number max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number lte","status":"passed","title":"number lte","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number lt","status":"passed","title":"number lt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonnegative","status":"passed","title":"number nonnegative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number nonpositive","status":"passed","title":"number nonpositive","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number negative","status":"passed","title":"number negative","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" number positive","status":"passed","title":"number positive","duration":0,"failureMessages":[]}],"startTime":1756058596062,"endTime":1756058596070,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/validations.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" void","status":"passed","title":"void","duration":3,"failureMessages":[]}],"startTime":1756058634026,"endTime":1756058634029,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/classic/tests/void.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" assignability","status":"passed","title":"assignability","duration":5,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" assignability with type narrowing","status":"passed","title":"assignability with type narrowing","duration":0,"failureMessages":[]}],"startTime":1756058609963,"endTime":1756058609968,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/assignability.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" branded types","status":"passed","title":"branded types","duration":2,"failureMessages":[]}],"startTime":1756058619346,"endTime":1756058619348,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/brand.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.lt","status":"passed","title":"z.lt","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lte","status":"passed","title":"z.lte","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.max","status":"passed","title":"z.max","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.gt","status":"passed","title":"z.gt","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.gte","status":"passed","title":"z.gte","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.min","status":"passed","title":"z.min","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.maxLength","status":"passed","title":"z.maxLength","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.minLength","status":"passed","title":"z.minLength","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.length","status":"passed","title":"z.length","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.regex","status":"passed","title":"z.regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.includes","status":"passed","title":"z.includes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.startsWith","status":"passed","title":"z.startsWith","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.endsWith","status":"passed","title":"z.endsWith","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lowercase","status":"passed","title":"z.lowercase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uppercase","status":"passed","title":"z.uppercase","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.overwrite","status":"passed","title":"z.overwrite","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" abort early","status":"passed","title":"abort early","duration":1,"failureMessages":[]}],"startTime":1756058605281,"endTime":1756058605288,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/checks.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" min/max","status":"passed","title":"min/max","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" multipleOf","status":"passed","title":"multipleOf","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int64 format","status":"passed","title":"int64 format","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" int32 format","status":"passed","title":"int32 format","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" array size","status":"passed","title":"array size","duration":1,"failureMessages":[]}],"startTime":1756058623978,"endTime":1756058623982,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/computed.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" no locale by default","status":"passed","title":"no locale by default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" error inheritance","status":"passed","title":"error inheritance","duration":0,"failureMessages":[]}],"startTime":1756058630618,"endTime":1756058630620,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/error.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.function","status":"passed","title":"z.function","duration":2,"failureMessages":[]}],"startTime":1756058623230,"endTime":1756058623232,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/functions.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.boolean","status":"passed","title":"z.boolean","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.bigint","status":"passed","title":"z.bigint","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.symbol","status":"passed","title":"z.symbol","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.date","status":"passed","title":"z.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.string","status":"passed","title":"z.coerce.string","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.number","status":"passed","title":"z.coerce.number","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.boolean","status":"passed","title":"z.coerce.boolean","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.bigint","status":"passed","title":"z.coerce.bigint","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.coerce.date","status":"passed","title":"z.coerce.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.datetime","status":"passed","title":"z.iso.datetime","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.date","status":"passed","title":"z.iso.date","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.time","status":"passed","title":"z.iso.time","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.iso.duration","status":"passed","title":"z.iso.duration","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.undefined","status":"passed","title":"z.undefined","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.null","status":"passed","title":"z.null","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.any","status":"passed","title":"z.any","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.unknown","status":"passed","title":"z.unknown","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.never","status":"passed","title":"z.never","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.void","status":"passed","title":"z.void","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.array","status":"passed","title":"z.array","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.union","status":"passed","title":"z.union","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.intersection","status":"passed","title":"z.intersection","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.tuple","status":"passed","title":"z.tuple","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.record","status":"passed","title":"z.record","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map","status":"passed","title":"z.map","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map invalid_element","status":"passed","title":"z.map invalid_element","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.map async","status":"passed","title":"z.map async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.set","status":"passed","title":"z.set","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum","status":"passed","title":"z.enum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.enum - native","status":"passed","title":"z.enum - native","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nativeEnum","status":"passed","title":"z.nativeEnum","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.literal","status":"passed","title":"z.literal","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.file","status":"passed","title":"z.file","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform async","status":"passed","title":"z.transform async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.preprocess","status":"passed","title":"z.preprocess","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.optional","status":"passed","title":"z.optional","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nullable","status":"passed","title":"z.nullable","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.default","status":"passed","title":"z.default","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catch","status":"passed","title":"z.catch","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nan","status":"passed","title":"z.nan","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe","status":"passed","title":"z.pipe","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.readonly","status":"passed","title":"z.readonly","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.templateLiteral","status":"passed","title":"z.templateLiteral","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.custom","status":"passed","title":"z.custom","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.check","status":"passed","title":"z.check","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.instanceof","status":"passed","title":"z.instanceof","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.refine","status":"passed","title":"z.refine","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.transform","status":"passed","title":"z.transform","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.$brand()","status":"passed","title":"z.$brand()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.lazy","status":"passed","title":"z.lazy","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.json","status":"passed","title":"z.json","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.stringbool","status":"passed","title":"z.stringbool","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.promise","status":"passed","title":"z.promise","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pipe type enforcement","status":"passed","title":"z.pipe type enforcement","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" def typing","status":"passed","title":"def typing","duration":1,"failureMessages":[]}],"startTime":1756058584208,"endTime":1756058584245,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/index.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.number","status":"passed","title":"z.number","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.number async","status":"passed","title":"z.number async","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int","status":"passed","title":"z.int","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.float32","status":"passed","title":"z.float32","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.float64","status":"passed","title":"z.float64","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int32","status":"passed","title":"z.int32","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uint32","status":"passed","title":"z.uint32","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.int64","status":"passed","title":"z.int64","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uint64","status":"passed","title":"z.uint64","duration":1,"failureMessages":[]}],"startTime":1756058607530,"endTime":1756058607539,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/number.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.object","status":"passed","title":"z.object","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.object().check()","status":"passed","title":"z.object().check()","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.strictObject","status":"passed","title":"z.strictObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.looseObject","status":"passed","title":"z.looseObject","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.keyof","status":"passed","title":"z.keyof","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.extend","status":"passed","title":"z.extend","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.pick","status":"passed","title":"z.pick","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.omit","status":"passed","title":"z.omit","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.partial","status":"passed","title":"z.partial","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.partial with mask","status":"passed","title":"z.partial with mask","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.catchall","status":"passed","title":"z.catchall","duration":0,"failureMessages":[]}],"startTime":1756058600574,"endTime":1756058600581,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/object.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" prototype extension","status":"passed","title":"prototype extension","duration":0,"failureMessages":[]}],"startTime":1756058627179,"endTime":1756058627180,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/prototypes.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" recursion with z.lazy","status":"passed","title":"recursion with z.lazy","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion involving union type","status":"passed","title":"recursion involving union type","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" mutual recursion - native","status":"passed","title":"mutual recursion - native","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" pick and omit with getter","status":"passed","title":"pick and omit with getter","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" deferred self-recursion","status":"passed","title":"deferred self-recursion","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" recursion compatibility","status":"passed","title":"recursion compatibility","duration":0,"failureMessages":[]}],"startTime":1756058599458,"endTime":1756058599466,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/recursive-types.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" z.string","status":"passed","title":"z.string","duration":3,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.string with custom error","status":"passed","title":"z.string with custom error","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" inference in checks","status":"passed","title":"inference in checks","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.string async","status":"passed","title":"z.string async","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.uuid","status":"passed","title":"z.uuid","duration":2,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.email","status":"passed","title":"z.email","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url","status":"passed","title":"z.url","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with optional hostname regex","status":"passed","title":"z.url with optional hostname regex","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url - file urls","status":"passed","title":"z.url - file urls","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with optional protocol regex","status":"passed","title":"z.url with optional protocol regex","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with both hostname and protocol regexes","status":"passed","title":"z.url with both hostname and protocol regexes","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.url with invalid regex patterns","status":"passed","title":"z.url with invalid regex patterns","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.emoji","status":"passed","title":"z.emoji","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.nanoid","status":"passed","title":"z.nanoid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.cuid","status":"passed","title":"z.cuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.cuid2","status":"passed","title":"z.cuid2","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ulid","status":"passed","title":"z.ulid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.xid","status":"passed","title":"z.xid","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ksuid","status":"passed","title":"z.ksuid","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ipv4","status":"passed","title":"z.ipv4","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.ipv6","status":"passed","title":"z.ipv6","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.base64","status":"passed","title":"z.base64","duration":0,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.e164","status":"passed","title":"z.e164","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" z.jwt","status":"passed","title":"z.jwt","duration":0,"failureMessages":[]}],"startTime":1756058588141,"endTime":1756058588156,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/mini/tests/string.test.ts"},{"assertionResults":[{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 1 array","status":"passed","title":"correctly pluralizes 1 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 2 array","status":"passed","title":"correctly pluralizes 2 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 5 array","status":"passed","title":"correctly pluralizes 5 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 11 array","status":"passed","title":"correctly pluralizes 11 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 21 array","status":"passed","title":"correctly pluralizes 21 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 22 array","status":"passed","title":"correctly pluralizes 22 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 25 array","status":"passed","title":"correctly pluralizes 25 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 101 array","status":"passed","title":"correctly pluralizes 101 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","array pluralization"],"fullName":" Belarusian localization pluralization rules array pluralization correctly pluralizes 111 array","status":"passed","title":"correctly pluralizes 111 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 1 set","status":"passed","title":"correctly pluralizes 1 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 2 set","status":"passed","title":"correctly pluralizes 2 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 5 set","status":"passed","title":"correctly pluralizes 5 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 11 set","status":"passed","title":"correctly pluralizes 11 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 21 set","status":"passed","title":"correctly pluralizes 21 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 22 set","status":"passed","title":"correctly pluralizes 22 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 25 set","status":"passed","title":"correctly pluralizes 25 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 101 set","status":"passed","title":"correctly pluralizes 101 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","set pluralization"],"fullName":" Belarusian localization pluralization rules set pluralization correctly pluralizes 111 set","status":"passed","title":"correctly pluralizes 111 set","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 1 string","status":"passed","title":"correctly pluralizes 1 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 2 string","status":"passed","title":"correctly pluralizes 2 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 5 string","status":"passed","title":"correctly pluralizes 5 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 11 string","status":"passed","title":"correctly pluralizes 11 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 21 string","status":"passed","title":"correctly pluralizes 21 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 22 string","status":"passed","title":"correctly pluralizes 22 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","string pluralization"],"fullName":" Belarusian localization pluralization rules string pluralization correctly pluralizes 25 string","status":"passed","title":"correctly pluralizes 25 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 0 file","status":"passed","title":"correctly pluralizes 0 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 1 file","status":"passed","title":"correctly pluralizes 1 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 2 file","status":"passed","title":"correctly pluralizes 2 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 5 file","status":"passed","title":"correctly pluralizes 5 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 11 file","status":"passed","title":"correctly pluralizes 11 file","duration":1,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 21 file","status":"passed","title":"correctly pluralizes 21 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 22 file","status":"passed","title":"correctly pluralizes 22 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 25 file","status":"passed","title":"correctly pluralizes 25 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 101 file","status":"passed","title":"correctly pluralizes 101 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules","file pluralization"],"fullName":" Belarusian localization pluralization rules file pluralization correctly pluralizes 110 file","status":"passed","title":"correctly pluralizes 110 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles negative numbers correctly","status":"passed","title":"handles negative numbers correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles zero correctly","status":"passed","title":"handles zero correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Belarusian localization","pluralization rules"],"fullName":" Belarusian localization pluralization rules handles bigint values correctly","status":"passed","title":"handles bigint values correctly","duration":0,"failureMessages":[]}],"startTime":1756058606409,"endTime":1756058606414,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/core/tests/locales/be.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parsedType","status":"passed","title":"parsedType","duration":1,"failureMessages":[]}],"startTime":1756058627780,"endTime":1756058627781,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/core/tests/locales/en.test.ts"},{"assertionResults":[{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 1 array","status":"passed","title":"correctly pluralizes 1 array","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 2 array","status":"passed","title":"correctly pluralizes 2 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 5 array","status":"passed","title":"correctly pluralizes 5 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 11 array","status":"passed","title":"correctly pluralizes 11 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 21 array","status":"passed","title":"correctly pluralizes 21 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 22 array","status":"passed","title":"correctly pluralizes 22 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 25 array","status":"passed","title":"correctly pluralizes 25 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 101 array","status":"passed","title":"correctly pluralizes 101 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","array pluralization"],"fullName":" Russian localization pluralization rules array pluralization correctly pluralizes 111 array","status":"passed","title":"correctly pluralizes 111 array","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 1 set","status":"passed","title":"correctly pluralizes 1 set","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 2 set","status":"passed","title":"correctly pluralizes 2 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 5 set","status":"passed","title":"correctly pluralizes 5 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 11 set","status":"passed","title":"correctly pluralizes 11 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 21 set","status":"passed","title":"correctly pluralizes 21 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 22 set","status":"passed","title":"correctly pluralizes 22 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 25 set","status":"passed","title":"correctly pluralizes 25 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 101 set","status":"passed","title":"correctly pluralizes 101 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","set pluralization"],"fullName":" Russian localization pluralization rules set pluralization correctly pluralizes 111 set","status":"passed","title":"correctly pluralizes 111 set","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 1 string","status":"passed","title":"correctly pluralizes 1 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 2 string","status":"passed","title":"correctly pluralizes 2 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 5 string","status":"passed","title":"correctly pluralizes 5 string","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 11 string","status":"passed","title":"correctly pluralizes 11 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 21 string","status":"passed","title":"correctly pluralizes 21 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 22 string","status":"passed","title":"correctly pluralizes 22 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","string pluralization"],"fullName":" Russian localization pluralization rules string pluralization correctly pluralizes 25 string","status":"passed","title":"correctly pluralizes 25 string","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 0 file","status":"passed","title":"correctly pluralizes 0 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 1 file","status":"passed","title":"correctly pluralizes 1 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 2 file","status":"passed","title":"correctly pluralizes 2 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 5 file","status":"passed","title":"correctly pluralizes 5 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 11 file","status":"passed","title":"correctly pluralizes 11 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 21 file","status":"passed","title":"correctly pluralizes 21 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 22 file","status":"passed","title":"correctly pluralizes 22 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 25 file","status":"passed","title":"correctly pluralizes 25 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 101 file","status":"passed","title":"correctly pluralizes 101 file","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules","file pluralization"],"fullName":" Russian localization pluralization rules file pluralization correctly pluralizes 110 file","status":"passed","title":"correctly pluralizes 110 file","duration":1,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles negative numbers correctly","status":"passed","title":"handles negative numbers correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles zero correctly","status":"passed","title":"handles zero correctly","duration":0,"failureMessages":[]},{"ancestorTitles":["","Russian localization","pluralization rules"],"fullName":" Russian localization pluralization rules handles bigint values correctly","status":"passed","title":"handles bigint values correctly","duration":0,"failureMessages":[]}],"startTime":1756058606844,"endTime":1756058606849,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/core/tests/locales/ru.test.ts"},{"assertionResults":[{"ancestorTitles":[""],"fullName":" parsedType","status":"passed","title":"parsedType","duration":1,"failureMessages":[]},{"ancestorTitles":[""],"fullName":" locales - tr","status":"passed","title":"locales - tr","duration":6,"failureMessages":[]}],"startTime":1756058609227,"endTime":1756058609234,"status":"passed","message":"","name":"C:/Users/scale/Code/edgeql/EdgeQL/services/executor/node_modules/@edgeql/compiler/node_modules/zod/src/v4/core/tests/locales/tr.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to load url express (resolved id: express) in C:/Users/scale/Code/edgeql/EdgeQL/tests/integration/api-integration.test.ts. Does the file exist?","name":"C:/Users/scale/Code/edgeql/EdgeQL/tests/integration/api-integration.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to resolve entry for package \"@edgeql/compiler\". The package may have incorrect main/module/exports specified in its package.json.","name":"C:/Users/scale/Code/edgeql/EdgeQL/tests/integration/e2e-pipeline.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to resolve entry for package \"@edgeql/compiler\". The package may have incorrect main/module/exports specified in its package.json.","name":"C:/Users/scale/Code/edgeql/EdgeQL/tests/integration/executor-sandbox-integration.test.ts"},{"assertionResults":[],"startTime":1756058582291,"endTime":1756058582291,"status":"failed","message":"Failed to resolve entry for package \"@edgeql/compiler\". The package may have incorrect main/module/exports specified in its package.json.","name":"C:/Users/scale/Code/edgeql/EdgeQL/tests/integration/pipeline-execution.test.ts"}]}